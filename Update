import React, { useEffect, useMemo, useState } from "react";
import axios from "axios";

type CouponPayload = {
  id?: string;                 // ถ้าต้องการส่งเอง (ไม่จำเป็น)
  authorEmail?: string;
  authorName?: string;
  avatarUrl?: string;          // mapped ไป authorAvatar ที่ฝั่ง BE
  couponCode: string;
  couponTitle: string;
  couponDescription?: string;
  active?: boolean;
  startDate?: string;          // ISO string
  endDate?: string;            // ISO string
  pointsRequired?: number;
};

type Props = {
  open: boolean;
  onClose: () => void;
  onCreated?: (couponId: string) => void;
};

const axiosClient = axios.create({
  baseURL: import.meta.env.VITE_API_BASE_URL || "/",
});
axiosClient.interceptors.request.use((config) => {
  const token = localStorage.getItem("token") || sessionStorage.getItem("token");
  if (token) {
    config.headers = { ...(config.headers || {}), Authorization: `Bearer ${token}` };
  }
  return config;
});

const fmtToLocalInput = (d: Date) => {
  // return yyyy-MM-ddTHH:mm สำหรับ input type="datetime-local"
  const pad = (n: number) => String(n).padStart(2, "0");
  const yyyy = d.getFullYear();
  const MM = pad(d.getMonth() + 1);
  const dd = pad(d.getDate());
  const hh = pad(d.getHours());
  const mm = pad(d.getMinutes());
  return `${yyyy}-${MM}-${dd}T${hh}:${mm}`;
};

export default function CouponCreateModal({ open, onClose, onCreated }: Props) {
  const [form, setForm] = useState<CouponPayload>({
    couponTitle: "",
    couponCode: "",
    couponDescription: "",
    pointsRequired: 0,
    active: true,
    startDate: fmtToLocalInput(new Date()),
    endDate: fmtToLocalInput(new Date(Date.now() + 7 * 24 * 3600 * 1000)), // +7 วัน
    authorEmail: "",
    authorName: "",
    avatarUrl: "",
  });

  const [submitting, setSubmitting] = useState(false);
  const [err, setErr] = useState<string | null>(null);

  // ลองดึง author จาก JWT (ถ้ามี)
  useEffect(() => {
    try {
      const token = localStorage.getItem("token") || sessionStorage.getItem("token");
      if (!token) return;
      const [, payload] = token.split(".");
      const json = JSON.parse(atob(payload.replace(/-/g, "+").replace(/_/g, "/")));
      setForm((p) => ({
        ...p,
        authorEmail: p.authorEmail || json?.email || "",
        authorName: p.authorName || json?.name || json?.preferred_username || "",
      }));
    } catch {
      /* no-op */
    }
  }, []);

  // validation ง่ายๆ
  const canSubmit = useMemo(() => {
    if (!form.couponTitle?.trim()) return false;
    if (!form.couponCode?.trim()) return false;
    if (form.pointsRequired !== undefined && Number(form.pointsRequired) < 0) return false;
    if (form.startDate && form.endDate) {
      const s = new Date(form.startDate);
      const e = new Date(form.endDate);
      if (e.getTime() < s.getTime()) return false;
    }
    return true;
  }, [form]);

  const toISOStringOrNull = (v?: string) => {
    if (!v) return undefined;
    // v มาจาก datetime-local => เป็น local time; ส่งเป็น ISO string (UTC) ให้ฝั่ง BE
    const d = new Date(v);
    return d.toISOString();
  };

  const submit = async () => {
    if (!canSubmit || submitting) return;
    setSubmitting(true);
    setErr(null);
    try {
      const payload = {
        id: form.id || undefined,
        authorEmail: form.authorEmail || undefined,
        authorName: form.authorName || undefined,
        avatarUrl: form.avatarUrl || undefined,
        couponCode: form.couponCode.trim(),
        couponTitle: form.couponTitle.trim(),
        couponDescription: form.couponDescription?.trim() || undefined,
        active: form.active ?? true,
        startDate: toISOStringOrNull(form.startDate),
        endDate: toISOStringOrNull(form.endDate),
        pointsRequired:
          form.pointsRequired !== undefined && form.pointsRequired !== null
            ? Number(form.pointsRequired)
            : undefined,
      };

      const res = await axiosClient.post(
        "/CouponPipelineService/Create-Coupon-For-User",
        payload
      );
      // คาดว่าฝั่ง BE คืน { message, couponId }
      const couponId = res?.data?.couponId ?? "";
      if (onCreated) onCreated(couponId);
      onClose();
    } catch (e: any) {
      console.error(e);
      setErr(e?.response?.data || "สร้างคูปองไม่สำเร็จ");
    } finally {
      setSubmitting(false);
    }
  };

  if (!open) return null;

  return (
    <div className="fixed inset-0 z-[60]">
      {/* Backdrop */}
      <div
        className="absolute inset-0 bg-black/40 backdrop-blur-sm"
        onClick={() => !submitting && onClose()}
      />
      {/* Modal */}
      <div className="absolute inset-0 flex items-center justify-center p-4">
        <div className="w-full max-w-2xl rounded-2xl bg-white shadow-xl border">
          <div className="px-6 py-4 border-b flex items-center justify-between">
            <h2 className="text-lg font-semibold">เพิ่มคูปองใหม่</h2>
            <button
              onClick={onClose}
              className="rounded-lg px-2 py-1 text-sm hover:bg-gray-100"
              disabled={submitting}
            >
              ปิด
            </button>
          </div>

          <div className="p-6 space-y-4 max-h-[75vh] overflow-auto">
            {/* Title & Code */}
            <div className="grid md:grid-cols-2 gap-4">
              <div>
                <label className="text-sm font-medium">ชื่อคูปอง *</label>
                <input
                  className="w-full mt-1 rounded-xl border px-3 py-2"
                  placeholder="เช่น ส่วนลด 50 คะแนน"
                  value={form.couponTitle}
                  onChange={(e) => setForm((p) => ({ ...p, couponTitle: e.target.value }))}
                />
              </div>
              <div>
                <label className="text-sm font-medium">โค้ดคูปอง *</label>
                <input
                  className="w-full mt-1 rounded-xl border px-3 py-2 uppercase"
                  placeholder="เช่น SAVE50"
                  value={form.couponCode}
                  onChange={(e) => setForm((p) => ({ ...p, couponCode: e.target.value.toUpperCase() }))}
                />
              </div>
            </div>

            {/* Description */}
            <div>
              <label className="text-sm font-medium">รายละเอียด</label>
              <textarea
                className="w-full mt-1 rounded-xl border px-3 py-2"
                rows={3}
                placeholder="อธิบายเงื่อนไขหรือรายละเอียดคูปองสั้นๆ"
                value={form.couponDescription}
                onChange={(e) => setForm((p) => ({ ...p, couponDescription: e.target.value }))}
              />
            </div>

            {/* Points */}
            <div className="grid md:grid-cols-3 gap-4">
              <div>
                <label className="text-sm font-medium">คะแนนที่ต้องใช้</label>
                <input
                  type="number"
                  min={0}
                  className="w-full mt-1 rounded-xl border px-3 py-2"
                  value={form.pointsRequired ?? 0}
                  onChange={(e) =>
                    setForm((p) => ({ ...p, pointsRequired: Number(e.target.value) }))
                  }
                />
              </div>
              <div>
                <label className="text-sm font-medium">เริ่มใช้ตั้งแต่</label>
                <input
                  type="datetime-local"
                  className="w-full mt-1 rounded-xl border px-3 py-2"
                  value={form.startDate || ""}
                  onChange={(e) => setForm((p) => ({ ...p, startDate: e.target.value }))}
                />
              </div>
              <div>
                <label className="text-sm font-medium">สิ้นสุด</label>
                <input
                  type="datetime-local"
                  className="w-full mt-1 rounded-xl border px-3 py-2"
                  value={form.endDate || ""}
                  onChange={(e) => setForm((p) => ({ ...p, endDate: e.target.value }))}
                />
              </div>
            </div>

            {/* Active toggle */}
            <div className="flex items-center gap-3">
              <label className="text-sm font-medium">สถานะ</label>
              <button
                type="button"
                onClick={() => setForm((p) => ({ ...p, active: !p.active }))}
                className={`relative inline-flex h-6 w-11 items-center rounded-full transition ${
                  form.active ? "bg-emerald-500" : "bg-gray-300"
                }`}
              >
                <span
                  className={`inline-block h-5 w-5 transform rounded-full bg-white transition ${
                    form.active ? "translate-x-5" : "translate-x-1"
                  }`}
                />
              </button>
              <span className="text-sm">{form.active ? "ใช้งาน" : "ปิดใช้งาน"}</span>
            </div>

            {/* Author info (optional) */}
            <div className="grid md:grid-cols-3 gap-4">
              <div>
                <label className="text-sm font-medium">Author Email</label>
                <input
                  className="w-full mt-1 rounded-xl border px-3 py-2"
                  placeholder="admin@example.com"
                  value={form.authorEmail || ""}
                  onChange={(e) => setForm((p) => ({ ...p, authorEmail: e.target.value }))}
                />
              </div>
              <div>
                <label className="text-sm font-medium">Author Name</label>
                <input
                  className="w-full mt-1 rounded-xl border px-3 py-2"
                  placeholder="ชื่อผู้สร้างคูปอง"
                  value={form.authorName || ""}
                  onChange={(e) => setForm((p) => ({ ...p, authorName: e.target.value }))}
                />
              </div>
              <div>
                <label className="text-sm font-medium">Avatar URL</label>
                <input
                  className="w-full mt-1 rounded-xl border px-3 py-2"
                  placeholder="https://…"
                  value={form.avatarUrl || ""}
                  onChange={(e) => setForm((p) => ({ ...p, avatarUrl: e.target.value }))}
                />
              </div>
            </div>

            {err && (
              <div className="rounded-xl border border-red-200 bg-red-50 px-3 py-2 text-sm text-red-700">
                {String(err)}
              </div>
            )}
          </div>

          <div className="px-6 py-4 border-t flex items-center justify-end gap-2">
            <button
              onClick={onClose}
              className="rounded-xl px-4 py-2 border hover:bg-gray-50"
              disabled={submitting}
            >
              ยกเลิก
            </button>
            <button
              onClick={submit}
              disabled={!canSubmit || submitting}
              className="rounded-xl px-4 py-2 bg-black text-white disabled:opacity-50"
            >
              {submitting ? "กำลังบันทึก..." : "บันทึกคูปอง"}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}



-----------

import { useState } from "react";
import CouponCreateModal from "./CouponCreateModal";

export default function CouponPage() {
  const [open, setOpen] = useState(false);

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-4">
        <h1 className="text-2xl font-bold">Coupons</h1>
        <button
          onClick={() => setOpen(true)}
          className="rounded-xl px-4 py-2 bg-blue-600 text-white"
        >
          + เพิ่มคูปอง
        </button>
      </div>

      {/* ตาราง/รายการคูปองของคุณตรงนี้... */}

      <CouponCreateModal
        open={open}
        onClose={() => setOpen(false)}
        onCreated={(couponId) => {
          // refresh รายการคูปอง หรือแจ้งเตือน
          alert(`สร้างคูปองสำเร็จ! ID: ${couponId}`);
        }}
      />
    </div>
  );
}

