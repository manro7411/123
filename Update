/* eslint-disable @typescript-eslint/no-explicit-any */
import { useState, useContext, useEffect, useMemo, useRef } from "react";
import { useNavigate } from "react-router-dom";
import { AuthContext } from "../../../Authentication/AuthContext";
import AdminSidebarWidget from "../Widgets/AdminSideBar";
import AdminCalendar from "../Widgets/AdminCalendar";
import AdminAvatarWidget from "../Widgets/AdminAvatarWidget";
import ScoreboardChart from "../../../components/ScoreboardChart";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
  Legend,
} from "recharts";
import axios from "axios";
import RoleSwitcher from "../../../components/RoleSwitcher";
import { EventSourcePolyfill } from "event-source-polyfill";
import { useUserProfile } from "../../User/Lesson/hooks/useUserProfile";
import {
  COLORS,
  type ContentPerfItem,
  type ContentPerformanceResponse,
  type OverviewResponse,
} from "../../../types/trainer/types";
import { ENDPOINTS } from "../../../config/endpoints";

// ---------------------------------------------------------------------------
// Utilities
// ---------------------------------------------------------------------------
function toDateInput(d: Date) {
  return d.toISOString().slice(0, 10);
}
const isDocVisible = () =>
  typeof document !== "undefined" ? document.visibilityState === "visible" : true;

// localStorage helpers
const dismissedKey = (email: string) => `QA_DISMISSED_${email}`;
const lastSeenKey = (email: string) => `QA_LAST_SEEN_${email}`;
function loadDismissed(email: string): Set<string> {
  try {
    const raw = localStorage.getItem(dismissedKey(email));
    if (!raw) return new Set();
    const arr = JSON.parse(raw) as string[];
    return new Set(arr);
  } catch {
    return new Set();
  }
}
function saveDismissed(email: string, set: Set<string>) {
  try {
    localStorage.setItem(dismissedKey(email), JSON.stringify([...set]));
  } catch {}
}
function loadLastSeen(email: string): string {
  try {
    return localStorage.getItem(lastSeenKey(email)) || "";
  } catch {
    return "";
  }
}
function saveLastSeen(email: string, iso: string) {
  try {
    localStorage.setItem(lastSeenKey(email), iso);
  } catch {}
}

// ---------------------------------------------------------------------------
// Toasts (SSE + Poll)
// ---------------------------------------------------------------------------
type QuestionAlert = {
  id: string;
  userEmail: string;
  lessonId?: string | number;
  lessonTitle?: string;
  question: string;
  createdAt?: string;
};
type ToastItem = QuestionAlert & { _ts: number };

function ToastCard({
  toast,
  onClose,
  onClick,
}: {
  toast: ToastItem;
  onClose: (id: string) => void;
  onClick?: (toast: ToastItem) => void;
}) {
  const [hover, setHover] = useState(false);
  useEffect(() => {
    if (hover) return;
    const t = setTimeout(() => onClose(toast.id), 8000);
    return () => clearTimeout(t);
  }, [hover, toast.id, onClose]);
  return (
    <div
      className="w-80 max-w-[88vw] bg-white shadow-xl rounded-xl border p-3 cursor-pointer transition hover:shadow-2xl"
      onMouseEnter={() => setHover(true)}
      onMouseLeave={() => setHover(false)}
      onClick={() => onClick?.(toast)}
      role="alert"
      aria-live="polite"
    >
      <div className="flex items-start gap-3">
        <div className="flex h-8 w-8 items-center justify-center rounded-full bg-blue-100 text-blue-600 text-sm">
          Q
        </div>
        <div className="flex-1">
          <div className="text-xs text-gray-500 mb-0.5">
            {toast.lessonTitle ? toast.lessonTitle : "New Question"} • {toast.userEmail}
          </div>
          <div className="text-sm text-gray-800 line-clamp-3 whitespace-pre-wrap">
            {toast.question}
          </div>
          {toast.createdAt && (
            <div className="text-[10px] text-gray-400 mt-1">
              {new Date(toast.createdAt).toLocaleString()}
            </div>
          )}
        </div>
        <button
          aria-label="Close notification"
          className="text-gray-400 hover:text-gray-600 ml-1"
          onClick={(e) => {
            e.stopPropagation();
            onClose(toast.id);
          }}
        >
          ✕
        </button>
      </div>
    </div>
  );
}

function ToastStack({
  toasts,
  onClose,
  onItemClick,
  onMarkAllRead,
}: {
  toasts: ToastItem[];
  onClose: (id: string) => void;
  onItemClick?: (toast: ToastItem) => void;
  onMarkAllRead?: () => void;
}) {
  if (toasts.length === 0) return null;
  return (
    <div className="fixed bottom-4 right-4 z-[60] flex flex-col gap-3">
      <div className="flex justify-end">
        <button className="text-xs px-2 py-1 rounded-full bg-gray-100 border hover:bg-gray-200" onClick={onMarkAllRead}>
          Mark all as read
        </button>
      </div>
      {toasts.map((t) => (
        <ToastCard key={t.id} toast={t} onClose={onClose} onClick={onItemClick} />
      ))}
    </div>
  );
}

function useTrainerQuestionAlerts(token: string | null, trainerEmail: string | null) {
  const [toasts, setToasts] = useState<ToastItem[]>([]);
  const dismissedRef = useRef<Set<string>>(new Set());
  const seenIds = useRef<Set<string>>(new Set());
  const lastSeenAt = useRef<string>("");
  const sseRef = useRef<EventSourcePolyfill | null>(null);
  const pollTimer = useRef<number | null>(null);

  const SSE_URL = "/api/user-question-answer/stream";
  const POLL_URL = "/api/user-question-answer/pending";

  useEffect(() => {
    if (!trainerEmail) return;
    dismissedRef.current = loadDismissed(trainerEmail);
    lastSeenAt.current = loadLastSeen(trainerEmail);
  }, [trainerEmail]);

  const persistLastSeen = (iso: string | undefined) => {
    if (!trainerEmail || !iso) return;
    lastSeenAt.current = iso;
    saveLastSeen(trainerEmail, iso);
  };

  const pushToasts = (items: QuestionAlert[]) => {
    if (!items?.length) return;
    const newOnes: ToastItem[] = [];
    for (const it of items) {
      if (!it?.id) continue;
      if (trainerEmail && dismissedRef.current.has(it.id)) continue;
      if (seenIds.current.has(it.id)) continue;
      seenIds.current.add(it.id);
      newOnes.push({ ...it, _ts: Date.now() });
      if (it.createdAt && it.createdAt > (lastSeenAt.current || "")) {
        persistLastSeen(it.createdAt);
      }
    }
    if (newOnes.length) setToasts((prev) => [...prev, ...newOnes].slice(-6));
  };

  useEffect(() => {
    if (!token || !trainerEmail) return;
    sseRef.current?.close();
    sseRef.current = null;

    const params = new URLSearchParams();
    params.set("trainer", trainerEmail.trim().toLowerCase());
    if (lastSeenAt.current) params.set("since", lastSeenAt.current);

    const url = `${SSE_URL}?${params.toString()}`;
    const es = new EventSourcePolyfill(url, {
      headers: { Authorization: `Bearer ${token}` },
      withCredentials: false,
    });

    const onQuestion = (ev: MessageEvent) => {
      try {
        const raw = typeof ev.data === "string" ? ev.data : String(ev.data);
        const payload = JSON.parse(raw) as QuestionAlert | QuestionAlert[];
        const arr = Array.isArray(payload) ? payload : [payload];
        const sortedDates = arr.map((a) => a.createdAt).filter(Boolean).sort();
        const latest =
          sortedDates.length > 0 ? (sortedDates[sortedDates.length - 1] as string) : undefined;
        if (latest) persistLastSeen(latest);
        pushToasts(arr);
      } catch { /* empty */ }
    };

    (es as any).addEventListener("question", onQuestion as any);
    es.onerror = () => {
      es.close();
      sseRef.current = null;
    };
    sseRef.current = es;

    return () => {
      try {
        (es as any).removeEventListener("question", onQuestion as any);
      } finally {
        es.close();
        sseRef.current = null;
      }
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [token, trainerEmail]);

  useEffect(() => {
    if (!token || !trainerEmail) return;

    const tick = async () => {
      if (!isDocVisible()) {
        schedule();
        return;
      }
      try {
        const res = await axios.get<QuestionAlert[]>(POLL_URL, {
          params: {
            trainer: trainerEmail.trim().toLowerCase(),
            since: lastSeenAt.current || undefined,
            limit: 20,
          },
          headers: token ? { Authorization: `Bearer ${token}` } : undefined,
        });
        pushToasts(Array.isArray(res.data) ? res.data : []);
      } catch { /* empty */ } finally {
        schedule();
      }
    };

    const schedule = () => {
      if (pollTimer.current) window.clearTimeout(pollTimer.current);
      pollTimer.current = window.setTimeout(tick, 15000) as unknown as number;
    };

    pollTimer.current = window.setTimeout(tick, 3000) as unknown as number;

    const onVisibility = () => {
      if (isDocVisible()) {
        if (pollTimer.current) window.clearTimeout(pollTimer.current);
        pollTimer.current = window.setTimeout(tick, 1000) as unknown as number;
      }
    };
    document.addEventListener("visibilitychange", onVisibility);

    return () => {
      if (pollTimer.current) window.clearTimeout(pollTimer.current);
      pollTimer.current = null;
      document.removeEventListener("visibilitychange", onVisibility);
    };
  }, [token, trainerEmail]);

  const closeToast = (id: string) => {
    setToasts((prev) => prev.filter((t) => t.id !== id));
    if (trainerEmail) {
      dismissedRef.current.add(id);
      saveDismissed(trainerEmail, dismissedRef.current);
    }
  };
  const markAllRead = () => {
    setToasts((prev) => {
      if (trainerEmail) {
        for (const t of prev) dismissedRef.current.add(t.id);
        saveDismissed(trainerEmail, dismissedRef.current);
      }
      return [];
    });
  };

  return { toasts, closeToast, markAllRead };
}

// ---------------------------------------------------------------------------
// Types for /api/profile & assignment
// ---------------------------------------------------------------------------
type MyProfile = {
  id: string;
  name?: string;
  email: string;
  avatarUrl?: string;
};
type AssignmentTeam = {
  supervisor: string;
  teamName: string;
  teamId: string;
};
type AssignmentResponse = {
  trainerId: string;
  teams: AssignmentTeam[];
  message?: string;
};

// ---------------------------------------------------------------------------
// Main
// ---------------------------------------------------------------------------
const AdminDashboard = () => {
  const { token: ctxToken } = useContext(AuthContext);
  const token =
    ctxToken || localStorage.getItem("token") || sessionStorage.getItem("token");
  const navigate = useNavigate();

  // block unauthenticated
  useEffect(() => {
    if (!token) navigate("/");
  }, [token, navigate]);

  const { fullName, email: trainerEmail } = useUserProfile(token || null);
  const displayName = fullName || "Administrator";

  // Toasts
  const { toasts, closeToast, markAllRead } = useTrainerQuestionAlerts(
    token || null,
    trainerEmail || null
  );

  // Profile + Assignment
  const [myProfile, setMyProfile] = useState<MyProfile | null>(null);
  const [assignment, setAssignment] = useState<AssignmentResponse | null>(null);

  // Team members
  const [selectedTeamId, setSelectedTeamId] = useState<string>("");
  const [teamMembers, setTeamMembers] = useState<any[]>([]);
  const [teamMembersLoading, setTeamMembersLoading] = useState(false);
  const [teamMembersError, setTeamMembersError] = useState<string | null>(null);

  // Member filter
  const [memberFilterOn, setMemberFilterOn] = useState(false);
  const [memberSearch, setMemberSearch] = useState("");
  const [selectedMemberEmails, setSelectedMemberEmails] = useState<string[]>([]);

  // Date range + filters
  const [filterText, setFilterText] = useState({ course: "" });
  const today = useMemo(() => new Date(), []);
  const weekAgo = useMemo(() => new Date(Date.now() - 6 * 24 * 3600 * 1000), []);
  const [start, setStart] = useState(toDateInput(weekAgo));
  const [end, setEnd] = useState(toDateInput(today));

  // Data
  const [loading, setLoading] = useState(false);
  const [overview, setOverview] = useState<OverviewResponse | null>(null);
  const [contentPerf, setContentPerf] = useState<ContentPerfItem[]>([]);
  const [error, setError] = useState<string | null>(null);

  // ---- Load profile + assignment + default team ----
  useEffect(() => {
    const loadProfileAndAssignment = async () => {
      if (!token) return;
      try {
        const prof = await axios.get<MyProfile>("/api/profile", {
          headers: { Authorization: `Bearer ${token}` },
        });
        setMyProfile(prof.data);

        if (prof.data?.id) {
          const res = await axios.get<AssignmentResponse>(
            `/api/trainer-information/assignment/${prof.data.id}`,
            { headers: { Authorization: `Bearer ${token}` } }
          );
          const payload = res.data || { trainerId: prof.data.id, teams: [] };
          payload.teams = Array.isArray(payload.teams) ? payload.teams : [];
          setAssignment(payload);

          // Default team selection
          const firstTeamId = payload.teams?.[0]?.teamId || "";
          setSelectedTeamId(firstTeamId);
          if (firstTeamId) {
            void fetchTeamMembers(firstTeamId);
          }
        } else {
          setAssignment({ trainerId: "", teams: [] });
        }
      } catch {
        setAssignment({ trainerId: "", teams: [] });
      }
    };
    loadProfileAndAssignment();
  }, [token]);

  // ---- Fetch team members ----
  const fetchTeamMembers = async (teamId: string) => {
    if (!teamId || !token) return;
    setTeamMembersLoading(true);
    setTeamMembersError(null);
    try {
      const res = await axios.get<any[]>(`/teams/${encodeURIComponent(teamId)}/members`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      const arr = Array.isArray(res.data) ? res.data : [];
      // normalize: expect fields {name, email, role?}
      setTeamMembers(
        arr.map((m) => ({
          name: m.name || m.fullName || m.displayName || m.email || "Unknown",
          email: m.email,
          role: m.role || m.position || "",
        }))
      );
      // clear member selections when team changes
      setSelectedMemberEmails([]);
    } catch (e: any) {
      setTeamMembers([]);
      setTeamMembersError(e?.response?.data?.message || e?.message || "Failed to load members");
    } finally {
      setTeamMembersLoading(false);
    }
  };

  // ---- Load analytics (always individual scope on server; member filter is client-side) ----
  const fetchAll = async () => {
    if (!token) return;
    setLoading(true);
    setError(null);
    const auth = { headers: { Authorization: `Bearer ${token}` } };

    try {
      const [ovRes, cpRes] = await Promise.all([
        axios.get<OverviewResponse>(ENDPOINTS.TrainerOverview, {
          params: { start, end },
          ...auth,
        }),
        axios.get<ContentPerformanceResponse>(ENDPOINTS.TrainerPerformance, {
          params: { start, end, order: "learners:desc", limit: 100, offset: 0 },
          ...auth,
        }),
      ]);
      setOverview(ovRes.data);
      setContentPerf(cpRes.data.items || []);
    } catch (e: any) {
      console.error("Failed to load trainer analytics:", e);
      setError(e?.response?.data?.error || e?.message || "Failed to load analytics");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchAll();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [start, end]);

  // ---- Derived (member-aware) data ----
  const selectedSet = useMemo(() => new Set(selectedMemberEmails.map((e) => e.toLowerCase())), [selectedMemberEmails]);

  // Recompute daily activity using overview.trend details if member filter is ON
  const dailyActivity = useMemo(() => {
    if (!overview?.trend?.length) return [];
    if (!memberFilterOn || selectedSet.size === 0) {
      // original counts
      return overview.trend.map((t: any) => ({
        date: t.date,
        enroll: t.enrollCount ?? t.enroll ?? 0,
        complete: t.completeCount ?? t.complete ?? 0,
      }));
    }
    // client-side filter
    return overview.trend.map((t: any) => {
      const e = Array.isArray(t.enroll) ? t.enroll : [];
      const c = Array.isArray(t.complete) ? t.complete : [];
      const eCount = e.filter((x: any) => selectedSet.has(String(x.email || "").toLowerCase())).length;
      const cCount = c.filter((x: any) => selectedSet.has(String(x.email || "").toLowerCase())).length;
      return { date: t.date, enroll: eCount, complete: cCount };
    });
  }, [overview, memberFilterOn, selectedSet]);

  // Content performance: if filtering by members, show only rows where any learner in selectedSet
  const filteredContentPerf = useMemo(() => {
    let rows = contentPerf;
    if (filterText.course) {
      rows = rows.filter((it) =>
        it.title.toLowerCase().includes(filterText.course.toLowerCase())
      );
    }
    if (memberFilterOn && selectedSet.size > 0) {
      // keep items with any learner in selected set
      rows = rows
        .map((it: any) => {
          const learners = Array.isArray(it.learners) ? it.learners : [];
          const picked = learners.filter((lr: any) =>
            selectedSet.has(String(lr.email || "").toLowerCase())
          );
          if (picked.length === 0) return null;

          // (Optional) recompute simple KPIs for the picked learners (client-side)
          const compRate =
            picked.length === 0
              ? 0
              : picked.reduce((acc: number, lr: any) => acc + (lr.percent === 100 ? 1 : 0), 0) /
                picked.length;
          const avgScore =
            picked.length === 0
              ? null
              : picked
                  .map((x: any) => (typeof x.score === "number" ? x.score : null))
                  .filter((x: number | null) => x != null)
                  .reduce((a: number, b: number) => a + (b as number), 0) /
                picked.filter((x: any) => typeof x.score === "number").length || null;

          return {
            ...it,
            learners: picked,
            learnersCount: picked.length,
            completionRate: compRate,
            avgScore: avgScore,
          };
        })
        .filter(Boolean) as any[];
    }
    return rows;
  }, [contentPerf, filterText.course, memberFilterOn, selectedSet]);

  // ---- UI helpers ----
  const hasTeams = (assignment?.teams?.length || 0) > 0;

  const toggleMemberEmail = (email: string) => {
    setSelectedMemberEmails((prev) =>
      prev.includes(email)
        ? prev.filter((e) => e !== email)
        : [...prev, email]
    );
  };

  const visibleMembers = useMemo(() => {
    const q = memberSearch.trim().toLowerCase();
    if (!q) return teamMembers;
    return teamMembers.filter(
      (m) =>
        String(m.name || "").toLowerCase().includes(q) ||
        String(m.email || "").toLowerCase().includes(q) ||
        String(m.role || "").toLowerCase().includes(q)
    );
  }, [teamMembers, memberSearch]);

  const handleToastClick = (t: ToastItem) => {
    closeToast(t.id);
    navigate("/administrator/administrator/task-management", {
      state: { focusUserEmail: t.userEmail, focusLessonId: t.lessonId },
    });
  };

  return (
    <div className="min-h-screen bg-gray-50 flex">
      {/* sidebar */}
      <AdminSidebarWidget />

      {/* main */}
      <main className="flex-1 p-6 flex flex-col">
        {/* header */}
        <div className="flex justify-between items-start">
          <div>
            <h1 className="text-3xl font-bold text-gray-800 mb-1">👋 Welcome, {displayName}</h1>
            <p className="text-gray-600 mb-2 ml-10">Have a good day!</p>

            {/* Assignment */}
            <div className="bg-white rounded-xl border shadow-sm px-4 py-3 inline-block">
              <div className="flex items-center gap-3">
                <div className="text-sm font-semibold text-gray-700">Assignment</div>
                <div className="text-xs text-gray-500">Trainer ID: {myProfile?.id || "-"}</div>
              </div>
              {!assignment ? (
                <div className="text-sm text-gray-500 mt-2">Loading assignment...</div>
              ) : (assignment.teams?.length || 0) === 0 ? (
                <div className="text-sm text-gray-500 mt-2">
                  {assignment.message || "Not Assigned"}
                </div>
              ) : (
                <div className="mt-3 flex flex-wrap gap-3">
                  {assignment.teams.map((t) => (
                    <button
                      key={t.teamId}
                      onClick={() => {
                        setSelectedTeamId(t.teamId);
                        fetchTeamMembers(t.teamId);
                      }}
                      className={`flex items-center gap-3 px-3 py-2 border rounded-lg transition ${
                        selectedTeamId === t.teamId
                          ? "bg-blue-50 border-blue-400"
                          : "bg-gray-50 border"
                      }`}
                      title={`Team ID: ${t.teamId}`}
                    >
                      <div className="flex flex-col text-left">
                        <span className="text-[11px] text-gray-500">Team</span>
                        <span className="text-sm font-medium text-gray-800">{t.teamName}</span>
                      </div>
                      <div className="w-px h-8 bg-gray-200 mx-1" />
                      <div className="flex flex-col text-left">
                        <span className="text-[11px] text-gray-500">Supervisor</span>
                        <span className="text-sm text-gray-800">{t.supervisor}</span>
                      </div>
                    </button>
                  ))}
                </div>
              )}
            </div>
          </div>

          <div className="flex items-start justify-end space-x-4">
            <RoleSwitcher />
            <AdminAvatarWidget />
          </div>
        </div>

        {/* Team members panel */}
        <div className="mt-4 grid grid-cols-1 xl:grid-cols-3 gap-6">
          <div className="xl:col-span-1 bg-white rounded-xl shadow p-4 border-t-8 border-blue-500">
            <div className="flex items-center justify-between mb-3">
              <h2 className="text-lg font-semibold text-gray-700">Team Members</h2>
              <div className="flex items-center gap-2">
                <label className="text-sm flex items-center gap-2">
                  <input
                    type="checkbox"
                    className="accent-blue-600"
                    checked={memberFilterOn}
                    onChange={(e) => setMemberFilterOn(e.target.checked)}
                  />
                  <span>Enable Member Filter</span>
                </label>
                <button
                  className="px-2 py-1 rounded border bg-gray-50 hover:bg-gray-100 text-sm"
                  onClick={() => selectedTeamId && fetchTeamMembers(selectedTeamId)}
                >
                  Refresh
                </button>
              </div>
            </div>

            {!selectedTeamId ? (
              <div className="text-sm text-gray-500">Select a team above to load members.</div>
            ) : teamMembersLoading ? (
              <div className="text-sm text-gray-500">Loading members…</div>
            ) : teamMembersError ? (
              <div className="text-sm text-red-600">{teamMembersError}</div>
            ) : teamMembers.length === 0 ? (
              <div className="text-sm text-gray-500">No members.</div>
            ) : (
              <>
                <input
                  className="w-full px-3 py-2 bg-gray-50 border rounded mb-3 text-sm"
                  placeholder="Search name/email/role"
                  value={memberSearch}
                  onChange={(e) => setMemberSearch(e.target.value)}
                />
                <div className="flex flex-wrap gap-2 max-h-56 overflow-auto pr-1">
                  {visibleMembers.map((m) => {
                    const sel = selectedMemberEmails.includes(m.email);
                    return (
                      <button
                        key={m.email}
                        onClick={() => toggleMemberEmail(m.email)}
                        className={`px-3 py-1 rounded-full border text-sm transition ${
                          sel ? "bg-blue-600 text-white border-blue-600" : "bg-white"
                        }`}
                        title={m.email}
                      >
                        {m.name} · {m.role || "member"}
                      </button>
                    );
                  })}
                </div>

                {memberFilterOn && selectedMemberEmails.length > 0 && (
                  <div className="mt-3 text-xs text-blue-700 bg-blue-50 border border-blue-200 rounded p-2">
                    Member filter active for {selectedMemberEmails.length} member
                    {selectedMemberEmails.length > 1 ? "s" : ""}. Charts & tables below are filtered client-side.
                  </div>
                )}
              </>
            )}
          </div>

          {/* KPI */}
          <div className="xl:col-span-2">
            {overview && (
              <div className="grid grid-cols-2 md:grid-cols-2 xl:grid-cols-4 gap-4 mb-6">
                <div className="bg-white rounded-xl shadow p-4 border-t-8 border-blue-500">
                  <div className="text-xs text-gray-500">Total Contents</div>
                  <div className="text-2xl font-bold">{overview.kpi.totalContents}</div>
                </div>
                <div className="bg-white rounded-xl shadow p-4 border-t-8 border-indigo-500">
                  <div className="text-xs text-gray-500">New Enrollments</div>
                  <div className="text-2xl font-bold">{overview.kpi.newEnrollments}</div>
                </div>
                <div className="bg-white rounded-xl shadow p-4 border-t-8 border-fuchsia-500">
                  <div className="text-xs text-gray-500">Completion Rate</div>
                  <div className="text-2xl font-bold">
                    {Math.round((overview.kpi.completionRate || 0) * 100)}%
                  </div>
                </div>
                <div className="bg-white rounded-xl shadow p-4 border-t-8 border-rose-500">
                  <div className="text-xs text-gray-500">Avg Score</div>
                  <div className="text-2xl font-bold">
                    {overview.kpi.avgScore == null ? "-" : Math.round(overview.kpi.avgScore)}
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Error */}
        {error && (
          <div className="mb-4 rounded-xl border border-red-200 bg-red-50 p-3 text-red-700">
            {String(error)}
          </div>
        )}

        {/* Summary */}
        <h2 className="text-xl font-semibold text-gray-700 mb-2 ml-2">Summary</h2>

        <div className="flex flex-col xl:flex-row gap-6">
          {/* Left column */}
          <div className="flex-1 space-y-6">
            {/* Daily Activity */}
            <div className="bg-white rounded-xl shadow p-4 border-t-8 border-blue-500">
              <div className="flex items-center justify-between mb-2">
                <h2 className="text-lg font-semibold text-gray-700">
                  Daily Activity {memberFilterOn && selectedMemberEmails.length > 0 ? "(Filtered)" : ""}
                </h2>
                <div className="text-xs text-gray-500">Range {start} → {end}</div>
              </div>
              <div className="mb-3 flex items-center gap-3">
                <div className="text-xs text-gray-500">Date Range</div>
                <input
                  type="date"
                  className="px-2 py-1 bg-gray-50 border rounded text-sm"
                  value={start}
                  onChange={(e) => setStart(e.target.value)}
                />
                <span className="text-xs text-gray-400">→</span>
                <input
                  type="date"
                  className="px-2 py-1 bg-gray-50 border rounded text-sm"
                  value={end}
                  onChange={(e) => setEnd(e.target.value)}
                />
                <div className="flex-1" />
                <input
                  type="text"
                  placeholder="Filter course title"
                  className="px-3 py-1 bg-gray-50 border rounded text-sm"
                  value={filterText.course}
                  onChange={(e) => setFilterText({ course: e.target.value })}
                />
                <button
                  onClick={fetchAll}
                  className="px-3 py-1 text-sm bg-blue-600 text-white rounded hover:bg-blue-700"
                >
                  Apply
                </button>
              </div>

              <ResponsiveContainer width="100%" height={280}>
                <BarChart data={dailyActivity}>
                  <XAxis dataKey="date" />
                  <YAxis allowDecimals={false} />
                  <Tooltip />
                  <Legend />
                  <Bar dataKey="enroll" name="Enroll" fill="#0575E6" radius={[4, 4, 0, 0]} />
                  <Bar dataKey="complete" name="Complete" fill="#22C55E" radius={[4, 4, 0, 0]} />
                </BarChart>
              </ResponsiveContainer>
            </div>

            {/* Learners by Content */}
            <div className="bg-white rounded-xl shadow p-4 border-t-8 border-blue-500">
              <h2 className="text-lg font-semibold text-gray-700 mb-4">Learners by Content</h2>
              {/* Pie will still reflect server counts; for strict member filtering you could rebuild from learners[] */}
              {filteredContentPerf.length === 0 ? (
                <div className="text-sm text-gray-500">No data.</div>
              ) : (
                <>
                  {/** Prepare pie data from filtered rows */}
                  <ResponsiveContainer width="100%" height={280}>
                    <PieChart>
                      <Pie
                        data={filteredContentPerf.map((it: any) => ({
                          name: it.title,
                          value: it.learners ?? it.learnersCount ?? 0,
                        }))}
                        dataKey="value"
                        nameKey="name"
                        cx="50%"
                        cy="50%"
                        innerRadius={60}
                        outerRadius={90}
                        label
                        isAnimationActive
                      >
                        {filteredContentPerf.map((_, i) => (
                          <Cell key={i} fill={COLORS[i % COLORS.length]} />
                        ))}
                      </Pie>
                      <Tooltip />
                    </PieChart>
                  </ResponsiveContainer>
                </>
              )}
            </div>

            {/* Content Performance (table) */}
            <div className="bg-white rounded-xl shadow p-4 border-t-8 border-blue-500">
              <div className="flex items-center justify-between mb-3">
                <h2 className="text-lg font-semibold text-gray-700">
                  Content Performance {memberFilterOn && selectedMemberEmails.length > 0 ? "(Filtered)" : ""}
                </h2>
                <button
                  className="px-2 py-1 rounded border bg-gray-50 hover:bg-gray-100 text-sm"
                  onClick={() => fetchAll()}
                >
                  Refresh
                </button>
              </div>

              <div className="overflow-x-auto">
                <table className="min-w-full text-sm">
                  <thead>
                    <tr className="text-left text-gray-600 border-b">
                      <th className="py-2 pr-3">Title</th>
                      <th className="py-2 px-3">Learners</th>
                      <th className="py-2 px-3">Completion Rate</th>
                      <th className="py-2 px-3">Avg Score</th>
                      <th className="py-2 pl-3">Learners (detail)</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredContentPerf.length === 0 ? (
                      <tr>
                        <td colSpan={5} className="text-center py-6 text-gray-500">
                          No content in this range / filter.
                        </td>
                      </tr>
                    ) : (
                      filteredContentPerf.map((it: any) => (
                        <tr key={it.contentId} className="border-b align-top">
                          <td className="py-2 pr-3 font-medium text-gray-800">{it.title}</td>
                          <td className="py-2 px-3">{it.learners ?? it.learnersCount ?? 0}</td>
                          <td className="py-2 px-3">
                            {Math.round(((it as any).completionRate || 0) * 100)}%
                          </td>
                          <td className="py-2 px-3">
                            {(it as any).avgScore == null ? "-" : Math.round((it as any).avgScore)}
                          </td>
                          <td className="py-2 pl-3">
                            {(it as any).learners && (it as any).learners.length > 0 ? (
                              <div className="flex flex-wrap gap-2">
                                {(it as any).learners.slice(0, 6).map((lr: any, idx: number) => (
                                  <div
                                    key={idx}
                                    className="px-2 py-1 rounded bg-gray-50 border text-[12px]"
                                    title={`${lr.email} • ${lr.percent ?? 0}% • score: ${lr.score ?? "-"}`}
                                  >
                                    {lr.name || lr.email}
                                  </div>
                                ))}
                                {(it as any).learners.length > 6 && (
                                  <span className="text-xs text-gray-500">
                                    +{(it as any).learners.length - 6} more
                                  </span>
                                )}
                              </div>
                            ) : (
                              <span className="text-gray-400">—</span>
                            )}
                          </td>
                        </tr>
                      ))
                    )}
                  </tbody>
                </table>
              </div>
            </div>
          </div>

          {/* Right column */}
          <div className="flex flex-col xl:flex-row justify-end gap-6 mb-6">
            <div className="space-y-6">
              <AdminCalendar />
              <ScoreboardChart token={token || ""} />
            </div>
          </div>
        </div>

        {loading && (
          <div className="fixed inset-0 flex items-center justify-center bg-black/20">
            <div className="animate-spin rounded-full h-10 w-10 border-t-4 border-blue-500" />
          </div>
        )}
      </main>

      {/* 🔔 Toast stack */}
      <ToastStack
        toasts={toasts}
        onClose={closeToast}
        onItemClick={handleToastClick}
        onMarkAllRead={markAllRead}
      />
    </div>
  );
};

export default AdminDashboard;
