/* eslint-disable @typescript-eslint/no-explicit-any */
import { useState, useContext, useEffect, useMemo, useRef } from "react";
import { useNavigate } from "react-router-dom";
import { AuthContext } from "../../../Authentication/AuthContext";
import AdminSidebarWidget from "../Widgets/AdminSideBar";
import AdminCalendar from "../Widgets/AdminCalendar";
import AdminAvatarWidget from "../Widgets/AdminAvatarWidget";
import ScoreboardChart from "../../../components/ScoreboardChart";

import { FaFilter } from "react-icons/fa";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
  Legend,
} from "recharts";
import axios from "axios";
import RoleSwitcher from "../../../components/RoleSwitcher";
import { EventSourcePolyfill } from "event-source-polyfill";
import { useUserProfile } from "../../User/Lesson/hooks/useUserProfile";
import {
  COLORS,
  type ContentPerfItem,
  type ContentPerformanceResponse,
  type OverviewResponse,
} from "../../../types/trainer/types";
import { ENDPOINTS } from "../../../config/endpoints";

// ---------------------------------------------------------------------------
// Utilities
// ---------------------------------------------------------------------------
function toDateInput(d: Date) {
  return d.toISOString().slice(0, 10);
}
const isDocVisible = () =>
  typeof document !== "undefined" ? document.visibilityState === "visible" : true;

// helpers for localStorage (per trainer)
const dismissedKey = (email: string) => `QA_DISMISSED_${email}`;
const lastSeenKey = (email: string) => `QA_LAST_SEEN_${email}`;
function loadDismissed(email: string): Set<string> {
  try {
    const raw = localStorage.getItem(dismissedKey(email));
    if (!raw) return new Set();
    const arr = JSON.parse(raw) as string[];
    return new Set(arr);
  } catch {
    return new Set();
  }
}
function saveDismissed(email: string, set: Set<string>) {
  try {
    localStorage.setItem(dismissedKey(email), JSON.stringify([...set]));
  } catch {}
}
function loadLastSeen(email: string): string {
  try {
    return localStorage.getItem(lastSeenKey(email)) || "";
  } catch {
    return "";
  }
}
function saveLastSeen(email: string, iso: string) {
  try {
    localStorage.setItem(lastSeenKey(email), iso);
  } catch {}
}

// ---------------------------------------------------------------------------
// Toast (popup) มุมขวาล่าง
// ---------------------------------------------------------------------------
type QuestionAlert = {
  id: string;
  userEmail: string;
  lessonId?: string | number;
  lessonTitle?: string;
  question: string;
  createdAt?: string;
};
type ToastItem = QuestionAlert & { _ts: number };

function ToastCard({
  toast,
  onClose,
  onClick,
}: {
  toast: ToastItem;
  onClose: (id: string) => void;
  onClick?: (toast: ToastItem) => void;
}) {
  const [hover, setHover] = useState(false);

  useEffect(() => {
    if (hover) return;
    const t = setTimeout(() => onClose(toast.id), 8000);
    return () => clearTimeout(t);
  }, [hover, toast.id, onClose]);

  return (
    <div
      className="w-80 max-w-[88vw] bg-white shadow-xl rounded-xl border p-3 cursor-pointer transition hover:shadow-2xl"
      onMouseEnter={() => setHover(true)}
      onMouseLeave={() => setHover(false)}
      onClick={() => onClick?.(toast)}
      role="alert"
      aria-live="polite"
    >
      <div className="flex items-start gap-3">
        <div className="flex h-8 w-8 items-center justify-center rounded-full bg-blue-100 text-blue-600 text-sm">
          Q
        </div>
        <div className="flex-1">
          <div className="text-xs text-gray-500 mb-0.5">
            {toast.lessonTitle ? toast.lessonTitle : "New Question"} • {toast.userEmail}
          </div>
          <div className="text-sm text-gray-800 line-clamp-3 whitespace-pre-wrap">
            {toast.question}
          </div>
          {toast.createdAt && (
            <div className="text-[10px] text-gray-400 mt-1">
              {new Date(toast.createdAt).toLocaleString()}
            </div>
          )}
        </div>
        <button
          aria-label="Close notification"
          className="text-gray-400 hover:text-gray-600 ml-1"
          onClick={(e) => {
            e.stopPropagation();
            onClose(toast.id);
          }}
        >
          ✕
        </button>
      </div>
    </div>
  );
}

function ToastStack({
  toasts,
  onClose,
  onItemClick,
  onMarkAllRead,
}: {
  toasts: ToastItem[];
  onClose: (id: string) => void;
  onItemClick?: (toast: ToastItem) => void;
  onMarkAllRead?: () => void;
}) {
  if (toasts.length === 0) return null;
  return (
    <div className="fixed bottom-4 right-4 z-[60] flex flex-col gap-3">
      <div className="flex justify-end">
        <button
          className="text-xs px-2 py-1 rounded-full bg-gray-100 border hover:bg-gray-200"
          onClick={onMarkAllRead}
        >
          Mark all as read
        </button>
      </div>
      {toasts.map((t) => (
        <ToastCard key={t.id} toast={t} onClose={onClose} onClick={onItemClick} />
      ))}
    </div>
  );
}

// ---------------------------------------------------------------------------
// Hook: รับ “คำถามใหม่สำหรับเทรนเนอร์” (SSE → fallback polling)
// ---------------------------------------------------------------------------
function useTrainerQuestionAlerts(token: string | null, trainerEmail: string | null) {
  const [toasts, setToasts] = useState<ToastItem[]>([]);
  const dismissedRef = useRef<Set<string>>(new Set());
  const seenIds = useRef<Set<string>>(new Set());
  const lastSeenAt = useRef<string>(""); // ISO string
  const sseRef = useRef<EventSourcePolyfill | null>(null);
  const pollTimer = useRef<number | null>(null);

  const SSE_URL = "/api/user-question-answer/stream";
  const POLL_URL = "/api/user-question-answer/pending";

  useEffect(() => {
    if (!trainerEmail) return;
    dismissedRef.current = loadDismissed(trainerEmail);
    lastSeenAt.current = loadLastSeen(trainerEmail);
  }, [trainerEmail]);

  const persistLastSeen = (iso: string | undefined) => {
    if (!trainerEmail || !iso) return;
    lastSeenAt.current = iso;
    saveLastSeen(trainerEmail, iso);
  };

  const pushToasts = (items: QuestionAlert[]) => {
    if (!items?.length) return;
    const newOnes: ToastItem[] = [];
    for (const it of items) {
      if (!it?.id) continue;
      if (trainerEmail && dismissedRef.current.has(it.id)) continue;
      if (seenIds.current.has(it.id)) continue;

      seenIds.current.add(it.id);
      newOnes.push({ ...it, _ts: Date.now() });

      if (it.createdAt && it.createdAt > (lastSeenAt.current || "")) {
        persistLastSeen(it.createdAt);
      }
    }
    if (newOnes.length) setToasts((prev) => [...prev, ...newOnes].slice(-6));
  };

  useEffect(() => {
    if (!token || !trainerEmail) return;

    sseRef.current?.close();
    sseRef.current = null;

    const params = new URLSearchParams();
    params.set("trainer", trainerEmail.trim().toLowerCase());
    if (lastSeenAt.current) params.set("since", lastSeenAt.current);

    const url = `${SSE_URL}?${params.toString()}`;
    const es = new EventSourcePolyfill(url, {
      headers: { Authorization: `Bearer ${token}` },
      withCredentials: false,
    });

    const onQuestion = (ev: MessageEvent) => {
      try {
        const raw = typeof ev.data === "string" ? ev.data : String(ev.data);
        const payload = JSON.parse(raw) as QuestionAlert | QuestionAlert[];
        const arr = Array.isArray(payload) ? payload : [payload];
        const sortedDates = arr.map((a) => a.createdAt).filter(Boolean).sort();
        const latest =
          sortedDates.length > 0 ? (sortedDates[sortedDates.length - 1] as string) : undefined;
        if (latest) persistLastSeen(latest);
        pushToasts(arr);
      } catch {}
    };

    (es as any).addEventListener("question", onQuestion as any);
    es.onerror = () => {
      es.close();
      sseRef.current = null;
    };
    sseRef.current = es;

    return () => {
      try {
        (es as any).removeEventListener("question", onQuestion as any);
      } finally {
        es.close();
        sseRef.current = null;
      }
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [token, trainerEmail]);

  useEffect(() => {
    if (!token || !trainerEmail) return;

    const tick = async () => {
      if (!isDocVisible()) {
        schedule();
        return;
      }
      try {
        const res = await axios.get<QuestionAlert[]>(POLL_URL, {
          params: {
            trainer: trainerEmail.trim().toLowerCase(),
            since: lastSeenAt.current || undefined,
            limit: 20,
          },
          headers: token ? { Authorization: `Bearer ${token}` } : undefined,
        });
        pushToasts(Array.isArray(res.data) ? res.data : []);
      } catch {
      } finally {
        schedule();
      }
    };

    const schedule = () => {
      if (pollTimer.current) window.clearTimeout(pollTimer.current);
      pollTimer.current = window.setTimeout(tick, 15000) as unknown as number;
    };

    pollTimer.current = window.setTimeout(tick, 3000) as unknown as number;

    const onVisibility = () => {
      if (isDocVisible()) {
        if (pollTimer.current) window.clearTimeout(pollTimer.current);
        pollTimer.current = window.setTimeout(tick, 1000) as unknown as number;
      }
    };
    document.addEventListener("visibilitychange", onVisibility);

    return () => {
      if (pollTimer.current) window.clearTimeout(pollTimer.current);
      pollTimer.current = null;
      document.removeEventListener("visibilitychange", onVisibility);
    };
  }, [token, trainerEmail]);

  const closeToast = (id: string) => {
    setToasts((prev) => prev.filter((t) => t.id !== id));
    if (trainerEmail) {
      dismissedRef.current.add(id);
      saveDismissed(trainerEmail, dismissedRef.current);
    }
  };
  const markAllRead = () => {
    setToasts((prev) => {
      if (trainerEmail) {
        for (const t of prev) dismissedRef.current.add(t.id);
        saveDismissed(trainerEmail, dismissedRef.current);
      }
      return [];
    });
  };

  return { toasts, closeToast, markAllRead };
}

// ---------------------------------------------------------------------------
// NEW: minimal profile type for /api/profile + Assignment types
// ---------------------------------------------------------------------------
type MyProfile = {
  id: string;
  name?: string;
  email: string;
  avatarUrl?: string;
};

type AssignmentTeam = {
  supervisor: string;
  teamName: string;
  teamId: string;
};
type AssignmentResponse = {
  trainerId: string;
  teams: AssignmentTeam[];
  message?: string;
};

// ---------------------------------------------------------------------------
// Main
// ---------------------------------------------------------------------------
const AdminDashboard = () => {
  const { token: ctxToken } = useContext(AuthContext);
  const token =
    ctxToken || localStorage.getItem("token") || sessionStorage.getItem("token");
  const navigate = useNavigate();

  // block unauthenticated
  useEffect(() => {
    if (!token) navigate("/");
  }, [token, navigate]);

  const { fullName, email: trainerEmail } = useUserProfile(token || null);
  const displayName = fullName || "Administrator";

  // ---------- popup คำถามใหม่ ----------
  const { toasts, closeToast, markAllRead } = useTrainerQuestionAlerts(
    token || null,
    trainerEmail || null
  );

  // ---------------- Trainer Assignment Info (multi-team) ----------------
  const [myProfile, setMyProfile] = useState<MyProfile | null>(null);
  const [assignment, setAssignment] = useState<AssignmentResponse | null>(null);

  useEffect(() => {
    const loadProfileAndAssignment = async () => {
      if (!token) return;
      try {
        const prof = await axios.get<MyProfile>("/api/profile", {
          headers: { Authorization: `Bearer ${token}` },
        });
        setMyProfile(prof.data);

        if (prof.data?.id) {
          const res = await axios.get<AssignmentResponse>(
            `/api/trainer-information/assignment/${prof.data.id}`,
            { headers: { Authorization: `Bearer ${token}` } }
          );
          const payload = res.data || { trainerId: prof.data.id, teams: [] };
          payload.teams = Array.isArray(payload.teams) ? payload.teams : [];
          setAssignment(payload);
        } else {
          setAssignment({ trainerId: "", teams: [] });
        }
      } catch {
        setAssignment({ trainerId: "", teams: [] });
      }
    };
    loadProfileAndAssignment();
  }, [token]);

  // ---------------- View scope (Individual / Team) ----------------
  const hasTeams = (assignment?.teams?.length || 0) > 0;
  const [view, setView] = useState<"individual" | "team">("individual");
  const [teamId, setTeamId] = useState<string>("");

  // sync default team when assignment loads
  useEffect(() => {
    if (hasTeams && !teamId) {
      setTeamId(assignment!.teams[0].teamId);
    }
  }, [hasTeams, assignment, teamId]);

  // ---------------- Filters ----------------
  const [showFilter, setShowFilter] = useState(false);
  const [filterText, setFilterText] = useState({ course: "" });
  const today = useMemo(() => new Date(), []);
  const weekAgo = useMemo(
    () => new Date(Date.now() - 6 * 24 * 3600 * 1000),
    []
  );
  const [start, setStart] = useState(toDateInput(weekAgo));
  const [end, setEnd] = useState(toDateInput(today));

  // ---------------- Data ----------------
  const [loading, setLoading] = useState(false);
  const [overview, setOverview] = useState<OverviewResponse | null>(null);
  const [contentPerf, setContentPerf] = useState<ContentPerfItem[]>([]);
  const [error, setError] = useState<string | null>(null);

  // pagination for content-performance
  const [limit, setLimit] = useState(10);
  const [offset, setOffset] = useState(0);
  const [total, setTotal] = useState(0);

  const page = Math.floor(offset / limit) + 1;
  const totalPages = Math.max(1, Math.ceil(total / Math.max(1, limit)));

  const fetchAll = async () => {
    if (!token) return;
    if (view === "team" && !teamId) return; // guard
    setLoading(true);
    setError(null);
    const auth = { headers: { Authorization: `Bearer ${token}` } };

    const commonParams: Record<string, any> = {
      start,
      end,
      view,
      ...(view === "team" ? { teamId } : {}),
    };

    try {
      const [ovRes, cpRes] = await Promise.all([
        axios.get<OverviewResponse>(ENDPOINTS.TrainerOverview, {
          params: commonParams,
          ...auth,
        }),
        axios.get<ContentPerformanceResponse>(ENDPOINTS.TrainerPerformance, {
          params: {
            ...commonParams,
            order: "learners:desc",
            limit,
            offset,
            title: filterText.course || undefined,
          },
          ...auth,
        }),
      ]);
      setOverview(ovRes.data);
      setContentPerf(cpRes.data.items || []);
      setTotal((cpRes.data.total as unknown as number) ?? 0);
    } catch (e: any) {
      console.error("Failed to load trainer analytics:", e);
      setError(e?.response?.data?.error || e?.message || "Failed to load analytics");
      setContentPerf([]);
      setTotal(0);
    } finally {
      setLoading(false);
    }
  };

  // (re)load when scope/range/pagination changes
  useEffect(() => {
    fetchAll();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [view, teamId, start, end, limit, offset]);

  // ---------- Derived (Chart) Data ----------
  const dailyActivity = useMemo(() => {
    if (!overview?.trend?.length) return [];
    return overview.trend.map((t) => ({
      date: (t as any).date,
      enroll: (t as any).enrollCount ?? (t as any).enroll ?? 0,
      complete: (t as any).completeCount ?? (t as any).complete ?? 0,
    }));
  }, [overview]);

  const pieData = useMemo(() => {
    const rows = contentPerf
      .filter((it) =>
        filterText.course
          ? it.title.toLowerCase().includes(filterText.course.toLowerCase())
          : true
      )
      .map((it) => ({
        name: it.title,
        value: it.learners,
      }));
    const totalV = rows.reduce((acc, r) => acc + r.value, 0);
    return totalV > 0 ? rows : [];
  }, [contentPerf, filterText.course]);

  const handleClear = () => {
    setFilterText({ course: "" });
    setOffset(0);
  };

  const handleToastClick = (t: ToastItem) => {
    closeToast(t.id);
    navigate("/administrator/administrator/task-management", {
      state: {
        focusUserEmail: t.userEmail,
        focusLessonId: t.lessonId,
      },
    });
  };

  // pagination actions
  const goPrev = () => setOffset((o) => Math.max(0, o - limit));
  const goNext = () => setOffset((o) => (o + limit < total ? o + limit : o));
  const changeLimit = (n: number) => {
    setLimit(n);
    setOffset(0);
  };

  return (
    <div className="min-h-screen bg-gray-50 flex">
      {/* sidebar */}
      <AdminSidebarWidget />

      {/* main */}
      <main className="flex-1 p-6 flex flex-col">
        {/* header + controls */}
        <div className="flex justify-between items-start">
          <div>
            <h1 className="text-3xl font-bold text-gray-800 mb-1">
              👋 Welcome, {displayName}
            </h1>
            <p className="text-gray-600 mb-2 ml-10">Have a good day!</p>

            {/* Assignment Box */}
            <div className="bg-white rounded-xl border shadow-sm px-4 py-3 inline-block">
              <div className="flex items-center gap-3">
                <div className="text-sm font-semibold text-gray-700">Assignment</div>
                <div className="text-xs text-gray-500">Trainer ID: {myProfile?.id || "-"}</div>
              </div>
              {!assignment ? (
                <div className="text-sm text-gray-500 mt-2">Loading assignment...</div>
              ) : (assignment.teams?.length || 0) === 0 ? (
                <div className="text-sm text-gray-500 mt-2">
                  {assignment.message || "Not Assigned"}
                </div>
              ) : (
                <div className="mt-3 flex flex-wrap gap-3">
                  {assignment.teams.map((t) => (
                    <div
                      key={t.teamId}
                      className="flex items-center gap-3 px-3 py-2 bg-gray-50 border rounded-lg"
                      title={`Team ID: ${t.teamId}`}
                    >
                      <div className="flex flex-col">
                        <span className="text-[11px] text-gray-500">Team</span>
                        <span className="text-sm font-medium text-gray-800">{t.teamName}</span>
                      </div>
                      <div className="w-px h-8 bg-gray-200 mx-1" />
                      <div className="flex flex-col">
                        <span className="text-[11px] text-gray-500">Supervisor</span>
                        <span className="text-sm text-gray-800">{t.supervisor}</span>
                      </div>
                      <div className="w-px h-8 bg-gray-200 mx-1" />
                      <div className="flex flex-col">
                        <span className="text-[11px] text-gray-500">Team ID</span>
                        <span className="text-[12px] font-mono text-gray-700">{t.teamId}</span>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          <div className="flex items-start justify-end space-x-4">
            {/* Scope Controls */}
            <div className="bg-white border rounded-xl shadow-sm px-4 py-3">
              <div className="text-xs text-gray-500 mb-1">Scope</div>
              <div className="flex gap-2">
                <select
                  className="px-3 py-2 bg-gray-50 border rounded-md text-sm"
                  value={view}
                  onChange={(e) => {
                    const v = e.target.value as "individual" | "team";
                    setView(v);
                    setOffset(0);
                  }}
                >
                  <option value="individual">Individual</option>
                  <option value="team" disabled={!hasTeams}>
                    Team
                  </option>
                </select>

                <select
                  className="px-3 py-2 bg-gray-50 border rounded-md text-sm"
                  disabled={view !== "team" || !hasTeams}
                  value={teamId}
                  onChange={(e) => {
                    setTeamId(e.target.value);
                    setOffset(0);
                  }}
                >
                  {hasTeams ? (
                    assignment!.teams.map((t) => (
                      <option key={t.teamId} value={t.teamId}>
                        {t.teamName}
                      </option>
                    ))
                  ) : (
                    <option value="">No team</option>
                  )}
                </select>
              </div>
            </div>

            <RoleSwitcher />

            {/* Filter popover */}
            <div className="relative flex items-center">
              <button
                className="flex items-center gap-2 px-4 py-2 bg-white border shadow rounded-full hover:bg-gray-100"
                onClick={() => setShowFilter(!showFilter)}
              >
                <FaFilter /> Filter
              </button>

              {showFilter && (
                <div className="absolute right-0 top-12 w-80 bg-white border shadow-lg rounded-xl z-10 p-4 space-y-3">
                  <p className="font-semibold text-gray-700">Filter & Range</p>

                  <div className="grid grid-cols-2 gap-2">
                    <div>
                      <div className="text-xs text-gray-500 mb-1">Start</div>
                      <input
                        type="date"
                        className="w-full px-3 py-2 bg-gray-100 rounded text-sm"
                        value={start}
                        onChange={(e) => {
                          setStart(e.target.value);
                          setOffset(0);
                        }}
                      />
                    </div>
                    <div>
                      <div className="text-xs text-gray-500 mb-1">End</div>
                      <input
                        type="date"
                        className="w-full px-3 py-2 bg-gray-100 rounded text-sm"
                        value={end}
                        onChange={(e) => {
                          setEnd(e.target.value);
                          setOffset(0);
                        }}
                      />
                    </div>
                  </div>

                  <input
                    type="text"
                    placeholder="Filter course title"
                    className="w-full px-4 py-2 bg-gray-100 rounded-full text-sm"
                    value={filterText.course}
                    onChange={(e) => {
                      setFilterText({ course: e.target.value });
                      setOffset(0);
                    }}
                  />

                  <div className="flex justify-between pt-1">
                    <button onClick={handleClear} className="text-sm text-red-500 hover:underline">
                      Clear
                    </button>
                    <button
                      onClick={fetchAll}
                      className="px-3 py-1 text-sm bg-blue-600 text-white rounded-full hover:bg-blue-700"
                    >
                      Apply
                    </button>
                  </div>
                </div>
              )}
            </div>

            <AdminAvatarWidget />
          </div>
        </div>

        {/* KPI */}
        {overview && (
          <div className="grid grid-cols-2 md:grid-cols-2 xl:grid-cols-5 gap-4 mb-6">
            <div className="bg-white rounded-xl shadow p-4 border-t-8 border-blue-500">
              <div className="text-xs text-gray-500">Scope</div>
              <div className="text-sm font-semibold">
                {view === "team"
                  ? `Team • ${(assignment?.teams.find((t) => t.teamId === teamId)?.teamName) || "-"}`
                  : "Individual"}
              </div>
            </div>
            <div className="bg-white rounded-xl shadow p-4 border-t-8 border-blue-500">
              <div className="text-xs text-gray-500">Total Contents</div>
              <div className="text-2xl font-bold">{overview.kpi.totalContents}</div>
            </div>
            <div className="bg-white rounded-xl shadow p-4 border-t-8 border-indigo-500">
              <div className="text-xs text-gray-500">Active Learners</div>
              <div className="text-2xl font-bold">{(overview as any)?.kpi?.activeLearners ?? "-"}</div>
            </div>
            <div className="bg-white rounded-xl shadow p-4 border-t-8 border-indigo-500">
              <div className="text-xs text-gray-500">New Enrollments</div>
              <div className="text-2xl font-bold">{overview.kpi.newEnrollments}</div>
            </div>
            <div className="bg-white rounded-xl shadow p-4 border-t-8 border-fuchsia-500">
              <div className="text-xs text-gray-500">Completion Rate</div>
              <div className="text-2xl font-bold">
                {Math.round((overview.kpi.completionRate || 0) * 100)}%
              </div>
            </div>
            <div className="bg-white rounded-xl shadow p-4 border-t-8 border-rose-500">
              <div className="text-xs text-gray-500">Avg Score</div>
              <div className="text-2xl font-bold">
                {overview.kpi.avgScore == null ? "-" : Math.round(overview.kpi.avgScore)}
              </div>
            </div>
          </div>
        )}

        {/* Error */}
        {error && (
          <div className="mb-4 rounded-xl border border-red-200 bg-red-50 p-3 text-red-700">
            {String(error)}
          </div>
        )}

        {/* summary section */}
        <h2 className="text-xl font-semibold text-gray-700 mb-2 ml-2">Summary</h2>

        <div className="flex flex-col xl:flex-row gap-6">
          {/* Left column */}
          <div className="flex-1 space-y-6">
            {/* Bar chart: Daily Activity */}
            <div className="bg-white rounded-xl shadow p-4 border-t-8 border-blue-500">
              <div className="flex items-center justify-between mb-2">
                <h2 className="text-lg font-semibold text-gray-700">
                  Daily Activity (Enroll / Complete)
                </h2>
                <div className="text-xs text-gray-500">
                  Range {start} → {end}
                </div>
              </div>

              <ResponsiveContainer width="100%" height={280}>
                <BarChart data={dailyActivity}>
                  <XAxis dataKey="date" />
                  <YAxis allowDecimals={false} />
                  <Tooltip />
                  <Legend />
                  <Bar dataKey="enroll" name="Enroll" fill="#0575E6" radius={[4, 4, 0, 0]} />
                  <Bar dataKey="complete" name="Complete" fill="#22C55E" radius={[4, 4, 0, 0]} />
                </BarChart>
              </ResponsiveContainer>
            </div>

            {/* Donut charts by Course */}
            <div className="bg-white rounded-xl shadow p-4 border-t-8 border-blue-500">
              <h2 className="text-lg font-semibold text-gray-700 mb-4">Learners by Content</h2>

              {pieData.length === 0 ? (
                <div className="text-sm text-gray-500">No data in range.</div>
              ) : (
                <div className="flex flex-wrap justify-center gap-6">
                  <div className="flex flex-col items-center w-[320px] max-w-full">
                    <h3 className="text-sm font-semibold mb-2 text-center">
                      {filterText.course ? `Filtered: ${filterText.course}` : "All Contents"}
                    </h3>
                    <ResponsiveContainer width="100%" height={240}>
                      <PieChart>
                        <Pie
                          data={pieData}
                          dataKey="value"
                          nameKey="name"
                          cx="50%"
                          cy="50%"
                          innerRadius={60}
                          outerRadius={90}
                          label
                          isAnimationActive
                        >
                          {pieData.map((_, i) => (
                            <Cell key={i} fill={COLORS[i % COLORS.length]} />
                          ))}
                        </Pie>
                        <Tooltip />
                      </PieChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              )}
            </div>

            {/* Content Performance (table-lite) */}
            <div className="bg-white rounded-xl shadow p-4 border-t-8 border-blue-500">
              <div className="flex items-center justify-between mb-3">
                <h2 className="text-lg font-semibold text-gray-700">Content Performance</h2>
                <div className="flex items-center gap-2 text-sm">
                  <span className="text-gray-500">Rows</span>
                  <select
                    className="px-2 py-1 bg-gray-50 border rounded"
                    value={limit}
                    onChange={(e) => changeLimit(Number(e.target.value))}
                  >
                    <option value={10}>10</option>
                    <option value={20}>20</option>
                    <option value={50}>50</option>
                    <option value={100}>100</option>
                  </select>
                  <div className="w-px h-5 bg-gray-200 mx-1" />
                  <button
                    className="px-2 py-1 rounded border bg-gray-50 hover:bg-gray-100"
                    onClick={() => setOffset(0)}
                    title="Refresh"
                  >
                    Refresh
                  </button>
                </div>
              </div>

              <div className="overflow-x-auto">
                <table className="min-w-full text-sm">
                  <thead>
                    <tr className="text-left text-gray-600 border-b">
                      <th className="py-2 pr-3">Title</th>
                      <th className="py-2 px-3">Learners</th>
                      <th className="py-2 px-3">Completion Rate</th>
                      <th className="py-2 px-3">Avg Score</th>
                      <th className="py-2 pl-3">Learners (detail)</th>
                    </tr>
                  </thead>
                  <tbody>
                    {contentPerf.length === 0 ? (
                      <tr>
                        <td colSpan={5} className="text-center py-6 text-gray-500">
                          No content in this range/scope.
                        </td>
                      </tr>
                    ) : (
                      contentPerf.map((it) => (
                        <tr key={it.contentId} className="border-b align-top">
                          <td className="py-2 pr-3 font-medium text-gray-800">{it.title}</td>
                          <td className="py-2 px-3">{it.learners}</td>
                          <td className="py-2 px-3">
                            {Math.round(((it as any).completionRate || 0) * 100)}%
                          </td>
                          <td className="py-2 px-3">
                            {(it as any).avgScore == null
                              ? "-"
                              : Math.round((it as any).avgScore)}
                          </td>
                          <td className="py-2 pl-3">
                            {(it as any).learners && (it as any).learners.length > 0 ? (
                              <div className="flex flex-wrap gap-2">
                                {(it as any).learners.slice(0, 6).map((lr: any, idx: number) => (
                                  <div
                                    key={idx}
                                    className="px-2 py-1 rounded bg-gray-50 border text-[12px]"
                                    title={`${lr.email} • ${lr.percent ?? 0}% • score: ${
                                      lr.score ?? "-"
                                    }`}
                                  >
                                    {lr.name || lr.email}
                                  </div>
                                ))}
                                {(it as any).learners.length > 6 && (
                                  <span className="text-xs text-gray-500">
                                    +{(it as any).learners.length - 6} more
                                  </span>
                                )}
                              </div>
                            ) : (
                              <span className="text-gray-400">—</span>
                            )}
                          </td>
                        </tr>
                      ))
                    )}
                  </tbody>
                </table>
              </div>

              {/* pagination */}
              <div className="flex items-center justify-between mt-3">
                <div className="text-xs text-gray-500">
                  Page {page} / {totalPages} • Total {total}
                </div>
                <div className="flex gap-2">
                  <button
                    className="px-3 py-1 border rounded disabled:opacity-50"
                    onClick={goPrev}
                    disabled={offset === 0}
                  >
                    Prev
                  </button>
                  <button
                    className="px-3 py-1 border rounded disabled:opacity-50"
                    onClick={goNext}
                    disabled={offset + limit >= total}
                  >
                    Next
                  </button>
                </div>
              </div>
            </div>
          </div>

          {/* Right column */}
          <div className="flex flex-col xl:flex-row justify-end gap-6 mb-6">
            <div className="space-y-6">
              <AdminCalendar />
              <ScoreboardChart token={token || ""} />
            </div>
          </div>
        </div>

        {loading && (
          <div className="fixed inset-0 flex items-center justify-center bg-black/20">
            <div className="animate-spin rounded-full h-10 w-10 border-t-4 border-blue-500" />
          </div>
        )}
      </main>

      {/* 🔔 Toast stack (มุมขวาล่าง) */}
      <ToastStack
        toasts={toasts}
        onClose={closeToast}
        onItemClick={handleToastClick}
        onMarkAllRead={markAllRead}
      />
    </div>
  );
};

export default AdminDashboard;
