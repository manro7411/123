package Forum;
import io.quarkus.security.identity.SecurityIdentity;
import jakarta.annotation.security.RolesAllowed;
import jakarta.inject.Inject;
import jakarta.persistence.EntityManager;
import jakarta.transaction.Transactional;
import jakarta.validation.Valid;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import model.User;

import org.jboss.resteasy.reactive.multipart.FileUpload;

import java.io.IOException;

import java.net.URI;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.util.*;

@Path("/posts")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class PostResource {

    @Inject
    SecurityIdentity identity;

    @Inject
    EntityManager em;

    @GET
    public List<PostEntity> getAllPosts() {
        List<PostEntity> posts = em.createQuery("SELECT p FROM PostEntity p ORDER BY p.createdAt DESC", PostEntity.class)
                .getResultList();

        String userEmail = identity.getPrincipal().getName();

        for (PostEntity post : posts) {
            String avatar = post.getAvatarUrl();
            if (avatar != null && !avatar.startsWith("http")) {
                String filename = Paths.get(avatar).getFileName().toString();
                post.setAvatarUrl("http://localhost:8080/posts/avatars/" + filename);
            }
            post.setLikedByUser(post.getLikedBy().contains(userEmail));
        }

        return posts;
    }

    @GET
    @Path("/{id}")
    public PostEntity getOne(@PathParam("id") String id) {
        PostEntity post = em.find(PostEntity.class, id);
        if (post == null) throw new NotFoundException("Post not found");
        String avatar = post.getAvatarUrl();
        if (avatar != null && !avatar.startsWith("http")) {
            String filename = Paths.get(avatar).getFileName().toString();
            post.setAvatarUrl("http://localhost:8080/posts/avatars/" + filename);
        }
        String userEmail = identity.getPrincipal().getName();
        post.setLikedByUser(post.getLikedBy().contains(userEmail));

        return post;
    }

    @POST
    @Path("/{id}/like")
    @Transactional
    public Response like(@PathParam("id") String id) {
        String userEmail = identity.getPrincipal().getName();
        PostEntity post = em.find(PostEntity.class, id);

        if (post == null) {
            return Response.status(Response.Status.NOT_FOUND).entity("Post not found").build();
        }

        if (!post.getLikedBy().contains(userEmail)) {
            post.addLike(userEmail);
            System.out.println("✅ User " + userEmail + " liked post " + id);
        } else {
            System.out.println("⚠️ User " + userEmail + " already liked post " + id);
        }

        return Response.ok().entity(Map.of("likes", post.getLikes(), "likedByUser", true)).build();
    }

    @POST
    @Path("/{id}/unlike")
    @Transactional
    public Response unlike(@PathParam("id") String id) {
        String userEmail = identity.getPrincipal().getName();
        PostEntity post = em.find(PostEntity.class, id);

        if (post == null) {
            return Response.status(Response.Status.NOT_FOUND).entity("Post not found").build();
        }

        if (post.getLikedBy().contains(userEmail)) {
            post.removeLike(userEmail);
            System.out.println("✅ User " + userEmail + " unliked post " + id);
        } else {
            System.out.println("⚠️ User " + userEmail + " has not liked post " + id);
        }

        return Response.ok().entity(Map.of("likes", post.getLikes(), "likedByUser", false)).build();

    }

    // ---------- Create (คง java.nio เดิม, เพิ่มแนบไฟล์) ----------
    @POST
    @Transactional
    @RolesAllowed("user")
    @Consumes(MediaType.MULTIPART_FORM_DATA)
    @Produces(MediaType.APPLICATION_JSON)
    public Response create(@Valid PostCreateRequest req) {
        String email = identity.getPrincipal().getName();
        String displayName = Optional.ofNullable(req.authorName).filter(s -> !s.isBlank()).orElse(email);

        User user = em.createQuery("SELECT u FROM User u WHERE u.email = :email", User.class)
                .setParameter("email", email)
                .getSingleResult();

        PostEntity post = new PostEntity();
        post.setAuthorName(displayName);
        post.setAuthorEmail(email);
        post.setTitle(req.title);
        post.setMessage(req.message);
        post.setForumCategory(req.forumCategory);

        if (user.getAvatar() != null) {
            post.setAvatarUrl(user.getAvatar());
        }
        post.persist();

        // ✅ บล็อกเดิม: เซฟรูปหน้าปก (ไม่เปลี่ยนบรรทัด java.nio ของคุณ)
        String filename = post.getId() + ".jpg";
        if (req.picture != null) {
            try {
                String originalName = req.pictureFileName != null ? req.pictureFileName : "picture.jpeg";
                java.nio.file.Path dir = java.nio.file.Paths.get("uploads/picture");
                java.nio.file.Files.createDirectories(dir);
                java.nio.file.Path picturePath = dir.resolve(filename);
                java.nio.file.Files.copy(req.picture, picturePath, StandardCopyOption.REPLACE_EXISTING);

                System.out.println("Picture path : " + picturePath.toString());
                System.out.println("Original file name: " + originalName);
                post.setPictureUrl("uploads/picture/" + filename);
            } catch (Exception e) {
                throw new InternalServerErrorException("Failed to save photo.");
            }
        }

        // ✅ ใหม่: เซฟไฟล์แนบหลายไฟล์ (ยังใช้ java.nio เช่นเดิม)
        if (req.attachments != null && !req.attachments.isEmpty()) {
            try {
                Path dir = Paths.get("uploads/posts", post.getId(), "attachments");
                Files.createDirectories(dir);

                for (FileUpload fu : req.attachments) {
                    if (fu == null) continue;

                    String safeOriginal = sanitizeFileName(fu.fileName());
                    String storedName = com.aventrix.jnanoid.jnanoid.NanoIdUtils.randomNanoId() + "-" + safeOriginal;

                    Path target = dir.resolve(storedName);
                    // ใช้ copy ให้คงสไตล์เดียวกับรูปหน้าปก
                    Files.copy(fu.uploadedFile().toPath(), target, StandardCopyOption.REPLACE_EXISTING);

                    String mime = (fu.contentType() != null) ? fu.contentType() : probeType(target);
                    long size = Files.size(target);

                    post.getAttachments().add(new AttachmentMeta(storedName, fu.fileName(), mime, size));
                }
            } catch (Exception e) {
                throw new InternalServerErrorException("Failed to save attachments.");
            }
        }

        return Response.created(URI.create("/posts/" + post.getId()))
                .entity(post)
                .build();
    }

    // ---------- เสิร์ฟไฟล์แนบ (ดู/ดาวน์โหลด) ----------
    @GET
    @Path("/{id}/attachments/{filename}")
    public Response getAttachment(
            @PathParam("id") String id,
            @PathParam("filename") String filename,
            @QueryParam("download") @DefaultValue("false") boolean download) {

        Path path = Paths.get("uploads/posts", id, "attachments", filename);
        if (!Files.exists(path)) {
            return Response.status(Response.Status.NOT_FOUND).entity("Attachment not found").build();
        }

        String contentType = probeType(path);
        Response.ResponseBuilder rb = Response.ok(path.toFile()).type(contentType);

        boolean inline = isInlinePreviewable(contentType) && !download;
        String disposition = (inline ? "inline" : "attachment") + "; filename=\"" + filename + "\"";
        rb.header("Content-Disposition", disposition);

        return rb.build();
    }

    @GET
    @Path("/picture/{filename}")
    @Produces({"image/jpeg", "image/png", "image/webp"})
    public Response getPicture(@PathParam("filename") String filename) {
        java.nio.file.Path picturePath = java.nio.file.Paths.get("uploads/picture/" + filename);
        if (!picturePath.toFile().exists()) {
            return Response.status(Response.Status.NOT_FOUND).entity("Picture not found").build();
        }
        try {
            return Response.ok().entity(picturePath.toFile()).build();
        }catch(Exception e){
            return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
        }
    }

    // (เสริม) เสิร์ฟ avatar ตาม URL ที่ getAllPosts สร้าง
    @GET
    @Path("/avatars/{filename}")
    @Produces({"image/jpeg", "image/png", "image/webp"})
    public Response getAvatar(@PathParam("filename") String filename) {
        Path avatarPath = Paths.get("uploads/avatars/" + filename);
        if (!avatarPath.toFile().exists()) {
            return Response.status(Response.Status.NOT_FOUND).entity("Avatar not found").build();
        }
        try {
            return Response.ok().entity(avatarPath.toFile()).build();
        } catch (Exception e) {
            return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
        }
    }

    // ---------- Helpers ----------
    private static String probeType(Path p) {
        try { return Optional.ofNullable(Files.probeContentType(p)).orElse("application/octet-stream"); }
        catch (IOException e) { return "application/octet-stream"; }
    }

    private static boolean isInlinePreviewable(String contentType) {
        if (contentType == null) return false;
        return contentType.startsWith("image/")
            || contentType.startsWith("audio/")
            || contentType.startsWith("video/")
            || contentType.equals("application/pdf");
    }

    private static String sanitizeFileName(String name) {
        if (name == null || name.isBlank()) return "file";
        return name.replaceAll("[^a-zA-Z0-9._-]+", "_");
    }
}
