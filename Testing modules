const fetchLearningTasks = async () => {
      try {
        const res = await fetch("/api/learning", {
          headers: { Authorization: `Bearer ${token}` }
        });
        if (!res.ok) return;
        const lessons: LessonFromAPI[] = await res.json();

        const specificLessons = lessons.filter(
          (lesson) =>
            lesson.assignType === "specific" &&
            Array.isArray(lesson.assignedUserIds) &&
            lesson.assignedUserIds.includes(userId)
        );

        const learningTasks: Task[] = specificLessons.map((lesson) => ({
          id: lesson.id,
          title: lesson.title,
          status: 'todo',
          type: 'learning',
          lessonId: lesson.id,
          thumbnailUrl: lesson.thumbnailUrl || "/placeholder.png",
          author: lesson.authorName || "Unknown",
          role: lesson.authorRole || "Instructor",
          progress: 0,
        }));

        setTasks(prev => {
          const prevLearningIds = new Set(prev.filter(t => t.type === 'learning').map(t => t.lessonId));
          const newLearning = learningTasks.filter(t => !prevLearningIds.has(t.lessonId));
          return [...prev, ...newLearning];
        });
      } catch (err) {
        console.error("Failed to fetch learning tasks", err);
      }
    };

<div
  key={lesson.id}
  className={`relative cursor-pointer p-4 rounded-xl shadow border transition-all
  ${selectedLesson?.id === lesson.id ? "bg-blue-50 border-blue-500" : "bg-white hover:border-blue-500"}`}
>
  <div onClick={() => handleSelectLesson(lesson)}>
    <h3 className="font-semibold text-lg text-gray-800">{lesson.title}</h3>
    <p className="text-sm text-gray-500">ID: {lesson.id}</p>
    <p className="text-xs text-purple-600 font-semibold uppercase">{lesson.category}</p>
  </div>

  {/* ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç */}
  <button
    onClick={(e) => {
      e.stopPropagation(); // ‡∏Å‡∏±‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î
      handleOpenEdit(lesson);
    }}
    className="absolute top-2 right-10 text-gray-500 hover:text-gray-700"
    title="Edit lesson"
    type="button"
  >
    <Pencil size={18} />
  </button>

  {/* ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°) */}
  <button
    onClick={(e) => {
      e.stopPropagation();
      handleDeleteLesson(lesson.id);
    }}
    className="absolute top-2 right-2 text-red-500 hover:text-red-700"
    title="Delete lesson"
    type="button"
  >
    üóë
  </button>
</div>

