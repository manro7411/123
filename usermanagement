package Testing;
import dto.Team.*;
import jakarta.annotation.security.RolesAllowed;
import jakarta.inject.Inject;
import jakarta.persistence.EntityManager;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.Context;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.core.SecurityContext;
import model.MemberEntity;
import model.TeamEntity;
import org.slf4j.*;

import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

@Path("/api/admin/teams")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class TeamAdminResource {

    public static final String ROLE_USER = "user",
            ROLE_ADMIN = "admin",
            ROLE_EMPLOYEE = "employee",
            ROLE_SUPERVISOR = "supervisor",
            ROLE_ADMINISTRATOR = "administrator";

    private String setRole(){
        return ROLE_ADMINISTRATOR+","+ROLE_ADMIN+","+ROLE_SUPERVISOR+","+ROLE_EMPLOYEE;
    }

    @Inject
    EntityManager em;
    private static String genId() {
        return UUID.randomUUID().toString().replace("-", "").substring(0, 21);
    }

    private static final Logger log = LoggerFactory.getLogger(TeamAdminResource.class);

    private static TeamSummary toSummary(TeamEntity team) {
        String supervisorId = null;
        List<String> memberIds = new ArrayList<>();
        if (team.getMemberEntities() != null) {
            for (MemberEntity m : team.getMemberEntities()) {
                if (m == null) continue;
                if ("supervisor".equalsIgnoreCase(m.getRole())) {supervisorId = m.getMemberId(); // เก็บเป็น userId/email ตามที่คุณใช้
                } else {memberIds.add(m.getMemberId());}
            }
        }
        return new TeamSummary(team.getId(), team.getName(), supervisorId, memberIds);
    }
    // ---------- CREATE TEAM (Admin สร้างทีม + ใส่ Supervisor + สมาชิกเพิ่มเติม)
    @POST
    @Transactional
    @RolesAllowed(ROLE_ADMINISTRATOR)
    public Response createTeam(CreateTeamRequestAdmin req ,@Context SecurityContext securityContext) {
        String currentUser = securityContext.getUserPrincipal().getName();
        log.info("Admin {} is creating a new team", currentUser);
        if (req == null || req.name == null || req.name.isBlank()){
            log.info("TeamAdminResource.java -> CreateTeam Endpoint -> Team name is required {} with admin {}", req,currentUser);
            throw new BadRequestException("Team name is required");
        }
        if (req.supervisorId == null || req.supervisorId.isBlank()){
            log.info("TeamAdminResource.java -> CreateTeam Endpoint -> Supervisor ID is missing in the request");
            throw new BadRequestException("supervisorId is required");
        }

        TeamEntity existingTeam = em.createQuery(
                "SELECT t FROM TeamEntity t WHERE LOWER(t.name) = :name", TeamEntity.class)
                .setParameter("name", req.name.trim().toLowerCase())
                .getResultStream().findFirst().orElse(null);
        if (existingTeam != null) {
            log.info("TeamAdminResource.java -> CreateTeam Endpoint -> Team name already exists: {}", req.name);
            return Response.status(Response.Status.CONFLICT)
                    .entity("Team name already exists")
                    .build();
        }

        TeamEntity team = new TeamEntity();
        team.setId(genId());
        team.setName(req.name.trim());
        team.setDescription(req.description);
        team.setCreateBy(req.createBy);
        List<MemberEntity> members = new ArrayList<>();

        MemberEntity sup = new MemberEntity();
        sup.setId(genId());
        sup.setTeam(team);
        sup.setMemberId(req.supervisorId);
        sup.setNameMembers(req.supervisorName != null ? req.supervisorName : req.supervisorId);
        sup.setRole("supervisor");
        members.add(sup);
        log.debug("TeamAdminResource.java -> CreateTeam Endpoint -> Added supervisor: {} with role: {}", req.supervisorId, sup.getRole());
        if (req.members != null) {
            log.info("Adding {} members to the team", req.members.size());
            for (CreateMemberRequest mreq : req.members) {
                if (mreq == null || mreq.userId == null || mreq.userId.isBlank()){
                    log.info("TeamAdminResource.java -> CreateTeam Endpoint -> Skipping invalid member entry: {}", mreq);
                    continue;
                }
                if (req.supervisorId.equalsIgnoreCase(mreq.userId)){
                    log.info("TeamAdminResource.java -> CreateTeam Endpoint -> Skipping adding supervisor {} as a regular member", mreq.userId);
                    continue;
                }
                MemberEntity m = new MemberEntity();
                m.setId(genId());
                m.setTeam(team);
                m.setMemberId(mreq.userId);
                m.setNameMembers(mreq.userName != null ? mreq.userName : mreq.userId);
                m.setRole(mreq.role != null ? mreq.role : "member");
                members.add(m);
                log.debug("TeamAdminResource.java -> CreateTeam Endpoint -> Added member: {} with role: {}", mreq.userId, m.getRole());
            }
        }
        team.setMemberEntities(members);
        em.persist(team);
        log.info("TeamAdminResource.java -> CreateTeam Endpoint -> Team created with ID: {}", team.getId());
        return Response.created(URI.create("/api/teams/" + team.getId()))
                .entity(toSummary(team))
                .build();
    }// ---------- ADD MEMBERS (Admin เพิ่มทีละชุด)
    @POST
    @Path("/{teamId}/members")
    @RolesAllowed(ROLE_ADMINISTRATOR)
    @Transactional
    public Response addMembers(
            @PathParam("teamId") String teamId,
            AddMemberRequest req
    ) {
        TeamEntity team = em.find(TeamEntity.class, teamId);
        if (team == null) throw new NotFoundException("Team not found");
        team.getMemberEntities().size();

        if (req == null || req.members == null || req.members.isEmpty())
            throw new BadRequestException("members are required");

        // กันซ้ำจากฐานข้อมูล
        Set<String> existing = team.getMemberEntities().stream()
                .map(m -> m.getMemberId().toLowerCase()).collect(Collectors.toSet());

        List<MemberEntity> newOnes = new ArrayList<>();
        for (CreateMemberRequest mreq : req.members) {
            if (mreq == null || mreq.userId == null || mreq.userId.isBlank()) continue;
            String uid = mreq.userId.toLowerCase();
            if (existing.contains(uid)) continue;

            MemberEntity m = new MemberEntity();
            m.setId(genId());
            m.setTeam(team);
            m.setMemberId(mreq.userId);
            m.setNameMembers(mreq.userName != null ? mreq.userName : mreq.userId);
            // Admin สามารถกำหนด role เริ่มต้นได้ (ยกเว้น supervisor ต้องผ่าน endpoint supervisor)
            String role = (mreq.role != null && !"supervisor".equalsIgnoreCase(mreq.role)) ? mreq.role : "member";
            m.setRole(role);
            newOnes.add(m);
            existing.add(uid);
        }

        for (MemberEntity m : newOnes) em.persist(m);
        List<TeamMemberDTO> dto = em.createQuery(
                        "SELECT m FROM MemberEntity m WHERE m.team.id = :tid ORDER BY m.joinedAt ASC",
                        MemberEntity.class
                ).setParameter("tid", teamId).getResultList()
                .stream().map(m -> new TeamMemberDTO(m.getMemberId(), m.getNameMembers(), m.getRole()))
                .toList();
        return Response.ok(dto).build();
    }
    // ---------- SET/CHANGE SUPERVISOR (Admin เท่านั้น)
    @PUT
    @Path("/{teamId}/supervisor")
    @RolesAllowed(ROLE_ADMINISTRATOR)
    public Response setSupervisor(@PathParam("teamId") String teamId, SetSupervisorRequest req, @Context SecurityContext securityContext) {
        String currentUser = securityContext.getUserPrincipal().getName();
        log.info("Admin {} is setting/changing supervisor for team {}", currentUser, teamId);
        if (req == null || req.supervisorId == null || req.supervisorId.isBlank()){
            log.info("TeamAdminResource.java -> SetSupervisor Endpoint -> supervisorId is required in the request");
            throw new BadRequestException("supervisorId is required");
        }

        TeamEntity team = em.find(TeamEntity.class, teamId);
        if (team == null){
            log.info("TeamAdminResource.java -> SetSupervisor Endpoint -> Team not found with ID: {}", teamId);
            throw new NotFoundException("Team not found");
        }
        team.getMemberEntities().size();
        MemberEntity currentSup = team.getMemberEntities().stream()
                .filter(m -> "supervisor".equalsIgnoreCase(m.getRole()))
                .findFirst().orElse(null);
        if (currentSup != null && currentSup.getMemberId().equalsIgnoreCase(req.supervisorId)) {
            log.info("TeamAdminResource.java -> SetSupervisor Endpoint -> The specified user is already the supervisor: {}", req.supervisorId);
            return Response.ok("This user is already the supervisor").build();
        }
        MemberEntity newSup = team.getMemberEntities().stream()
                .filter(m -> m.getMemberId().equalsIgnoreCase(req.supervisorId))
                .findFirst().orElse(null);
        if (newSup != null) {
            newSup.setRole("supervisor");
            if (req.supervisorName != null && !req.supervisorName.isBlank()) {
                log.info("TeamAdminResource.java -> SetSupervisor Endpoint -> Updating supervisor name to: {}", req.supervisorName);
                newSup.setNameMembers(req.supervisorName);
            }
            em.merge(newSup);
        } else {
            newSup = new MemberEntity();
            newSup.setId(genId());
            newSup.setTeam(team);
            newSup.setMemberId(req.supervisorId);
            newSup.setNameMembers(req.supervisorName != null ? req.supervisorName : req.supervisorId);
            newSup.setRole("supervisor");
            em.persist(newSup);
        }
        if (currentSup != null) {
            currentSup.setRole("member");
            em.merge(currentSup);
        }

        List<TeamMemberDTO> dto = em.createQuery(
                        "SELECT m FROM MemberEntity m WHERE m.team.id = :tid ORDER BY m.joinedAt ASC",
                        MemberEntity.class
                ).setParameter("tid", teamId).getResultList()
                .stream().map(m -> new TeamMemberDTO(m.getMemberId(), m.getNameMembers(), m.getRole()))
                .toList();
        return Response.ok(dto).build();
    }
}
