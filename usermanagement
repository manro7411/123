import { useEffect, useMemo, useState } from "react";
import axios, { AxiosError } from "axios";

import UserListWidget from "../Supervisor/Widgets/UserListWidget";
import AdministratorBar from "./Widgets/AdministratorBar";

// ----------------------
// Axios instance + BaseURL/Proxy
// ----------------------
const axiosClient = axios.create({
  baseURL: import.meta.env.VITE_API_BASE_URL || "/",
});

axiosClient.interceptors.request.use((config) => {
  const token =
    localStorage.getItem("token") || sessionStorage.getItem("token") || "";
  if (token) {
    config.headers = { ...(config.headers || {}), Authorization: `Bearer ${token}` };
  }
  return config;
});

// ----------------------
// Types (สอดคล้อง TeamAdminResource.TeamSummary)
// ----------------------
export type User = {
  id: string;
  name: string;
  email: string;
  role: string; // 'ADMIN' | 'SUPERVISOR' | 'TRAINER' | 'LEARNER' ...
};

export type Team = {
  id: string;
  name: string;
  supervisorId: string | null;
  memberIds: string[];
};

// ----------------------
// Team Builder (สร้างทีมผ่าน /api/admin/teams)
// ----------------------
function TeamBuilderWidget({
  users,
  onCreated,
}: {
  users: User[];
  onCreated: (team: Team) => void;
}) {
  const [teamName, setTeamName] = useState("");
  const [teamDesc, setTeamDesc] = useState("");
  const [supervisorId, setSupervisorId] = useState("");
  const [supervisorName, setSupervisorName] = useState("");
  const [memberIds, setMemberIds] = useState<string[]>([]);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const supervisors = useMemo(
    () => users.filter((u) => u.role?.toUpperCase() === "SUPERVISOR"),
    [users]
  );

  const selectableMembers = useMemo(() => {
    // ใครๆ (ยกเว้น ADMIN) ก็สามารถถูกเพิ่มเป็นสมาชิกทีมได้
    return users.filter((u) => u.role?.toUpperCase() !== "ADMIN");
  }, [users]);

  const toggleMember = (id: string) => {
    setMemberIds((prev) =>
      prev.includes(id) ? prev.filter((x) => x !== id) : [...prev, id]
    );
  };

  const canSubmit = teamName.trim() && supervisorId && memberIds.length > 0;

  const createTeam = async () => {
    if (!canSubmit || submitting) return;
    setSubmitting(true);
    setError(null);

    try {
      // payload ให้ตรง CreateTeamRequestAdmin
      const membersPayload = memberIds.map((id) => {
        const u = users.find((x) => x.id === id);
        return {
          userId: id,
          userName: u?.name || id,
          role: "member", // เริ่มต้น member; ถ้าอยากตั้ง trainer ก็แก้ตรงนี้ได้รายคน
        };
      });

      const { data } = await axiosClient.post<Team>(
        "/api/admin/teams",
        {
          name: teamName.trim(),
          description: teamDesc || undefined,
          supervisorId,
          supervisorName: supervisorName || undefined,
          // createBy จะใส่หรือไม่ก็ได้ ถ้าอยากให้ฝั่ง BE บันทึกเพิ่ม
          // createBy: currentAdminIdOrEmail,
          members: membersPayload,
        }
      );

      onCreated(data);
      setTeamName("");
      setTeamDesc("");
      setSupervisorId("");
      setSupervisorName("");
      setMemberIds([]);
    } catch (e: any) {
      console.error(e);
      setError(
        e?.response?.data?.message ||
          e?.response?.data ||
          "สร้างทีมไม่สำเร็จ"
      );
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="rounded-2xl border p-4 md:p-6 space-y-4 bg-white/60">
      <div className="flex items-center justify-between">
        <h2 className="text-xl font-bold">สร้างทีมใหม่</h2>
      </div>

      <div className="grid gap-4 md:grid-cols-3">
        <div className="space-y-2">
          <label className="text-sm font-medium">ชื่อทีม</label>
          <input
            className="w-full rounded-xl border px-3 py-2"
            placeholder="เช่น Team A"
            value={teamName}
            onChange={(e) => setTeamName(e.target.value)}
          />
        </div>

        <div className="space-y-2">
          <label className="text-sm font-medium">หัวหน้าทีม (Supervisor)</label>
          <select
            className="w-full rounded-xl border px-3 py-2"
            value={supervisorId}
            onChange={(e) => setSupervisorId(e.target.value)}
          >
            <option value="">— เลือก Supervisor —</option>
            {supervisors.map((s) => (
              <option key={s.id} value={s.id}>
                {s.name} ({s.email})
              </option>
            ))}
          </select>
          <input
            className="w-full rounded-xl border px-3 py-2 mt-2"
            placeholder="ชื่อหัวหน้าทีม (ไม่บังคับ)"
            value={supervisorName}
            onChange={(e) => setSupervisorName(e.target.value)}
          />
        </div>

        <div className="space-y-2 md:col-span-1">
          <label className="text-sm font-medium">รายละเอียดทีม</label>
          <input
            className="w-full rounded-xl border px-3 py-2"
            placeholder="คำอธิบายสั้น ๆ (ไม่บังคับ)"
            value={teamDesc}
            onChange={(e) => setTeamDesc(e.target.value)}
          />
          <div className="rounded-xl border px-3 py-2 text-sm mt-2">
            สมาชิกที่เลือก: {memberIds.length} คน
          </div>
        </div>
      </div>

      <div className="space-y-2">
        <label className="text-sm font-medium">เลือกสมาชิกเข้าทีม</label>
        <div className="max-h-64 overflow-auto rounded-xl border divide-y">
          {selectableMembers.map((u) => (
            <label
              key={u.id}
              className="flex items-center gap-3 p-3 hover:bg-gray-50 cursor-pointer"
            >
              <input
                type="checkbox"
                checked={memberIds.includes(u.id)}
                onChange={() => toggleMember(u.id)}
              />
              <div className="flex-1">
                <div className="font-medium">{u.name}</div>
                <div className="text-xs opacity-70">
                  {u.email} • {u.role}
                </div>
              </div>
            </label>
          ))}
        </div>
      </div>

      {error && <div className="text-sm text-red-600">{error}</div>}

      <div className="flex gap-2">
        <button
          disabled={!canSubmit || submitting}
          onClick={createTeam}
          className="rounded-xl px-4 py-2 border bg-black text-white disabled:opacity-50"
        >
          {submitting ? "กำลังบันทึก..." : "สร้างทีม"}
        </button>
        <button
          onClick={() => {
            setTeamName("");
            setTeamDesc("");
            setSupervisorId("");
            setSupervisorName("");
            setMemberIds([]);
            setError(null);
          }}
          className="rounded-xl px-4 py-2 border"
        >
          ล้างค่า
        </button>
      </div>
    </div>
  );
}

// ----------------------
// รายการทีม (ดึงจาก /api/admin/teams)
// ----------------------
function TeamsBySupervisor({ users, teams }: { users: User[]; teams: Team[] }) {
  const userById = useMemo(() => new Map(users.map((u) => [u.id, u])), [users]);

  const grouped = useMemo(() => {
    const bySup: Record<string, Team[]> = {};
    for (const t of teams || []) {
      const key = t?.supervisorId || "__UNKNOWN__";
      if (!bySup[key]) bySup[key] = [];
      bySup[key].push(t);
    }
    return bySup;
  }, [teams]);

  const supIds = Object.keys(grouped);
  if (!supIds.length) return null;

  return (
    <div className="space-y-6">
      {supIds.map((sid) => {
        const sup = userById.get(sid);
        const teamsForSup = grouped[sid] ?? [];
        return (
          <div key={sid} className="rounded-2xl border p-4 md:p-6 bg-white/60">
            <div className="mb-3">
              <h3 className="text-lg font-semibold">
                Supervisor: {sup?.name || sid} {sup?.email ? `(${sup.email})` : ""}
              </h3>
              <p className="text-sm opacity-70">ทีมทั้งหมดของหัวหน้าคนนี้</p>
            </div>
            <div className="grid gap-3 md:grid-cols-2">
              {teamsForSup.map((t) => (
                <div key={t.id} className="rounded-xl border p-3">
                  <div className="font-medium">{t.name}</div>
                  <div className="text-xs opacity-70">
                    สมาชิก {t?.memberIds?.length ?? 0} คน
                  </div>
                </div>
              ))}
            </div>
          </div>
        );
      })}
    </div>
  );
}

// ----------------------
// หน้าหลัก: Administrator User Management
// ----------------------
export default function AdministratorUserManagement() {
  const [users, setUsers] = useState<User[]>([]);
  const [teams, setTeams] = useState<Team[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // ดึงผู้ใช้ทั้งหมด (ปรับตามระบบจริงของคุณ)
  const fetchUsers = async () => {
    const candidates = [
      "/api/users",
      "/api/profile/users",
      "/api/profile/users/for-supervisor",
    ];

    let lastError: unknown = null;
    for (const path of candidates) {
      try {
        const { data } = await axiosClient.get<User[]>(path);
        if (Array.isArray(data)) {
          setUsers(data);
          setError(null);
          return;
        }
      } catch (e) {
        lastError = e;
      }
    }

    console.error(lastError);
    const msg =
      (lastError as AxiosError)?.response?.status === 404
        ? "ไม่พบ endpoint สำหรับดึงผู้ใช้ (404) — ตรวจสอบเส้นทาง API หรือ proxy/baseURL"
        : "ดึงรายชื่อผู้ใช้ไม่สำเร็จ";
    setError(msg);
  };

  // ดึงทีมจาก TeamAdminResource
  const fetchTeams = async () => {
    try {
      const { data } = await axiosClient.get<Team[]>("/api/admin/teams");
      if (Array.isArray(data)) setTeams(data);
    } catch (err) {
      console.warn("ยังไม่มีทีม หรือไม่พบ /api/admin/teams");
      // สำรอง (ถ้าคุณยังมี /api/teams ที่คืน TeamSummary เช่นกัน)
      try {
        const { data } = await axiosClient.get<Team[]>("/api/teams");
        if (Array.isArray(data)) setTeams(data);
      } catch {
        // เงียบไว้ก่อน
      }
    }
  };

  useEffect(() => {
    (async () => {
      setLoading(true);
      await Promise.all([fetchUsers(), fetchTeams()]);
      setLoading(false);
    })();
  }, []);

  const assignRole = async (userId: string, role: string) => {
    const confirmAssign = window.confirm(`ยืนยันอัปเดตรายบทบาทเป็น \"${role}\" ?`);
    if (!confirmAssign) return;

    try {
      await axiosClient.put(`/api/profile/users/${userId}/role`, { role });
      await fetchUsers();
      alert(`อัปเดตบทบาทเป็น ${role} แล้ว`);
    } catch (err: any) {
      console.error(err);
      alert(err?.response?.data?.message || "อัปเดตบทบาทไม่สำเร็จ");
    }
  };

  const handleTeamCreated = (team: Team) => {
    setTeams((prev) => [team, ...prev]);
  };

  if (loading) {
    return (
      <div className="flex h-screen">
        <AdministratorBar />
        <div className="flex-1 p-8">กำลังโหลด...</div>
      </div>
    );
  }

  return (
    <div className="flex h-screen">
      <AdministratorBar />

      <div className="flex-1 p-8 overflow-y-auto space-y-8">
        <div className="flex justify-between items-center">
          <h1 className="text-3xl font-bold">Administrator User Management</h1>
        </div>

        {error && (
          <div className="rounded-xl border border-red-200 bg-red-50 p-3 text-red-700">
            {error}
          </div>
        )}

        {/* จัดการบทบาทผู้ใช้เดิม */}
        <div className="space-y-3">
          <p className="opacity-80">จัดการบทบาทผู้ใช้ และระบุ Supervisor/Trainer</p>
          <UserListWidget users={users} assignRole={assignRole} error={error} />
        </div>

        {/* สร้างทีมใหม่ผ่าน TeamAdminResource */}
        <TeamBuilderWidget users={users} onCreated={handleTeamCreated} />

        {/* แสดงทีม grouped by Supervisor */}
        <TeamsBySupervisor users={users} teams={teams} />
      </div>
    </div>
  );
}
xhr.js:195 
 
 GET http://localhost:5173/api/admin/teams 405 (Method Not Allowed)
administratorusermanagement.tsx:322 
 ยังไม่มีทีม หรือไม่พบ /api/admin/teams
xhr.js:195 
 
 GET http://localhost:5173/api/admin/teams 405 (Method Not Allowed)
administratorusermanagement.tsx:322 
 ยังไม่มีทีม หรือไม่พบ /api/admin/teams
xhr.js:195 
 
 GET http://localhost:5173/api/users 404 (Not Found)
xhr.js:195 
 
 GET http://localhost:5173/api/users 404 (Not Found)
UserListWidget.tsx:25 
 Uncaught TypeError: Cannot read properties of undefined (reading 'toLowerCase')
    at UserListWidget.tsx:25:35
    at Array.map (<anonymous>)
    at UserListWidget (UserListWidget.tsx:24:14)
    at renderWithHooks (react-dom.development.js:15486:18)
    at mountIndeterminateComponent (react-dom.development.js:20103:13)
    at beginWork (react-dom.development.js:21626:16)
    at HTMLUnknownElement.callCallback2 (react-dom.development.js:4164:14)
    at Object.invokeGuardedCallbackDev (react-dom.development.js:4213:16)
    at invokeGuardedCallback (react-dom.development.js:4277:31)
    at beginWork$1 (react-dom.development.js:27490:7)
UserListWidget.tsx:25 
 Uncaught TypeError: Cannot read properties of undefined (reading 'toLowerCase')
    at UserListWidget.tsx:25:35
    at Array.map (<anonymous>)
    at UserListWidget (UserListWidget.tsx:24:14)
    at renderWithHooks (react-dom.development.js:15486:18)
    at mountIndeterminateComponent (react-dom.development.js:20103:13)
    at beginWork (react-dom.development.js:21626:16)
    at HTMLUnknownElement.callCallback2 (react-dom.development.js:4164:14)
    at Object.invokeGuardedCallbackDev (react-dom.development.js:4213:16)
    at invokeGuardedCallback (react-dom.development.js:4277:31)
    at beginWork$1 (react-dom.development.js:27490:7)
react-dom.development.js:18704 
 The above error occurred in the <UserListWidget> component:

    at UserListWidget (http://localhost:5173/src/pages/Supervisor/Widgets/UserListWidget.tsx:19:42)
    at div
    at div
    at div
    at AdministratorUserManagement (http://localhost:5173/src/pages/Administrator/administratorusermanagement.tsx?t=1759908154306:450:29)
    at RenderedRoute (http://localhost:5173/node_modules/.vite/deps/react-router-dom.js?v=b84471ba:5653:26)
    at Routes (http://localhost:5173/node_modules/.vite/deps/react-router-dom.js?v=b84471ba:6389:3)
    at AdministratorRoutes
    at RenderedRoute (http://localhost:5173/node_modules/.vite/deps/react-router-dom.js?v=b84471ba:5653:26)
    at Routes (http://localhost:5173/node_modules/.vite/deps/react-router-dom.js?v=b84471ba:6389:3)
    at Suspense
    at Router (http://localhost:5173/node_modules/.vite/deps/react-router-dom.js?v=b84471ba:6332:13)
    at BrowserRouter (http://localhost:5173/node_modules/.vite/deps/react-router-dom.js?v=b84471ba:9416:3)
    at AuthProvider (http://localhost:5173/src/Authentication/AuthContext.tsx:29:32)
    at App

Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.
react-dom.development.js:26962 
 Uncaught TypeError: Cannot read properties of undefined (reading 'toLowerCase')
    at UserListWidget.tsx:25:35
    at Array.map (<anonymous>)
    at UserListWidget (UserListWidget.tsx:24:14)
    at renderWithHooks (react-dom.development.js:15486:18)
    at mountIndeterminateComponent (react-dom.development.js:20103:13)
    at beginWork (react-dom.development.js:21626:16)
    at beginWork$1 (react-dom.development.js:27465:14)
    at performUnitOfWork (react-dom.development.js:26596:12)
    at workLoopSync (react-dom.development.js:26505:5)
    at renderRootSync (react-dom.development.js:26473:7)
﻿
