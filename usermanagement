import { useEffect, useMemo, useState } from "react";
import axios, { AxiosError } from "axios";
import AdministratorBar from "./Widgets/AdministratorBar";
import UserListWidget from "../Supervisor/Widgets/UserListWidget";
import { Plus, Users, Shield, Loader2, Search, AlertCircle } from "lucide-react";

// ----------------------
// Axios
// ----------------------
const axiosClient = axios.create({
  baseURL: import.meta.env.VITE_API_BASE_URL || "/",
});
axiosClient.interceptors.request.use((config) => {
  const token = localStorage.getItem("token") || sessionStorage.getItem("token") || "";
  if (token) {
    config.headers = { ...(config.headers || {}), Authorization: `Bearer ${token}` };
  }
  return config;
});

// ----------------------
// Types
// ----------------------
export type User = { id: string; name: string; email: string; role: string };
export type Team = { id: string; name: string; supervisorId: string | null; memberIds: string[] };

// ----------------------
// UI Helpers
// ----------------------
function SectionCard({ title, subtitle, right, children }: { title: string; subtitle?: string; right?: React.ReactNode; children: React.ReactNode }) {
  return (
    <div className="rounded-2xl border border-gray-200/70 bg-white/80 backdrop-blur-sm shadow-sm hover:shadow-md transition-shadow">
      <div className="flex items-start justify-between px-5 pt-5">
        <div>
          <h2 className="text-lg font-semibold">{title}</h2>
          {subtitle && <p className="text-sm text-gray-500">{subtitle}</p>}
        </div>
        {right}
      </div>
      <div className="p-5">{children}</div>
    </div>
  );
}
function Pill({ children }: { children: React.ReactNode }) {
  return <span className="inline-flex items-center rounded-full bg-gray-100 px-3 py-1 text-xs text-gray-700">{children}</span>;
}
function FieldLabel({ children }: { children: React.ReactNode }) {
  return <label className="text-sm font-medium text-gray-700">{children}</label>;
}
function Input({ className = "", ...props }: React.InputHTMLAttributes<HTMLInputElement> & { className?: string }) {
  return (
    <input
      {...props}
      className={
        "w-full rounded-xl border border-gray-200 bg-white px-3 py-2 outline-none ring-0 focus:border-gray-300 focus:ring-4 focus:ring-gray-100 transition " +
        className
      }
    />
  );
}
function Select({ className = "", ...props }: React.SelectHTMLAttributes<HTMLSelectElement> & { className?: string }) {
  return (
    <select
      {...props}
      className={
        "w-full rounded-xl border border-gray-200 bg-white px-3 py-2 outline-none ring-0 focus:border-gray-300 focus:ring-4 focus:ring-gray-100 transition " +
        className
      }
    />
  );
}
function Checkbox(props: React.InputHTMLAttributes<HTMLInputElement>) {
  return <input type="checkbox" className="h-4 w-4 rounded border-gray-300 text-black focus:ring-2 focus:ring-gray-200" {...props} />;
}
function SkeletonLine() {
  return <div className="h-4 w-full animate-pulse rounded bg-gray-200/70" />;
}

// ----------------------
// Normalizers
// ----------------------
function normalizeUser(raw: any): User | null {
  if (!raw) return null;
  const id = String(raw.id || raw.userId || raw.email || "").trim();
  if (!id) return null;
  const name = String(raw.name || raw.fullName || raw.username || id).trim();
  const email = String(raw.email || "").trim();
  const role = String(raw.role || raw.globalRole || raw.systemRole || "USER").toUpperCase();
  return { id, name, email, role };
}
function normalizeTeam(raw: any): Team | null {
  if (!raw) return null;
  const id = String(raw.id || raw.teamId || "").trim();
  if (!id) return null;
  const name = String(raw.name || "Unnamed Team").trim();
  const supervisorId =
    (raw.supervisorId && String(raw.supervisorId)) ||
    (Array.isArray(raw.memberEntities)
      ? (raw.memberEntities.find((m: any) => String(m.role || "").toLowerCase() === "supervisor")?.memberId ?? null)
      : null) ||
    null;
  const memberIds: string[] =
    (Array.isArray(raw.memberIds) && raw.memberIds.map(String)) ||
    (Array.isArray(raw.memberEntities)
      ? raw.memberEntities
          .filter((m: any) => String(m.role || "").toLowerCase() !== "supervisor")
          .map((m: any) => String(m.memberId || m.userId || m.email || "").trim())
          .filter(Boolean)
      : []) ||
    [];
  return { id, name, supervisorId, memberIds };
}

// ----------------------
// Team Builder
// ----------------------
function TeamBuilderWidget({ users, onCreated }: { users: User[]; onCreated: (team: Team) => void }) {
  const [teamName, setTeamName] = useState("");
  const [teamDesc, setTeamDesc] = useState("");
  const [supervisorId, setSupervisorId] = useState("");
  const [supervisorName, setSupervisorName] = useState("");
  const [memberIds, setMemberIds] = useState<string[]>([]);
  const [search, setSearch] = useState("");
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const supervisors = useMemo(() => users.filter((u) => u.role?.toUpperCase() === "SUPERVISOR"), [users]);
  const selectableMembers = useMemo(
    () => users.filter((u) => u.role?.toUpperCase() !== "ADMIN"),
    [users]
  );
  const filteredMembers = useMemo(() => {
    const q = search.trim().toLowerCase();
    if (!q) return selectableMembers;
    return selectableMembers.filter(
      (u) => u.name.toLowerCase().includes(q) || u.email.toLowerCase().includes(q) || u.id.toLowerCase().includes(q)
    );
  }, [selectableMembers, search]);

  const toggleMember = (id: string) => {
    setMemberIds((prev) => (prev.includes(id) ? prev.filter((x) => x !== id) : [...prev, id]));
  };

  const canSubmit = teamName.trim() && supervisorId && memberIds.length > 0;

  const createTeam = async () => {
    if (!canSubmit || submitting) return;
    setSubmitting(true);
    setError(null);
    try {
      const membersPayload = memberIds.map((id) => {
        const u = users.find((x) => x.id === id);
        return { userId: id, userName: u?.name || id, role: "member" };
      });
      const { data } = await axiosClient.post<Team>("/api/admin/teams", {
        name: teamName.trim(),
        description: teamDesc || undefined,
        supervisorId,
        supervisorName: supervisorName || undefined,
        members: membersPayload,
      });
      const normalized = normalizeTeam(data);
      if (normalized) onCreated(normalized);
      setTeamName("");
      setTeamDesc("");
      setSupervisorId("");
      setSupervisorName("");
      setMemberIds([]);
    } catch (e: any) {
      setError(e?.response?.data?.message || e?.response?.data || "สร้างทีมไม่สำเร็จ");
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <SectionCard
      title="สร้างทีมใหม่"
      subtitle="ระบุ Supervisor และเลือกสมาชิกที่ต้องการเพิ่มเข้าในทีม"
      right={<Pill><Users className="mr-1 h-3.5 w-3.5" /> {memberIds.length} สมาชิก</Pill>}
    >
      <div className="grid gap-4 md:grid-cols-3">
        <div className="space-y-2">
          <FieldLabel>ชื่อทีม</FieldLabel>
          <Input placeholder="เช่น Team A" value={teamName} onChange={(e) => setTeamName(e.target.value)} />
        </div>
        <div className="space-y-2">
          <FieldLabel>หัวหน้าทีม (Supervisor)</FieldLabel>
          <Select value={supervisorId} onChange={(e) => setSupervisorId(e.target.value)}>
            <option value="">— เลือก Supervisor —</option>
            {supervisors.map((s) => (
              <option key={s.id} value={s.id}>
                {s.name} ({s.email})
              </option>
            ))}
          </Select>
          <Input placeholder="ชื่อหัวหน้าทีม (ไม่บังคับ)" value={supervisorName} onChange={(e) => setSupervisorName(e.target.value)} />
        </div>
        <div className="space-y-2">
          <FieldLabel>รายละเอียดทีม</FieldLabel>
          <Input placeholder="คำอธิบายสั้น ๆ (ไม่บังคับ)" value={teamDesc} onChange={(e) => setTeamDesc(e.target.value)} />
          <div className="flex items-center gap-2 text-xs text-gray-500">
            <Shield className="h-3.5 w-3.5" /> Supervisor จะถูกเพิ่มเป็นสมาชิกอัตโนมัติ
          </div>
        </div>
      </div>

      <div className="mt-4 space-y-3">
        <div className="flex items-center justify-between">
          <FieldLabel>เลือกสมาชิกเข้าทีม</FieldLabel>
          <div className="relative w-64">
            <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-400" />
            <Input className="pl-9" placeholder="ค้นหาชื่อ อีเมล หรือไอดี" value={search} onChange={(e) => setSearch(e.target.value)} />
          </div>
        </div>

        <div className="max-h-64 overflow-auto rounded-xl border border-gray-200 divide-y">
          {filteredMembers.map((u) => (
            <label key={u.id} className="flex items-center gap-3 p-3 hover:bg-gray-50 cursor-pointer">
              <Checkbox checked={memberIds.includes(u.id)} onChange={() => toggleMember(u.id)} />
              <div className="flex-1 min-w-0">
                <div className="font-medium truncate">{u.name}</div>
                <div className="text-xs text-gray-500 truncate">{u.email} • {u.role}</div>
              </div>
            </label>
          ))}
          {!filteredMembers.length && (
            <div className="p-6 text-center text-sm text-gray-500">ไม่พบผู้ใช้ที่ตรงกับคำค้นหา</div>
          )}
        </div>
      </div>

      {error && (
        <div className="mt-4 flex items-start gap-2 rounded-xl border border-red-200 bg-red-50 p-3 text-sm text-red-700">
          <AlertCircle className="mt-0.5 h-4 w-4" /> {error}
        </div>
      )}

      <div className="mt-5 flex gap-2">
        <button
          disabled={!canSubmit || submitting}
          onClick={createTeam}
          className="inline-flex items-center gap-2 rounded-xl bg-black px-4 py-2 text-white shadow hover:opacity-90 disabled:opacity-50"
        >
          {submitting ? <Loader2 className="h-4 w-4 animate-spin" /> : <Plus className="h-4 w-4" />}
          {submitting ? "กำลังบันทึก..." : "สร้างทีม"}
        </button>
        <button
          onClick={() => {
            setTeamName(""); setTeamDesc(""); setSupervisorId(""); setSupervisorName(""); setMemberIds([]); setError(null);
          }}
          className="rounded-xl border px-4 py-2 hover:bg-gray-50"
        >
          ล้างค่า
        </button>
      </div>
    </SectionCard>
  );
}

// ----------------------
// Teams Grouped by Supervisor
// ----------------------
function TeamsBySupervisor({ users, teams }: { users: User[]; teams: Team[] }) {
  const userById = useMemo(() => new Map(users.map((u) => [u.id, u])), [users]);
  const grouped = useMemo(() => {
    const bySup: Record<string, Team[]> = {};
    for (const t of teams || []) {
      const key = t?.supervisorId || "__UNKNOWN__";
      if (!bySup[key]) bySup[key] = [];
      bySup[key].push(t);
    }
    return bySup;
  }, [teams]);

  const supIds = Object.keys(grouped);
  if (!supIds.length) {
    return (
      <SectionCard title="ทีมทั้งหมด" subtitle="ยังไม่มีทีมในระบบ">
        <div className="rounded-xl border border-dashed p-6 text-center text-sm text-gray-500">
          ยังไม่มีทีม — สร้างทีมใหม่ด้านบนได้เลย
        </div>
      </SectionCard>
    );
  }

  return (
    <div className="grid gap-6">
      {supIds.map((sid) => {
        const sup = userById.get(sid);
        const teamsForSup = grouped[sid] ?? [];
        const avatarText = (sup?.name || sid || "?").substring(0, 2).toUpperCase();
        return (
          <SectionCard
            key={sid}
            title={`Supervisor: ${sup?.name || sid}`}
            subtitle={sup?.email ? `(${sup.email})` : undefined}
            right={<div className="rounded-full bg-gray-100 px-3 py-1 text-xs text-gray-700">{teamsForSup.length} ทีม</div>}
          >
            <div className="mb-4 flex items-center gap-3">
              <div className="flex h-10 w-10 items-center justify-center rounded-full bg-gray-900 text-white shadow-sm">{avatarText}</div>
              <div className="text-xs text-gray-500">ดูแลทีมทั้งหมด {teamsForSup.length} ทีม</div>
            </div>
            <div className="grid gap-3 md:grid-cols-2">
              {teamsForSup.map((t) => (
                <div key={t.id} className="rounded-xl border bg-white p-3 hover:shadow-sm transition">
                  <div className="font-medium">{t.name}</div>
                  <div className="mt-1 text-xs text-gray-500">สมาชิก {t?.memberIds?.length ?? 0} คน</div>
                </div>
              ))}
            </div>
          </SectionCard>
        );
      })}
    </div>
  );
}

// ----------------------
// Page
// ----------------------
export default function AdministratorUserManagement() {
  const [users, setUsers] = useState<User[]>([]);
  const [teams, setTeams] = useState<Team[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchUsers = async () => {
    const candidates = ["/api/users", "/api/profile/users", "/api/profile/users/for-supervisor"];
    let lastError: unknown = null;
    for (const path of candidates) {
      try {
        const { data } = await axiosClient.get<any[]>(path);
        if (Array.isArray(data)) {
          const normalized = data.map(normalizeUser).filter((x): x is User => !!x);
          setUsers(normalized);
          setError(null);
          return;
        }
      } catch (e) {
        lastError = e;
      }
    }
    const msg =
      (lastError as AxiosError)?.response?.status === 404
        ? "ไม่พบ endpoint สำหรับดึงผู้ใช้ — ตรวจสอบเส้นทาง API หรือ proxy/baseURL"
        : "ดึงรายชื่อผู้ใช้ไม่สำเร็จ";
    setError(msg);
    setUsers([]);
  };

  const fetchTeams = async () => {
    try {
      const { data } = await axiosClient.get<any[]>("/api/admin/teams");
      if (Array.isArray(data)) {
        const normalized = data.map(normalizeTeam).filter((x): x is Team => !!x);
        setTeams(normalized);
        return;
      }
    } catch (err) {
      const status = (err as AxiosError)?.response?.status;
      if (status !== 404 && status !== 405) console.warn("ดึง /api/admin/teams ไม่สำเร็จ:", err);
    }
    try {
      const { data } = await axiosClient.get<any[]>("/api/teams");
      if (Array.isArray(data)) {
        const normalized = data.map(normalizeTeam).filter((x): x is Team => !!x);
        setTeams(normalized);
      } else {
        setTeams([]);
      }
    } catch {
      setTeams([]);
    }
  };

  useEffect(() => {
    (async () => {
      setLoading(true);
      await Promise.all([fetchUsers(), fetchTeams()]);
      setLoading(false);
    })();
  }, []);

  const assignRole = async (userId: string, role: string) => {
    const confirmAssign = window.confirm(`ยืนยันอัปเดตบทบาทเป็น "${role}" ?`);
    if (!confirmAssign) return;
    try {
      await axiosClient.put(`/api/profile/users/${userId}/role`, { role });
      await fetchUsers();
      alert(`อัปเดตบทบาทเป็น ${role} แล้ว`);
    } catch (err: any) {
      alert(err?.response?.data?.message || "อัปเดตบทบาทไม่สำเร็จ");
    }
  };

  const handleTeamCreated = (team: Team) => {
    const normalized = normalizeTeam(team);
    if (normalized) setTeams((prev) => [normalized, ...prev]);
  };

  return (
    <div className="flex h-screen bg-gradient-to-b from-gray-50 to-white">
      <AdministratorBar />
      <div className="flex-1 overflow-y-auto">
        {/* Header */}
        <div className="sticky top-0 z-10 bg-white/70 backdrop-blur border-b">
          <div className="mx-auto max-w-6xl px-6 py-4">
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-2xl md:text-3xl font-bold">Administrator — User & Team Management</h1>
                <p className="text-sm text-gray-500">กำหนดสิทธิ์ผู้ใช้ สร้างทีม และจัดกลุ่มทีมตาม Supervisor</p>
              </div>
            </div>
          </div>
        </div>

        {/* Body */}
        <div className="mx-auto max-w-6xl px-6 py-6 space-y-8">
          {loading ? (
            <>
              <SectionCard title="กำลังโหลดผู้ใช้">
                <div className="space-y-3">
                  <SkeletonLine />
                  <SkeletonLine />
                  <SkeletonLine />
                </div>
              </SectionCard>
              <SectionCard title="กำลังโหลดทีม">
                <div className="space-y-3">
                  <SkeletonLine />
                  <SkeletonLine />
                </div>
              </SectionCard>
            </>
          ) : (
            <>
              {error && (
                <div className="flex items-start gap-2 rounded-2xl border border-amber-200 bg-amber-50 p-4 text-amber-800">
                  <AlertCircle className="mt-0.5 h-5 w-5" />
                  <div>
                    <div className="font-medium">มีบางอย่างผิดพลาด</div>
                    <div className="text-sm">{error}</div>
                  </div>
                </div>
              )}

              {/* User roles */}
              <SectionCard
                title="บทบาทผู้ใช้"
                subtitle="จัดการบทบาทผู้ใช้ และระบุ Supervisor/Trainer"
              >
                {users.length > 0 ? (
                  <UserListWidget users={users} assignRole={assignRole} error={null} />
                ) : (
                  <div className="rounded-xl border border-dashed p-6 text-center text-sm text-gray-500">
                    ยังไม่พบผู้ใช้ให้แสดงผล
                  </div>
                )}
              </SectionCard>

              {/* Create team */}
              <TeamBuilderWidget users={users} onCreated={handleTeamCreated} />

              {/* Team list */}
              <TeamsBySupervisor users={users} teams={teams} />
            </>
          )}
        </div>
      </div>
    </div>
  );
}
