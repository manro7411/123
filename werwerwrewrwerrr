 @POST
    @Transactional
    @Consumes(MediaType.MULTIPART_FORM_DATA)
    @Produces(MediaType.APPLICATION_JSON)
    public Response create(@Valid PostCreateRequest req) {
        String email = identity.getPrincipal().getName();
        String displayName = Optional.ofNullable(req.authorName).filter(s -> !s.isBlank()).orElse(email);

        User user = em.createQuery("SELECT u FROM User u WHERE u.email = :email", User.class)
                .setParameter("email", email)
                .getSingleResult();

        PostEntity post = new PostEntity();
        post.setAuthorName(displayName);
        post.setAuthorEmail(email);
        post.setTitle(req.title);
        post.setMessage(req.message);
        post.setForumCategory(req.forumCategory);

        if (user.getAvatar() != null) {
            post.setAvatarUrl(user.getAvatar());
        }
        post.persist();
        String filename = post.getId() + ".jpg";
        if(req.picture != null){
            try {
                String originalName = req.pictureFileName != null ? req.pictureFileName : "picture.jpeg";
                java.nio.file.Path dir = java.nio.file.Paths.get("uploads/picture");
                java.nio.file.Files.createDirectories(dir);
                java.nio.file.Path picturePath = dir.resolve(filename);
                java.nio.file.Files.copy(req.picture, picturePath, StandardCopyOption.REPLACE_EXISTING);

                System.out.println("Picture path : " + picturePath.toString());
                System.out.println("Original file name: " + originalName);
                post.setPictureUrl("uploads/picture/" + filename);
            } catch (Exception e) {
                throw new InternalServerErrorException("Failed to save photo.");
            }
        }
        return Response.created(URI.create("/posts/" + post.getId()))
                .entity(post)
                .build();
    }

package Forum;

import com.aventrix.jnanoid.jnanoid.NanoIdUtils;
import io.quarkus.hibernate.orm.panache.PanacheEntityBase;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import model.CommentEntity;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

@Entity
@Table(name = "posts")
public class PostEntity extends PanacheEntityBase {
    @Id
    @Column(length = 21, nullable = false, updatable = false)
    private String id;

    @NotBlank
    @Size(max = 100)
    @Column(name = "author_name", nullable = false, length = 100)
    private String authorName;

    @NotBlank
    @Column(name = "author_email", nullable = false, length = 150)
    private String authorEmail;

    @NotBlank
    @Size(max = 255)
    private String title;

    @NotBlank
    @Column(nullable = false, columnDefinition = "TEXT")
    private String message;

    @Column(nullable = false)
    private long likes = 0;

    @Column(nullable = false)
    private long views = 0;

    @Column(name = "forum_category")
    private String forumCategory;

    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @Column(length = 512,name = "avatarurl")
    private String avatarUrl;

    @Transient
    private boolean likedByUser;

    @ElementCollection
    @CollectionTable(name = "post_likes", joinColumns = @JoinColumn(name = "post_id"))
    @Column(name = "user_email")
    private Set<String> likedBy = new HashSet<>();

    @Column(name = "pictureUrl")
    private String pictureUrl;


    @PrePersist
    void prePersist() {
        if (id == null || id.isBlank()) id = NanoIdUtils.randomNanoId();
        createdAt  = LocalDateTime.now();
        updatedAt  = createdAt;
    }

    @OneToMany(mappedBy = "post", cascade = CascadeType.ALL, orphanRemoval = true)
    private java.util.List<CommentEntity> comments = new java.util.ArrayList<>();


    @PreUpdate
    void preUpdate() { updatedAt = LocalDateTime.now(); }

    public String getId()            { return id; }
    public String getAuthorName()    { return authorName; }
    public String getAuthorEmail()   { return authorEmail; }
    public String getTitle()         { return title; }
    public String getMessage()       { return message; }
    public long   getLikes()         { return likes; }
    public long   getViews()         { return views; }
    public LocalDateTime getCreatedAt() { return createdAt; }
    public LocalDateTime getUpdatedAt() { return updatedAt; }
    public Set<String> getLikedBy() { return likedBy; }

    public void setAuthorName(String n)     { this.authorName = n; }
    public void setAuthorEmail(String e)    { this.authorEmail = e; }
    public void setTitle(String t)          { this.title = t; }
    public void setMessage(String m)        { this.message = m; }
    public void setLikes(long l)            { this.likes = l; }
    public void setViews(long v)            { this.views = v; }

    public String getAvatarUrl() {
        return avatarUrl;
    }

    public void setAvatarUrl(String avatarUrl) {
        this.avatarUrl = avatarUrl;
    }
    public void addLike(String email) {
        likedBy.add(email);
        this.likes = likedBy.size();
    }

    public void removeLike(String email) {
        likedBy.remove(email);
        this.likes = likedBy.size();
    }

    public boolean isLikedByUser() {
        return likedByUser;
    }

    public void setLikedByUser(boolean likedByUser) {
        this.likedByUser = likedByUser;
    }

    public String getForumCategory() {
        return forumCategory;
    }

    public void setForumCategory(String forumCategory) {
        this.forumCategory = forumCategory;
    }
    public String getPictureUrl() {
        return pictureUrl;
    }
    public void setPictureUrl(String pictureUrl) {
        this.pictureUrl = pictureUrl;
    }
}

package Forum;
import jakarta.ws.rs.FormParam;
import java.io.InputStream;

public class PostCreateRequest {

    @FormParam("title")

    public String title;

    @FormParam("message")

    public String message;

    @FormParam("authorName")

    public String authorName;

    @FormParam("forumCategory")

    public String forumCategory;

    @FormParam("picture")

    public InputStream picture;

    @FormParam("picture")
    public String pictureFileName;
}


---

    @POST
    @Transactional
    @RolesAllowed("admin")
    @Consumes(MediaType.MULTIPART_FORM_DATA)
    @Produces(MediaType.APPLICATION_JSON)
    public Response create(ExtendedLearningContentDto dto) {
        if (dto.questionsJson != null && !dto.questionsJson.isEmpty()) {
            try {
                ObjectMapper mapper = new ObjectMapper();
                dto.questions = mapper.readValue(dto.questionsJson,
                        new com.fasterxml.jackson.core.type.TypeReference<List<QuestionDTO>>() {});
                System.out.println("✅ Parsed questions count: " + dto.questions.size());
            } catch (Exception e) {
                System.out.println("❌ Failed to parse questions JSON");
                e.printStackTrace();
                throw new BadRequestException("Invalid format for questions JSON");
            }
        }

        String lessonId = UUID.randomUUID().toString().replace("-", "").substring(0, 21);
        LearningContent lc = new LearningContent();
        lc.setId(lessonId);
        lc.setTitle(dto.title);
        lc.setDescription(dto.description);
        lc.setCategory(dto.category);
        lc.setThumbnailUrl(dto.thumbnailUrl);
        lc.setAuthorName(jwt.getClaim("name"));
        lc.setAuthorEmail(jwt.getSubject());
        lc.setAuthorRole("admin");
        lc.setClickCount(0L);
        lc.setAuthorAvatarUrl(dto.authorAvatarUrl);
        lc.setCreatedAt(LocalDateTime.now());
        lc.setMaxAttempts(Optional.ofNullable(dto.maxAttempts).orElse(1));
        lc.setContentType(dto.contentType);
        lc.setAssignType(dto.assignType);
        lc.setAssignedUserIds(dto.assignedUserIds);
        lc.setAssignedTeamIds(dto.assignedTeamIds);
        lc.setDueDate(dto.dueDate);

        if (dto.videoStream != null) {
            try {
                String originalName = dto.videoMeta != null ? dto.videoMeta.fileName() : "video.mp4";
                String filename = lessonId + ".mp4";
                java.nio.file.Path dir = java.nio.file.Paths.get("uploads/video");
                java.nio.file.Files.createDirectories(dir);
                java.nio.file.Path videoPath = dir.resolve(filename);
                java.nio.file.Files.copy(dto.videoStream, videoPath, StandardCopyOption.REPLACE_EXISTING);

                System.out.println("Video path : " + videoPath.toString());
                System.out.println("Original file name: " + originalName);
                lc.setVideoUrl("uploads/video/" + filename);
            } catch (Exception e) {
                throw new InternalServerErrorException("Failed to save video.");
            }
        }

        em.persist(lc);

        String quizId = UUID.randomUUID().toString().replace("-", "").substring(0, 21);
        if (dto.questions != null) {
            for (QuestionDTO q : dto.questions) {
                QuestionEntity qe = new QuestionEntity();
                qe.setId(UUID.randomUUID().toString().replace("-", "").substring(0, 21));
                qe.setLearningContent(lc);
                qe.setQuiz_id(quizId);
                qe.setQuestionText(q.questionText);
                qe.setType(QuestionType.valueOf(q.type.toUpperCase()));
                qe.setPoints(q.points != null ? q.points : 1);
                em.persist(qe);

                if (q.choices != null) {
                    for (ChoiceDTO c : q.choices) {
                        QuestionChoiceEntity ce = new QuestionChoiceEntity();
                        ce.id = UUID.randomUUID().toString().replace("-", "").substring(0, 21);
                        ce.question = qe;
                        ce.choiceText = c.text;
                        ce.isCorrect = c.isCorrect;
                        em.persist(ce);
                    }
                }
            }
        }

        System.out.println("📥 Received new lesson creation request:");
        System.out.println("Title: " + dto.title);
        System.out.println("Description: " + dto.description);
        System.out.println("Category: " + dto.category);
        System.out.println("Thumbnail URL: " + dto.thumbnailUrl);
        System.out.println("Assign Type: " + dto.assignType);
        System.out.println("Assigned Users: " + (dto.assignedUserIds != null ? dto.assignedUserIds : "[]"));
        System.out.println("Assigned Teams: " + (dto.assignedTeamIds != null ? dto.assignedTeamIds : "[]"));
        System.out.println("Due Date: " + dto.dueDate);
        System.out.println("Author Avatar URL: " + dto.authorAvatarUrl);
        System.out.println("Max Attempts: " + dto.maxAttempts);
        System.out.println("Video Meta: " + (dto.videoMeta != null ? dto.videoMeta.fileName() : "No file meta"));
        System.out.println("Questions count: " + (dto.questions != null ? dto.questions.size() : 0));

        return Response.created(URI.create("/learning/" + lc.getId()))
                .entity(LearningContentDto.fromEntity(lc))
                .build();
    }
package Forum;
import jakarta.ws.rs.FormParam;
import org.jboss.resteasy.reactive.PartType;

import java.io.InputStream;

public class PostCreateRequest {

    @FormParam("title")

    public String title;

    @FormParam("message")

    public String message;

    @FormParam("authorName")

    public String authorName;

    @FormParam("forumCategory")

    public String forumCategory;

    @FormParam("picture")
    @PartType("application/octet-stream")

    public InputStream picture;

    @FormParam("picture")
    public String pictureFileName;
}
 const formData = new FormData();
        formData.append("title", title);
        formData.append("message", message);
        formData.append("authorName", user?.name ?? "Unknown");
        formData.append("forumCategory", forumCategory);
        if (picture) {
            formData.append("picture", picture);
        }
