@PUT
@Path("/{id}")
@Transactional
@RolesAllowed({ "admin", "supervisor", "administrator" })
public LearningContentDto update(@PathParam("id") String id, LearningContentDto dto, @Context SecurityContext securityContext) {
    String currentUser = securityContext.getUserPrincipal().getName();
    String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
    log.info("User '{}' called method '{}' to update Learning content with ID: {}", currentUser, methodName, id);

    LearningContent lc = em.find(LearningContent.class, id);
    if (lc == null) {
        log.error("Learning content with ID: {} not found in method -> {}", id, methodName);
        throw new NotFoundException();
    }

    // ----- อัปเดตข้อมูลทั่วไป (ถ้ามีส่งมา) -----
    if (dto.title() != null) lc.setTitle(dto.title());
    if (dto.description() != null) lc.setDescription(dto.description());
    if (dto.category() != null) lc.setCategory(dto.category());
    if (dto.thumbnailUrl() != null) lc.setThumbnailUrl(dto.thumbnailUrl());
    if (dto.authorAvatarUrl() != null) lc.setAuthorAvatarUrl(dto.authorAvatarUrl());

    // ----- อัปเดตการมอบหมาย -----
    if (dto.assignType() != null) lc.setAssignType(dto.assignType()); // "all" | "specific" | "team"

    if (dto.assignedUserIds() != null) {
        // รวมเดิม+ใหม่ แบบไม่ซ้ำ (ถ้าอยาก "แทนที่" ให้เซ็ตตรงๆ)
        List<String> existing = Optional.ofNullable(lc.getAssignedUserIds()).orElseGet(ArrayList::new);
        LinkedHashSet<String> merged = new LinkedHashSet<>(existing);
        merged.addAll(dto.assignedUserIds());
        lc.setAssignedUserIds(new ArrayList<>(merged));
    }

    if (dto.assignedTeamIds() != null) {
        List<String> existing = Optional.ofNullable(lc.getAssignedTeamIds()).orElseGet(ArrayList::new);
        LinkedHashSet<String> merged = new LinkedHashSet<>(existing);
        merged.addAll(dto.assignedTeamIds());
        lc.setAssignedTeamIds(new ArrayList<>(merged));
    }

    if (dto.dueDate() != null) {
        lc.setDueDate(dto.dueDate());
    }

    log.info("Learning content with ID: {} updated successfully in method -> {}", id, methodName);
    return LearningContentDto.fromEntity(lc);
}
