{
    "message": "Request failed with status code 500",
    "name": "AxiosError",
    "stack": "AxiosError: Request failed with status code 500\n    at settle (http://localhost:5173/node_modules/.vite/deps/axios.js?v=b84471ba:1253:12)\n    at XMLHttpRequest.onloadend (http://localhost:5173/node_modules/.vite/deps/axios.js?v=b84471ba:1585:7)\n    at Axios.request (http://localhost:5173/node_modules/.vite/deps/axios.js?v=b84471ba:2143:41)\n    at async fetchMyTeams (http://localhost:5173/src/pages/Supervisor/Supervisordashboard.tsx?t=1759818207985:218:24)\n    at async Promise.all (index 0)\n    at async http://localhost:5173/src/pages/Supervisor/Supervisordashboard.tsx?t=1759818207985:240:9",
    "config": {
        "transitional": {
            "silentJSONParsing": true,
            "forcedJSONParsing": true,
            "clarifyTimeoutError": false
        },
        "adapter": [
            "xhr",
            "http",
            "fetch"
        ],
        "transformRequest": [
            null
        ],
        "transformResponse": [
            null
        ],
        "timeout": 0,
        "xsrfCookieName": "XSRF-TOKEN",
        "xsrfHeaderName": "X-XSRF-TOKEN",
        "maxContentLength": -1,
        "maxBodyLength": -1,
        "env": {},
        "headers": {
            "Accept": "application/json, text/plain, */*",
            "Authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJyb2xlIjoic3VwZXJ2aXNvciIsInVwbiI6InN2cEBnbWFpbC5jb20iLCJlbWFpbCI6InN2cEBnbWFpbC5jb20iLCJuYW1lIjoiUmF0Y2hhbm9uIFNWUCIsImlzcyI6Imh0dHBzOi8vZXhhbXBsZS5jb20vaXNzdWVyIiwic3ViIjoic3ZwQGdtYWlsLmNvbSIsImdyb3VwcyI6WyJzdXBlcnZpc29yIl0sImlhdCI6MTc1OTgxNzU1MiwiZXhwIjoxNzU5ODI0NzUyLCJqdGkiOiJlZjZlYjczNy04YjJhLTQ4YWItYjE4Mi03NjZjZjA1ZTZiNDQifQ.nftyELhjKd8e39cpAJOXfKWlhB2EC5_hgBY8sUcgBP8HCVnm-1YJYKPD171u5WahcIf7CuEIAN9yp7EyQ0Zhqila5LU91QQ3u9RsJI9rQkJAzNdDVhNpYSeCsduCusg_It1TFMYTENZLTlgupfJF_LnpW1UI4-IwzdpaXyKAI1KWoquO3DgdGpgNMw4HC1UWjeB9vDnMDFH2pMMJpdSFiEtg-svG9D7NGDzxdGoh_s8DzE1Bt4wl4wVBYMeiZ_zSWnwOuGMF9U8FNctJUHSzfD2IU-3Sfs1QjpPQt3Nl0K3aH3Eg49l8YATWkwaw0IzcxBK4eJrBvr052zuti_sr8A"
        },
        "baseURL": "/",
        "params": {
            "userId": "svp@gmail.com"
        },
        "method": "get",
        "url": "/api/teams/my-teams",
        "allowAbsoluteUrls": true
    },
    "code": "ERR_BAD_RESPONSE",
    "status": 500
}

package Testing;

import dto.CreateTeamRequestSimple;
import dto.TeamSummary;
import jakarta.inject.Inject;
import jakarta.persistence.EntityManager;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import model.MemberEntity;
import model.TeamEntity;

import java.net.URI;
import java.util.*;
import java.util.stream.Collectors;

@Path("/teams") // ให้ตรงกับ frontend
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class TeamResource {

    @Inject
    EntityManager em;

    // ---------- Helpers ----------
    private static String genId() {
        return UUID.randomUUID().toString().replace("-", "").substring(0, 21);
    }

    private static TeamSummary toSummary(TeamEntity team) {
        String supervisorId = null;
        List<String> memberIds = new ArrayList<>();
        if (team.getMemberEntities() != null) {
            for (MemberEntity m : team.getMemberEntities()) {
                if (m == null) continue;
                if ("supervisor".equalsIgnoreCase(m.getRole())) {
                    supervisorId = m.getId();   // << ใช้ memberId
                } else {
                    memberIds.add(m.getId());   // << ใช้ memberId
                }
            }
        }
        return new TeamSummary(team.getId(), team.getName(), supervisorId, memberIds);
    }

    // ---------- APIs ----------

    @GET
    public List<TeamSummary> getTeams() {
        List<TeamEntity> teams = em.createQuery(
                "SELECT DISTINCT t FROM TeamEntity t LEFT JOIN FETCH t.memberEntities",
                TeamEntity.class
        ).getResultList();
        return teams.stream().map(TeamResource::toSummary).toList();
    }

    @GET
    @Path("/{id}")
    public TeamSummary getTeam(@PathParam("id") String id) {
        TeamEntity team = em.find(TeamEntity.class, id);
        if (team == null) throw new NotFoundException("Team not found");
        team.getMemberEntities().size(); // ensure members loaded
        return toSummary(team);
    }

    // ดึงทีมที่ผู้ใช้สังกัด (เทียบด้วย memberId = อีเมล/ไอดีของผู้ใช้)
    @GET
    @Path("/my-teams/{userId}")
    public List<TeamSummary> getTeamsByUserId(@PathParam("userId") String userId) {
        List<TeamEntity> teams = em.createQuery(
                "SELECT DISTINCT t FROM TeamEntity t " +
                        "JOIN t.memberEntities m " +
                        "LEFT JOIN FETCH t.memberEntities " +
                        "WHERE LOWER(m.memberId) = LOWER(:uid)",    // << ใช้ m.memberId
                TeamEntity.class
        ).setParameter("uid", userId).getResultList();

        return teams.stream().map(TeamResource::toSummary).toList();
    }

    // สำรอง: เรียกแบบ query param ถ้ากังวล path ที่มี '@'
    @GET
    @Path("/my-teams")
    public List<TeamSummary> getTeamsByUserIdQuery(@QueryParam("userId") String userId) {
        if (userId == null || userId.isBlank()) throw new BadRequestException("userId is required");
        List<TeamEntity> teams = em.createQuery(
                "SELECT DISTINCT t FROM TeamEntity t " +
                        "JOIN t.memberEntities m " +
                        "LEFT JOIN FETCH t.memberEntities " +
                        "WHERE LOWER(m.memberId) = LOWER(:uid)",    // << ใช้ m.memberId
                TeamEntity.class
        ).setParameter("uid", userId).getResultList();

        return teams.stream().map(TeamResource::toSummary).toList();
    }

    @POST
    @Transactional
    public Response createTeam(CreateTeamRequestSimple request) {
        if (request == null || request.name == null || request.name.trim().isEmpty()) {
            throw new BadRequestException("Team name is required");
        }
        if (request.supervisorId == null || request.supervisorId.isBlank()) {
            throw new BadRequestException("supervisorId is required");
        }
        if (request.memberIds == null) {
            request.memberIds = List.of();
        }

        TeamEntity team = new TeamEntity();
        team.setId(genId());
        team.setName(request.name.trim());
        team.setDescription(request.description); // optional
        team.setCreateBy(request.createBy);       // optional
        team.setJoinCode(String.format("%06d", new Random().nextInt(1_000_000)));

        List<MemberEntity> members = new ArrayList<>();

        // supervisor เข้าเป็นสมาชิกด้วย
        MemberEntity sup = new MemberEntity();
        sup.setId(genId());
        sup.setTeam(team);
        sup.setMemberId(request.supervisorId);        // << ใช้ memberId
        sup.setRole("supervisor");
        sup.setNameMembers(request.supervisorId);     // << nameMembers
        members.add(sup);

        // สมาชิกทั่วไป
        for (String mid : request.memberIds.stream().filter(Objects::nonNull).collect(Collectors.toSet())) {
            MemberEntity m = new MemberEntity();
            m.setId(genId());
            m.setTeam(team);
            m.setMemberId(mid);                       // << ใช้ memberId
            m.setRole("member");
            m.setNameMembers(mid);                    // << nameMembers
            members.add(m);
        }

        team.setMemberEntities(members);
        em.persist(team);

        return Response.created(URI.create("/api/teams/" + team.getId()))
                .entity(toSummary(team))
                .build();
    }

    @PUT
    @Path("/{id}")
    @Transactional
    public Response updateTeam(@PathParam("id") String id, TeamEntity updatedTeam) {
        TeamEntity team = em.find(TeamEntity.class, id);
        if (team == null) throw new NotFoundException("Team not found");

        if (updatedTeam.getName() != null) {
            team.setName(updatedTeam.getName());
        }
        if (updatedTeam.getDescription() != null) {
            team.setDescription(updatedTeam.getDescription());
        }

        team.getMemberEntities().size();
        return Response.ok(toSummary(team)).build();
    }

    @DELETE
    @Path("/{id}")
    @Transactional
    public Response deleteTeam(@PathParam("id") String id) {
        TeamEntity team = em.find(TeamEntity.class, id);
        if (team == null) throw new NotFoundException("Team not found");
        em.remove(team);
        return Response.noContent().build();
    }

    // ---- จัดการสมาชิก (Supervisor ตั้ง/ถอน Trainer) ----

    @GET
    @Path("/{teamId}/members")
    public List<Map<String, Object>> getTeamMembers(@PathParam("teamId") String teamId) {
        TeamEntity team = em.find(TeamEntity.class, teamId);
        if (team == null) throw new NotFoundException("Team not found");
        team.getMemberEntities().size();

        List<Map<String, Object>> out = new ArrayList<>();
        for (MemberEntity m : team.getMemberEntities()) {
            Map<String, Object> row = new HashMap<>();
            row.put("userId", m.getMemberId());       // FE ใช้คีย์ userId
            row.put("name", m.getNameMembers());      // nameMembers
            row.put("role", m.getRole());
            out.add(row);
        }
        return out;
        // ถ้าอยากคุม serialization สวยกว่านี้ สร้าง DTO เฉพาะสมาชิกทีมได้
    }

    @PUT
    @Path("/{teamId}/members/{userId}/role")
    @Transactional
    public Response setMemberRoleInTeam(
            @PathParam("teamId") String teamId,
            @PathParam("userId") String userId,
            Map<String, String> body
    ) {
        String role = Optional.ofNullable(body.get("role")).orElse("").toLowerCase(Locale.ROOT);
        if (!role.equals("trainer") && !role.equals("member")) {
            throw new BadRequestException("role must be 'trainer' or 'member'");
        }

        TeamEntity team = em.find(TeamEntity.class, teamId);
        if (team == null) throw new NotFoundException("Team not found");
        team.getMemberEntities().size();

        MemberEntity target = team.getMemberEntities().stream()
                .filter(m -> m.getMemberId() != null && m.getMemberId().equalsIgnoreCase(userId)) // << memberId
                .findFirst()
                .orElseThrow(() -> new NotFoundException("Member not found in the team"));

        if ("supervisor".equalsIgnoreCase(target.getRole())) {
            throw new WebApplicationException("Cannot change supervisor role", 409);
        }

        target.setRole(role);
        em.merge(target);

        return Response.ok(getTeamMembers(teamId)).build();
    }

    // ---- join โดยใช้ joinCode ----
    @POST
    @Path("/joining")
    @Transactional
    public Response joinTeamByCode(dto.CreateMemberRequest request) {
        if (request == null || request.joinCode == null || request.joinCode.trim().length() != 6) {
            throw new BadRequestException("Join code is invalid");
        }

        List<TeamEntity> teams = em.createQuery(
                "SELECT DISTINCT t FROM TeamEntity t LEFT JOIN FETCH t.memberEntities WHERE t.joinCode = :joinCode",
                TeamEntity.class
        ).setParameter("joinCode", request.joinCode).getResultList();

        if (teams.isEmpty()) {
            throw new BadRequestException("Join code is invalid");
        }

        TeamEntity team = teams.get(0);

        boolean alreadyExists = team.getMemberEntities().stream()
                .anyMatch(member -> member.getMemberId() != null &&
                        member.getMemberId().equalsIgnoreCase(request.userId)); // << เทียบกับ userId จาก req

        if (alreadyExists) {
            throw new WebApplicationException("User already in the team", 409);
        }

        MemberEntity member = new MemberEntity();
        member.setId(genId());
        member.setTeam(team);
        member.setMemberId(request.userId);                   // << memberId
        member.setRole(Optional.ofNullable(request.getRole()).orElse("member"));
        member.setNameMembers(Optional.ofNullable(request.userName).orElse(request.userId)); // nameMembers
        team.getMemberEntities().add(member);

        em.persist(member);
        return Response.ok().entity(toSummary(team)).build();
    }
}
import { useEffect, useMemo, useState } from "react";
import axios from "axios";
import SupervisorSidebarWidget from "./Widgets/SupervisorSideBar";
import UserListWidget from "./Widgets/UserListWidget"; // optional (global role mgmt)

// ----------------------
// Axios client + token
// ----------------------
const axiosClient = axios.create({
  baseURL: import.meta.env.VITE_API_BASE_URL || "/",
});
axiosClient.interceptors.request.use((config) => {
  const token = localStorage.getItem("token") || sessionStorage.getItem("token");
  if (token) {
    config.headers = { ...(config.headers || {}), Authorization: `Bearer ${token}` };
  }
  return config;
});

// ----------------------
// Types
// ----------------------
export type User = {
  id: string; // global userId/email
  name: string;
  email: string;
  role: string; // global role (system)
};

export type Team = {
  id: string;
  name: string;
  supervisorId: string;
  memberIds: string[];
};

export type TeamMember = {
  userId: string; // maps to MemberEntity.memberId
  name?: string;  // maps to MemberEntity.nameMembers
  role: string;   // member | trainer | supervisor (per-team role)
};

// ----------------------
// Team Members Manager (ตั้ง/ถอน Trainer ในทีม สำหรับ Supervisor)
// ----------------------
function TeamMembersManager({ teamId, canManage }: { teamId: string; canManage: boolean }) {
  const [members, setMembers] = useState<TeamMember[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selected, setSelected] = useState<TeamMember | null>(null);

  const fetchMembers = async () => {
    try {
      const { data } = await axiosClient.get<TeamMember[]>(`/api/teams/${teamId}/members`);
      setMembers(data);
      if (data?.length) setSelected((prev) => prev && data.find(d => d.userId === prev.userId) || data[0]);
      setError(null);
    } catch (e: any) {
      console.error(e);
      setError(e?.response?.data?.message || "โหลดสมาชิกทีมไม่สำเร็จ");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => { setLoading(true); fetchMembers(); /* eslint-disable-next-line react-hooks/exhaustive-deps */ }, [teamId]);

  const setTrainer = async (userId: string, nextRole: 'trainer' | 'member') => {
    if (!canManage) return;
    try {
      await axiosClient.put(`/api/teams/${teamId}/members/${encodeURIComponent(userId)}/role`, { role: nextRole });
      // รีเฟรชจากแหล่งจริง เพื่อให้ state ตรง backend เสมอ
      const { data } = await axiosClient.get<TeamMember[]>(`/api/teams/${teamId}/members`);
      setMembers(data);
      const after = data.find(m => m.userId === userId);
      setSelected(after ?? null);
    } catch (e: any) {
      alert(e?.response?.data?.message || "อัปเดตบทบาทในทีมไม่สำเร็จ");
    }
  };

  if (loading) return <div className="text-sm opacity-70">กำลังโหลดสมาชิกทีม...</div>;
  if (error) return <div className="text-sm text-red-600">{error}</div>;

  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
      {/* รายชื่อสมาชิก */}
      <div className="md:col-span-1 rounded-2xl border bg-white/60 overflow-hidden">
        <div className="px-4 py-3 border-b font-semibold">สมาชิกทีม</div>
        <div className="max-h-96 overflow-auto divide-y">
          {members.map((m) => (
            <button
              key={m.userId}
              onClick={() => setSelected(m)}
              className={`w-full text-left p-3 hover:bg-gray-50 ${selected?.userId === m.userId ? 'bg-gray-50' : ''}`}
            >
              <div className="font-medium">{m.name || m.userId}</div>
              <div className="text-xs opacity-70">บทบาทในทีม: {m.role}</div>
            </button>
          ))}
        </div>
      </div>

      {/* รายละเอียดสมาชิก */}
      <div className="md:col-span-2 rounded-2xl border bg-white/60 p-4">
        {selected ? (
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <div>
                <div className="text-lg font-semibold">{selected.name || selected.userId}</div>
                <div className="text-sm opacity-70">บทบาทในทีมปัจจุบัน: {selected.role}</div>
              </div>
            </div>
            {canManage && selected.role !== 'supervisor' && (
              <div className="flex gap-2">
                {selected.role !== 'trainer' ? (
                  <button className="rounded-xl px-4 py-2 border" onClick={() => setTrainer(selected.userId, 'trainer')}>
                    ตั้งเป็น Trainer
                  </button>
                ) : (
                  <button className="rounded-xl px-4 py-2 border" onClick={() => setTrainer(selected.userId, 'member')}>
                    ถอน Trainer
                  </button>
                )}
              </div>
            )}
          </div>
        ) : (
          <div className="text-sm opacity-70">เลือกสมาชิกทางซ้ายเพื่อดูรายละเอียด</div>
        )}
      </div>
    </div>
  );
}

// ----------------------
// SupervisorDashboard
// ----------------------
export default function SupervisorDashboard() {
  const [teams, setTeams] = useState<Team[]>([]);
  const [selectedTeamId, setSelectedTeamId] = useState<string | null>(null);
  const [users, setUsers] = useState<User[]>([]); // optional (global role mgmt)
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);
  const [currentUserId, setCurrentUserId] = useState<string | null>(null);

  // --- helpers: หา userId จากหลายแหล่ง ---
  const parseJwt = (token: string | null): any | null => {
    if (!token) return null;
    const parts = token.split('.');
    if (parts.length !== 3) return null;
    try {
      const payload = JSON.parse(atob(parts[1].replace(/-/g, '+').replace(/_/g, '/')));
      return payload;
    } catch { return null; }
  };

  const resolveCurrentUserId = async () => {
    // 1) explicit storage
    const stored = localStorage.getItem('userId') || sessionStorage.getItem('userId');
    if (stored) return stored;

    // 2) decode from JWT (sub | userId | email)
    const token = localStorage.getItem('token') || sessionStorage.getItem('token');
    const payload = parseJwt(token);
    const jwtId = payload?.sub || payload?.userId || payload?.email || null;
    if (jwtId) return String(jwtId);

    // 3) call /api/profile/me (ให้ backend คืน { id/email/... })
    try {
      const { data } = await axiosClient.get<any>('/api/profile/me');
      return data?.id || data?.userId || data?.email || null;
    } catch {
      return null;
    }
  };

  // ใช้แบบ query param เพื่อลดปัญหา path ที่มี '@'
  const fetchMyTeams = async (uid: string) => {
    try {
      const { data } = await axiosClient.get<Team[]>("/api/teams/my-teams", { params: { userId: uid } });
      setTeams(data || []);
      if (data?.length && !selectedTeamId) setSelectedTeamId(data[0].id);
    } catch (e: any) {
      console.error(e);
      setError(e?.response?.data?.message || e?.message || 'โหลดทีมของฉันไม่สำเร็จ');
    }
  };

  const fetchUsers = async () => {
    try {
      const { data } = await axiosClient.get<User[]>("/api/profile/users/for-supervisor");
      setUsers(data);
    } catch (err) {
      console.warn('โหลดรายชื่อผู้ใช้ (optional) ไม่สำเร็จ');
    }
  };

  // init currentUserId -> แล้วค่อยโหลดทีม
  useEffect(() => {
    (async () => {
      setLoading(true);
      const uid = await resolveCurrentUserId();
      if (uid) {
        setCurrentUserId(uid);
        await Promise.all([fetchMyTeams(uid), fetchUsers()]);
      } else {
        setError('ไม่พบ userId ของผู้ใช้ปัจจุบัน — ตรวจสอบการเข้าสู่ระบบ/โทเคน');
      }
      setLoading(false);
    })();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const assignRoleGlobal = async (userId: string, role: string) => {
    const confirmAssign = window.confirm(`Are you sure you want to assign role "${role}" to this user?`);
    if (!confirmAssign) return;
    try {
      await axiosClient.put(`/api/profile/users/${userId}/role`, { role });
      alert(`Role updated to ${role}`);
      fetchUsers();
    } catch (err) {
      console.error(err);
      alert('Failed to update role');
    }
  };

  const selectedTeam = useMemo(() => teams.find(t => t.id === selectedTeamId) || null, [teams, selectedTeamId]);

  if (loading) {
    return (
      <div className="flex h-screen">
        <SupervisorSidebarWidget />
        <div className="flex-1 p-8">กำลังโหลด...</div>
      </div>
    );
  }

  return (
    <div className="flex h-screen">
      <SupervisorSidebarWidget />

      <div className="flex-1 p-8 overflow-y-auto space-y-8">
        <div className="flex justify-between items-center mb-2">
          <h1 className="text-3xl font-bold">Supervisor Dashboard</h1>
        </div>

        {error && (
          <div className="rounded-xl border border-red-200 bg-red-50 p-3 text-red-700 flex items-center justify-between">
            <span>{error}</span>
            {!currentUserId && (
              <button
                className="ml-3 rounded-lg border px-3 py-1"
                onClick={async () => {
                  setLoading(true);
                  const uid = await resolveCurrentUserId();
                  if (uid) {
                    setCurrentUserId(uid);
                    setError(null);
                    await fetchMyTeams(uid);
                  }
                  setLoading(false);
                }}
              >
                ลองดึงข้อมูลผู้ใช้ใหม่
              </button>
            )}
          </div>
        )}

        {/* แถวเลือกทีมของฉัน */}
        <div className="rounded-2xl border bg-white/60 p-4">
          <div className="mb-3 font-semibold">ทีมของฉัน</div>
          {teams.length ? (
            <div className="flex gap-2 flex-wrap">
              {teams.map((t) => (
                <button
                  key={t.id}
                  onClick={() => setSelectedTeamId(t.id)}
                  className={`rounded-xl px-3 py-2 border ${selectedTeamId === t.id ? 'bg-black text-white' : 'bg-white'}`}
                >
                  {t.name}
                </button>
              ))}
            </div>
          ) : (
            <div className="text-sm opacity-70">ยังไม่มีทีมที่คุณดูแล</div>
          )}
        </div>

        {/* รายละเอียดทีมที่เลือก + จัดการสมาชิก (ตั้ง Trainer) */}
        {selectedTeam && (
          <div className="rounded-2xl border bg-white/60 p-4">
            <div className="mb-3">
              <div className="text-lg font-semibold">รายละเอียดทีม: {selectedTeam.name}</div>
              <div className="text-sm opacity-70">ตั้ง/ถอน Trainer ให้สมาชิกในทีมนี้</div>
            </div>
            <TeamMembersManager teamId={selectedTeam.id} canManage={true} />
          </div>
        )}

        {/* (ตัวเลือก) ส่วนเดิมสำหรับจัดการ global role ของผู้ใช้ทั้งหมด */}
        {false && (
          <div className="space-y-3">
            <p className="opacity-80">Manage user roles (global)</p>
            <UserListWidget users={users} assignRole={assignRoleGlobal} error={null} />
          </div>
        )}
      </div>
    </div>
  );
}
