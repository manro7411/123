import { useParams, useNavigate } from "react-router-dom";
import { useEffect, useRef, useState, useContext, useCallback } from "react";
import axios from "axios";
import Sidebar from "../../widgets/SidebarWidget";
import { AuthContext } from "../../Authentication/AuthContext";

// react-pdf (ใช้ path ESM ให้เข้ากับ Vite)
import { Document, Page, pdfjs } from "react-pdf";
import "react-pdf/dist/esm/Page/TextLayer.css";
import "react-pdf/dist/esm/Page/AnnotationLayer.css";

// worker ของ pdf.js (รูปแบบที่เสถียรกับ Vite/ESM)
pdfjs.GlobalWorkerOptions.workerSrc = new URL(
  "pdfjs-dist/build/pdf.worker.min.js",
  import.meta.url
).toString();

import "./lesson.css";

interface Lesson {
  id: string;
  title: string;
  description: string;
  category: string;
  contentType: "video" | "document";
  thumbnailUrl?: string;
  videoUrl?: string;        // เก็บชื่อไฟล์หรือ path (จะ .split('/').pop() ด้านล่าง)
  documentUrl?: string;
  authorName?: string;
  authorEmail?: string;
  authorAvatarUrl?: string;
  quizAttemptLimit?: number;
}

interface Progress {
  lessonId: string;
  percent: number;
  score: number;
  attempts: number;
  maxAttempts: number;
  lastTimestamp: number;
  thumbnailUrl: string;
}

const LessonDetailPage = () => {
  const { id } = useParams<{ id: string }>();
  const { token } = useContext(AuthContext);
  const navigate = useNavigate();

  // ----- Video states -----
  const videoRef = useRef<HTMLVideoElement>(null);
  const lastTimestamp = useRef<number>(0);
  const lastSent = useRef<number>(0);
  const [lastTimestampFromServer, setLastTimestampFromServer] = useState<number | null>(null);

  // ----- General lesson/progress states -----
  const [lesson, setLesson] = useState<Lesson | null>(null);
  const [progressPercent, setProgressPercent] = useState(0);
  const [loading, setLoading] = useState(true);

  // ----- Quiz states -----
  const [showQuiz, setShowQuiz] = useState(false);
  const [hasTakenQuiz, setHasTakenQuiz] = useState(false);
  const [attempts, setAttempts] = useState(0);
  const [maxAttempts, setMaxAttempts] = useState(1);
  const [quizPassed, setQuizPassed] = useState(false);

  // ----- PDF states -----
  const [currentPage, setCurrentPage] = useState(0); // 0-based (react-pdf ต้อง +1 ตอนส่งให้ <Page/>)
  const [numPages, setNumPages] = useState(0);
  const [isDocLoading, setIsDocLoading] = useState(true);
  const [docError, setDocError] = useState<string | null>(null);
  const [scale, setScale] = useState(1.0);

  // =========================
  // Fetch lesson
  // =========================
  useEffect(() => {
    axios
      .get<Lesson>(`/api/learning/${id}`)
      .then((res) => setLesson(res.data))
      .catch(() => alert("Lesson not found"))
      .finally(() => setLoading(false));
  }, [id]);

  // =========================
  // Fetch progress for lesson
  // =========================
  useEffect(() => {
    if (!lesson || !token) return;

    axios
      .get<Progress[]>(`/api/user/progress`, {
        headers: { Authorization: `Bearer ${token}` },
      })
      .then((res) => {
        const found = res.data.find((p) => p.lessonId === lesson.id);
        if (!found) {
          setLastTimestampFromServer(0);
          return;
        }

        setAttempts(found.attempts);
        setMaxAttempts(found.maxAttempts);
        setQuizPassed(found.score > 0);
        setHasTakenQuiz(found.attempts >= found.maxAttempts);
        setProgressPercent(found.percent);

        if (typeof found.lastTimestamp === "number" && found.lastTimestamp > 0) {
          setLastTimestampFromServer(found.lastTimestamp);
          lastTimestamp.current = found.lastTimestamp;
        } else {
          setLastTimestampFromServer(0);
        }
      })
      .catch(() => console.error("❌ Failed to fetch progress"));
  }, [lesson, token]);

  // =========================
  // Reliable restore playback (seek) สำหรับ video
  // - รอจน seekable พร้อม
  // - บน iOS/safari อาจต้อง play แล้ว pause ก่อนถึงจะ seek ได้
  // =========================
  const restorePlayback = useCallback((t: number) => {
    const v = videoRef.current;
    if (!v || !(t > 0)) return;

    const trySeek = (retries = 12) => {
      const video = videoRef.current;
      if (!video) return;

      const durationReady = Number.isFinite(video.duration) && video.duration > 0;
      const seekableReady =
        video.seekable &&
        video.seekable.length > 0 &&
        t <= video.seekable.end(video.seekable.length - 1);

      if (!durationReady || !seekableReady) {
        if (retries > 0) {
          setTimeout(() => trySeek(retries - 1), 200);
        } else {
          console.warn("Seek not ready, giving up");
        }
        return;
      }

      const onSeeked = () => {
        video.removeEventListener("seeked", onSeeked);
        // console.log("✅ Seeked to", video.currentTime);
      };
      video.addEventListener("seeked", onSeeked, { once: true });

      // safari/iOS บางครั้งต้อง play ก่อนถึงจะยอม seek
      video.play().catch(() => {}).finally(() => {
        if (!video.paused) video.pause();
        video.currentTime = t;
      });
    };

    trySeek();
  }, []);

  // =========================
  // Video events/intervals
  // =========================
  const handleLoadedMetadata = () => {
    const video = videoRef.current;
    // console.log("LoadedMetadata", { duration: video?.duration, lastTimestampFromServer });
    if (
      video &&
      lastTimestampFromServer !== null &&
      lastTimestampFromServer > 0 &&
      Number.isFinite(video.duration) &&
      lastTimestampFromServer < video.duration
    ) {
      restorePlayback(lastTimestampFromServer);
    }
  };

  // ถ้า lastTimestampFromServer มาทีหลัง metadata
  useEffect(() => {
    const v = videoRef.current;
    if (!v) return;
    if (
      lastTimestampFromServer &&
      lastTimestampFromServer > 0 &&
      Number.isFinite(v.duration)
    ) {
      restorePlayback(lastTimestampFromServer);
    }
  }, [lastTimestampFromServer, restorePlayback]);

  const handleTimeUpdate = () => {
    const video = videoRef.current;
    if (!video || !video.duration) return;
    const currentTime = video.currentTime;

    if (Math.abs(currentTime - lastTimestamp.current) > 1) {
      lastTimestamp.current = currentTime;
    }

    const percent = Math.min(100, (currentTime / video.duration) * 100);
    if (percent > progressPercent) {
      setProgressPercent(percent);
    }
  };

  // ส่ง progress ทุก ๆ 2 วิ เฉพาะเมื่อเป็น video
  useEffect(() => {
    if (!lesson || !token || lesson.contentType !== "video") return;

    const timer = setInterval(() => {
      const video = videoRef.current;
      const currentPercent = Math.floor(progressPercent);
      const currentTime = Math.floor(video?.currentTime || 0);

      if (
        video &&
        progressPercent > 0 &&
        progressPercent <= 100 &&
        currentPercent !== lastSent.current &&
        currentTime > 0 &&
        (lastTimestampFromServer === null || currentTime >= lastTimestampFromServer)
      ) {
        lastSent.current = currentPercent;
        lastTimestamp.current = currentTime;

        axios
          .put(
            `/api/user/progress/${lesson.id}`,
            {
              percent: currentPercent,
              lastTimestamp: Math.floor(video.currentTime),
              thumbnailUrl: lesson.thumbnailUrl || "",
            },
            {
              headers: {
                Authorization: `Bearer ${token}`,
                "Content-Type": "application/json",
              },
            }
          )
          .catch((err) => console.error("❌ PUT failed:", err));
      }
    }, 2000);

    return () => clearInterval(timer);
  }, [lesson, token, progressPercent, lastTimestampFromServer]);

  // เมื่อครบ 100% แล้วแสดง modal ทำแบบมี debounce เล็กน้อย
  useEffect(() => {
    if (progressPercent >= 100 && !showQuiz && lesson && lesson.quizAttemptLimit) {
      setShowQuiz(true);
    }
  }, [progressPercent, showQuiz, lesson]);

  // =========================
  // PDF handlers
  // =========================
  const onDocLoadSuccess = ({ numPages }: { numPages: number }) => {
    setNumPages(numPages);
    setCurrentPage((p) => Math.min(Math.max(p, 0), Math.max(numPages - 1, 0)));
    setIsDocLoading(false);
    setDocError(null);
  };

  const onDocLoadError = (err: any) => {
    console.error("Error loading PDF:", err);
    setDocError("โหลดเอกสารไม่สำเร็จ");
    setIsDocLoading(false);
  };

  // ปุ่มลัดคีย์บอร์ดสำหรับเปลี่ยนหน้า PDF
  useEffect(() => {
    const onKey = (e: KeyboardEvent) => {
      if (lesson?.contentType !== "document") return;
      if (e.key === "ArrowLeft") {
        setCurrentPage((prev) => Math.max(prev - 1, 0));
      } else if (e.key === "ArrowRight") {
        setCurrentPage((prev) => Math.min(prev + 1, numPages - 1));
      }
    };
    window.addEventListener("keydown", onKey);
    return () => window.removeEventListener("keydown", onKey);
  }, [numPages, lesson?.contentType]);

  if (loading || !lesson) {
    return <div className="p-6 text-gray-400">⏳ Loading lesson…</div>;
  }

  // ทำให้ filename/documentfile เป็นชื่อไฟล์ล้วน (รองรับที่เก็บ path เต็ม)
  const filename = (lesson.videoUrl?.split("/")?.pop() ?? "").trim();
  const documentfile = (lesson.documentUrl?.split("/")?.pop() ?? "").trim();

  const renderContent = () => {
    if (lesson.contentType === "video") {
      if (lastTimestampFromServer === null) {
        return <div className="p-6 text-gray-400">⏳ Loading video…</div>;
      }

      return (
        <video
          ref={videoRef}
          controls
          playsInline
          preload="metadata"
          onLoadedMetadata={handleLoadedMetadata}
          onTimeUpdate={handleTimeUpdate}
          poster={lesson.thumbnailUrl}
          className="w-full h-auto bg-black"
          // ใช้ endpoint v2 ตามที่คุณใช้ (หากมี playbackUrl ในอนาคต ให้ใช้ field นั้นแทน)
          src={`/api/learning/video/v2/${filename}`}
        />
      );
    }

    if (lesson.contentType === "document") {
      return (
        <div className="bg-white p-4 rounded shadow w-full">
          <Document
            file={`/api/learning/document/${documentfile}`}
            onLoadSuccess={onDocLoadSuccess}
            onLoadError={onDocLoadError}
            loading={<p className="text-gray-500">กำลังโหลด PDF…</p>}
            error={<p className="text-red-600">โหลด PDF ไม่สำเร็จ</p>}
          >
            {!docError && (
              <div className="flex justify-center">
                <Page
                  pageNumber={currentPage + 1}
                  renderAnnotationLayer
                  renderTextLayer
                  scale={scale}
                />
              </div>
            )}
          </Document>

          <div className="flex flex-wrap justify-between items-center gap-2 mt-4">
            <div className="flex items-center gap-2">
              <button
                onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 0))}
                disabled={currentPage <= 0 || isDocLoading}
                className="px-4 py-2 bg-gray-200 rounded disabled:opacity-50"
              >
                ◀️ Previous
              </button>
              <button
                onClick={() => setCurrentPage((prev) => Math.min(prev + 1, numPages - 1))}
                disabled={currentPage >= numPages - 1 || isDocLoading}
                className="px-4 py-2 bg-gray-200 rounded disabled:opacity-50"
              >
                Next ▶️
              </button>
            </div>

            <p className="text-sm text-gray-600">
              Page {numPages ? currentPage + 1 : 0} of {numPages || "…"}
            </p>

            <div className="flex items-center gap-2">
              <button
                onClick={() => setScale((s) => Math.max(0.5, +(s - 0.1).toFixed(2)))}
                disabled={isDocLoading}
                className="px-3 py-2 bg-gray-200 rounded disabled:opacity-50"
              >
                − Zoom
              </button>
              <button
                onClick={() => setScale((s) => Math.min(3, +(s + 0.1).toFixed(2)))}
                disabled={isDocLoading}
                className="px-3 py-2 bg-gray-200 rounded disabled:opacity-50"
              >
                + Zoom
              </button>
            </div>
          </div>

          {docError && <div className="mt-3 text-sm text-red-600">{docError}</div>}
        </div>
      );
    }

    return null;
  };

  const renderProgressBar = () => {
    if (lesson.contentType !== "video") return null;
    return (
      <div className="mt-2">
        <div className="h-1 bg-gray-300 rounded">
          <div
            className="h-full bg-blue-600 transition-all rounded"
            style={{ width: `${Math.min(100, Math.max(0, progressPercent))}%` }}
          />
        </div>
        <p className="text-sm text-gray-500 mt-2">
          Attempts: {attempts}/{maxAttempts || lesson.quizAttemptLimit || 1}
        </p>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gray-50 flex">
      <Sidebar />
      <main className="flex-1 p-8">
        <div className="grid grid-cols-1 xl:grid-cols-3 gap-8">
          <div className="xl:col-span-2 space-y-8">
            <div className="w-full rounded-xl overflow-hidden shadow">
              {renderContent()}
            </div>

            <section className="bg-white rounded-xl shadow p-6 space-y-4">
              <h1 className="text-2xl font-bold text-gray-800">{lesson.title}</h1>
              <span className="text-xs font-semibold uppercase text-purple-600">
                {lesson.category}
              </span>
              <p className="text-gray-700">{lesson.description}</p>

              <div className="flex items-center gap-4">
                {lesson.authorAvatarUrl ? (
                  <img
                    src={lesson.authorAvatarUrl}
                    alt="Author Avatar"
                    className="w-10 h-10 rounded-full object-cover border"
                    onError={(e) => ((e.currentTarget.style.display = "none"))}
                  />
                ) : (
                  <div className="w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center text-sm text-white">
                    {lesson.authorName?.charAt(0) ?? "?"}
                  </div>
                )}
                <div>
                  <p className="text-sm font-medium text-gray-800">
                    {lesson.authorName || "Unknown"}
                  </p>
                  <p className="text-xs text-gray-500">{lesson.authorEmail || ""}</p>
                </div>
              </div>

              {renderProgressBar()}
            </section>
          </div>

          <aside className="space-y-6 mt-4 xl:mt-0">
            <div className="bg-white p-4 rounded-xl shadow">
              <h3 className="text-sm font-semibold mb-4 text-gray-700">Schedule</h3>
              {["What is Scrum?", "Scrum Events", "Scrum Artifacts", "Agile Estimation"].map(
                (item, i) => (
                  <div key={i} className="flex items-start space-x-2 mb-4">
                    <div className="w-2 h-2 mt-1 bg-blue-600 rounded-full" />
                    <div>
                      <div className="text-sm font-medium text-gray-800">{item}</div>
                      <div className="text-xs text-gray-500">Tika Sarak S.Pd</div>
                    </div>
                  </div>
                )
              )}
            </div>
          </aside>
        </div>
      </main>

      {showQuiz && (
        <div className="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-xl shadow-xl w-[90%] max-w-md text-center">
            {hasTakenQuiz ? (
              <>
                <h2 className="text-xl font-bold text-red-600 mb-4">❌ Quiz unavailable</h2>
                <p className="text-gray-700 mb-6">
                  {quizPassed
                    ? "You have already passed the quiz."
                    : "You have reached the maximum number of attempts."}
                </p>
                <button
                  onClick={() => {
                    setShowQuiz(false);
                    navigate("/lesson");
                  }}
                  className="bg-gray-500 hover:bg-gray-600 text-white px-6 py-2 rounded-lg"
                >
                  Back to Lessons
                </button>
              </>
            ) : (
              <>
                <h2 className="text-xl font-bold mb-4">🎉 Lesson Completed!</h2>
                <p className="text-gray-700 mb-2">Take a quiz to test your knowledge.</p>
                <button
                  onClick={() => {
                    setShowQuiz(false);
                    navigate(`/quiz/${lesson.id}`);
                  }}
                  className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg"
                >
                  Start Quiz
                </button>
              </>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default LessonDetailPage;
