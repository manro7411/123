import { useParams, useNavigate, Navigate } from "react-router-dom";
import { useEffect, useRef, useState, useContext } from "react";
import axios from "axios";
import Sidebar from "../../widgets/SidebarWidget";
import { AuthContext } from "../../Authentication/AuthContext";
import { Document, Page, pdfjs } from "react-pdf";
import "react-pdf/dist/Page/AnnotationLayer.css";
import "react-pdf/dist/Page/TextLayer.css";

import workerSrc from "pdfjs-dist/build/pdf.worker.min.mjs?url";
pdfjs.GlobalWorkerOptions.workerSrc = workerSrc;

import "./lesson.css";
import LessonFeedbackWidget from "../../widgets/LearningFeedbackFormWidget";

interface Lesson {
  id: string;
  title: string;
  description: string;
  category: string;
  contentType: "video" | "document";
  thumbnailUrl?: string;
  videoUrl?: string;
  documentUrl?: string;
  authorName?: string;
  authorEmail?: string;
  authorAvatarUrl?: string;
  quizAttemptLimit?: number;
}

interface Progress {
  lessonId: string;
  percent: number;
  score: number;
  attempts: number;
  maxAttempts: number;
  lastTimestamp: number;
  thumbnailUrl: string;
  screenTime: number;
}

const LessonDetailPage = () => {
  const { id } = useParams<{ id: string }>();
  const { token } = useContext(AuthContext);
  const navigate = useNavigate();

  const videoRef = useRef<HTMLVideoElement>(null);
  const lastTimestamp = useRef<number>(0);
  const lastSent = useRef<number>(0);

  const [lesson, setLesson] = useState<Lesson | null>(null);
  const [progressPercent, setProgressPercent] = useState(0);
  const [loading, setLoading] = useState(true);
  const [showQuiz, setShowQuiz] = useState(false);
  const [hasTakenQuiz, setHasTakenQuiz] = useState(false);
  const [attempts, setAttempts] = useState(0);
  const [maxAttempts, setMaxAttempts] = useState(1);
  const [quizPassed, setQuizPassed] = useState(false);
  const [lastTimestampFromServer, setLastTimestampFromServer] = useState<number | null>(null);

  const [currentPage, setCurrentPage] = useState(0);
  const [numPages, setNumPages] = useState(0);

  const [documentScreenTime, setDocumentScreenTime] = useState(0);
  const [videoScreenTime, setVideoScreenTime] = useState(0);

  const [, setTimeSpentOnCurrentPage] = useState(0);
  const [canSwitchPage, setCanSwitchPage] = useState(false);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
  useEffect(() => {
    axios
      .get<Lesson>(`/api/learning/${id}`)
      .then((res) => setLesson(res.data))
      .catch(() => alert("Lesson not found"))
      .finally(() => setLoading(false));
  }, [id]);

  // ‡πÇ‡∏´‡∏•‡∏î progress ‡πÄ‡∏î‡∏¥‡∏°
  useEffect(() => {
    if (!lesson || !token) return;

    axios
      .get<Progress[]>(`/api/user/progress`, {
        headers: { Authorization: `Bearer ${token}` },
      })
      .then((res) => {
        const found = res.data.find((p) => p.lessonId === lesson.id);
        if (!found) return;

        setAttempts(found.attempts);
        setMaxAttempts(found.maxAttempts);
        setQuizPassed(found.score > 0);
        setHasTakenQuiz(found.attempts >= found.maxAttempts);
        setProgressPercent(found.percent);
        setDocumentScreenTime(found.screenTime || 0);
        setVideoScreenTime(found.screenTime || 0);

        if (found.lastTimestamp > 0) {
          setLastTimestampFromServer(found.lastTimestamp);
          lastTimestamp.current = found.lastTimestamp;
        }
      })
      .catch(() => console.error("‚ùå Failed to fetch progress"));
  }, [lesson, token]);

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏° video
  const handleLoadedMetadata = () => {
    const video = videoRef.current;
    if (
      video &&
      lastTimestampFromServer !== null &&
      lastTimestampFromServer > 0 &&
      lastTimestampFromServer < video.duration
    ) {
      video.currentTime = lastTimestampFromServer;
    }
  };

  // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å video
  const handleTimeUpdate = () => {
    const video = videoRef.current;
    if (!video || !video.duration) return;

    const currentTime = video.currentTime;

    // üö´ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô skip
    if (currentTime > lastTimestamp.current + 2) {
      alert("‚õî Skipping is not allowed!");
      video.currentTime = lastTimestamp.current;
      return;
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï timestamp ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    lastTimestamp.current = currentTime;

    // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏£‡∏¥‡∏á
    setVideoScreenTime((prev) => prev + 1);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï progress %
    const percent = (currentTime / video.duration) * 100;
    if (percent > progressPercent) {
      setProgressPercent(percent);
    }
  };

  // ‡∏™‡πà‡∏á progress ‡πÑ‡∏õ backend
  useEffect(() => {
    if (!lesson || !token) return;

    const timer = setInterval(() => {
      if (lesson.contentType === "video") {
        const video = videoRef.current;
        const currentPercent = Math.floor(progressPercent);
        const currentTime = Math.floor(video?.currentTime || 0);

        if (
          video &&
          progressPercent > 0 &&
          progressPercent <= 100 &&
          currentPercent !== lastSent.current
        ) {
          lastSent.current = currentPercent;

          axios
            .put(
              `/api/user/progress/${lesson.id}`,
              {
                percent: currentPercent,
                lastTimestamp: currentTime,
                thumbnailUrl: lesson.thumbnailUrl || "",
                screenTime: videoScreenTime, // ‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏£‡∏¥‡∏á
                contentType: lesson.contentType,
              },
              { headers: { Authorization: `Bearer ${token}` } }
            )
            .catch((err) => console.error("‚ùå PUT failed:", err));
        }
      }
    }, 5000); // ‡∏ó‡∏∏‡∏Å ‡πÜ 5 ‡∏ß‡∏¥

    return () => clearInterval(timer);
  }, [lesson, token, progressPercent, videoScreenTime]);

  // Document pagination timer
  useEffect(() => {
    let timer: NodeJS.Timeout | null = null;

    if (lesson?.contentType === "document") {
      setCanSwitchPage(false);
      setTimeSpentOnCurrentPage(0);

      timer = setInterval(() => {
        setTimeSpentOnCurrentPage((prev) => {
          const updatedTime = prev + 1;
          if (updatedTime >= 20) {
            setCanSwitchPage(true);
            clearInterval(timer!);
          }
          return updatedTime;
        });
      }, 1000);
    }

    return () => {
      if (timer) clearInterval(timer);
    };
  }, [currentPage, lesson]);

  // ‡πÄ‡∏õ‡∏¥‡∏î quiz ‡πÄ‡∏°‡∏∑‡πà‡∏≠ progress ‡∏Ñ‡∏£‡∏ö
  useEffect(() => {
    if (progressPercent >= 100 && !showQuiz && lesson?.quizAttemptLimit) {
      setShowQuiz(true);
    }
  }, [progressPercent, showQuiz, lesson]);

  if (loading || !lesson) {
    return <div className="p-6 text-gray-400">‚è≥ Loading lesson‚Ä¶</div>;
  }

  if (!token) return <Navigate to="/" replace />;

  const filename = lesson.videoUrl?.split("/").pop() || "";
  const documentfile = lesson.documentUrl?.split("/").pop() || "";

  const renderContent = () => {
    if (lesson.contentType === "video") {
      if (lastTimestampFromServer === null) {
        return <div className="p-6 text-gray-400">‚è≥ Loading video‚Ä¶</div>;
      }
      return (
        <video
          ref={videoRef}
          controls
          onLoadedMetadata={handleLoadedMetadata}
          onTimeUpdate={handleTimeUpdate}
          poster={lesson.thumbnailUrl}
          className="w-full h-auto bg-black noscrub"
          controlsList="noplaybackrate nodownload noremoteplayback"
          disablePictureInPicture
          src={`/api/learning/video/v2/${filename}`}
        />
      );
    }
    if (lesson.contentType === "document") {
      return (
        <div className="bg-white p-4 rounded shadow w-full">
          <Document
            file={`/api/learning/document/${documentfile}`}
            onLoadSuccess={({ numPages }) => setNumPages(numPages)}
          >
            <Page pageNumber={currentPage + 1} />
          </Document>
          <div className="flex justify-between items-center mt-4">
            <button
              onClick={() => setCurrentPage((p) => Math.max(p - 1, 0))}
              disabled={currentPage <= 0 || !canSwitchPage}
              className="px-4 py-2 bg-gray-200 rounded disabled:opacity-50"
            >
              ‚óÄÔ∏è Previous
            </button>
            <p className="text-sm text-gray-600">
              Page {currentPage + 1} of {numPages}
            </p>
            <button
              onClick={() => setCurrentPage((p) => Math.min(p + 1, numPages - 1))}
              disabled={currentPage >= numPages - 1 || !canSwitchPage}
              className="px-4 py-2 bg-gray-200 rounded disabled:opacity-50"
            >
              Next ‚ñ∂Ô∏è
            </button>
          </div>
        </div>
      );
    }
    return null;
  };

  return (
    <div className="min-h-screen bg-gray-50 flex">
      <Sidebar />
      <main className="flex-1 p-8">
        <div className="grid grid-cols-1 xl:grid-cols-3 gap-8">
          <div className="xl:col-span-2 space-y-8">
            <div className="w-full rounded-xl overflow-hidden shadow">
              {renderContent()}
            </div>

            <section className="bg-white rounded-xl shadow p-6 space-y-4">
              <h1 className="text-2xl font-bold text-gray-800">{lesson.title}</h1>
              <span className="text-xs font-semibold uppercase text-purple-600">
                {lesson.category}
              </span>
              <p className="text-gray-700">{lesson.description}</p>
            </section>
          </div>
          <aside className="space-y-6 mt-4 xl:mt-0">
            {id && <LessonFeedbackWidget token={token} lessonId={id} />}
          </aside>
        </div>
      </main>
    </div>
  );
};

export default LessonDetailPage;
