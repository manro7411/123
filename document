// Reward.tsx
import { useState, useEffect, useMemo } from "react";
import axios from "axios";
import { useUserProfile } from "../Lesson/hooks/useUserProfile";
import { usePointHistory } from "./hooks/userPointHistory";

interface Coupon {
  id: string;
  couponCode: string;
  couponTitle: string;
  couponDescription: string;
  pointsRequired: number;
  active: boolean;
  currentUserPoints?: number;
}

type RewardProps = {
  userPoints: number;
  token: string;
};

// คีย์เฉพาะต่อ "การ์ด" หนึ่งใบ (กันกรณี id ซ้ำ)
const keyOf = (c: Coupon) => `${c.id}::${c.couponCode}`;

const Reward = ({ userPoints, token }: RewardProps) => {
  const [coupons, setCoupons] = useState<Coupon[]>([]);
  // โหลดแบบ “หลายปุ่มพร้อมกันได้” ด้วย Set ของคีย์
  const [loadingKeys, setLoadingKeys] = useState<Set<string>>(new Set());
  // ซ่อนแบบ optimistic เป็นรายการ์ด
  const [hiddenKeys, setHiddenKeys] = useState<Set<string>>(new Set());

  const [remainingPoints, setRemainingPoints] = useState(userPoints);
  useEffect(() => setRemainingPoints(userPoints), [userPoints]);

  const { email } = useUserProfile(token);
  const { HistoryDetails } = usePointHistory(token);

  // ใช้ couponId จากประวัติ เพื่อกัน redeem ซ้ำ (ฝั่ง BE ควรส่งมาแล้ว)
  const redeemedIdSet = useMemo(() => {
    const s = new Set<string>();
    for (const h of HistoryDetails) {
      if (h.isRedeemed && h.couponId) s.add(String(h.couponId));
    }
    return s;
  }, [HistoryDetails]);

  useEffect(() => {
    const fetchCoupons = async () => {
      try {
        const res = await axios.get(
          "http://localhost:8080/coupon-usage-tracking/Get-All-Coupons-For-User",
          { headers: { Authorization: `Bearer ${token}` } }
        );
        if (Array.isArray(res.data)) {
          // เผื่อปลอดภัย: ตัดใบที่เคย redeem ไปแล้วออก
          const filtered = res.data.filter((c: Coupon) => !redeemedIdSet.has(c.id));
          setCoupons(filtered);
        }
      } catch (err) {
        console.error("Failed to fetch coupons:", err);
      }
    };
    fetchCoupons();
  }, [token, redeemedIdSet]);

  const handleRedeem = async (coupon: Coupon) => {
    const k = keyOf(coupon);

    // บล็อกเฉพาะการ์ดนี้เท่านั้น
    if (hiddenKeys.has(k) || loadingKeys.has(k)) return;

    if (remainingPoints < coupon.pointsRequired) {
      alert("คะแนนไม่พอสำหรับคูปองนี้");
      return;
    }

    // optimistic: ซ่อนการ์ดนี้ และตั้งโหลดเฉพาะคีย์นี้
    setHiddenKeys((s) => new Set(s).add(k));
    setLoadingKeys((s) => new Set(s).add(k));

    const nextPoints = remainingPoints - coupon.pointsRequired;

    const payload = {
      id: crypto.randomUUID(),
      userEmail: email,
      couponCode: coupon.couponCode,
      couponTitle: coupon.couponTitle,
      couponDescription: coupon.couponDescription,
      userEarnPoints: coupon.pointsRequired,
      couponId: coupon.id,
      redeemTime: new Date().toISOString(),
      currentUserPoints: nextPoints,
    };

    try {
      await axios.post(
        "http://localhost:8080/coupon-usage-tracking/coupon-redemptions",
        payload,
        { headers: { Authorization: `Bearer ${token}` } }
      );

      // ลบเฉพาะใบที่กด (ตาม id เท่านั้น เพื่อไม่กระทบใบอื่นที่ code ซ้ำ)
      setCoupons((prev) => prev.filter((c) => c.id !== coupon.id));
      setRemainingPoints(nextPoints);
      // ไม่ต้อง alert ก็ได้ ถ้ากวนใจ
      // alert(`Redeemed: ${coupon.couponTitle}`);
    } catch (err: any) {
      // rollback เฉพาะคีย์นี้
      setHiddenKeys((s) => {
        const n = new Set(s);
        n.delete(k);
        return n;
      });
      const status = err?.response?.status;
      alert(status === 409 ? "คุณได้ Redeem คูปองนี้ไปแล้ว" : "Redeem failed.");
      console.error(err);
    } finally {
      // ปลดโหลดเฉพาะคีย์นี้ เพื่อให้ "การ์ดอื่น" กดต่อได้ทันที
      setLoadingKeys((s) => {
        const n = new Set(s);
        n.delete(k);
        return n;
      });
    }
  };

  const visibleCoupons = useMemo(
    () => coupons.filter((c) => !hiddenKeys.has(keyOf(c))),
    [coupons, hiddenKeys]
  );

  return (
    <div className="space-y-4">
      <div className="flex items-baseline justify-between">
        <h2 className="text-xl font-bold text-gray-800">Reward Coupons</h2>
        <div className="text-sm text-gray-700">
          Remaining points: <span className="font-semibold">{remainingPoints}</span>
        </div>
      </div>

      {visibleCoupons.length === 0 ? (
        <div className="text-gray-500">No coupons available.</div>
      ) : (
        visibleCoupons.map((coupon) => {
          const k = keyOf(coupon);
          const isProcessing = loadingKeys.has(k);
          const canRedeem =
            coupon.active &&
            remainingPoints >= coupon.pointsRequired &&
            !isProcessing &&
            !redeemedIdSet.has(coupon.id); // กันซ้ำตามประวัติ

          return (
            <div
              key={k}
              className="flex items-center justify-between bg-blue-100 px-6 py-4 rounded-full shadow text-sm"
            >
              <div>
                <div className="text-base font-semibold text-blue-800">
                  {coupon.couponTitle}
                </div>
                <div className="text-xs text-blue-600">
                  {coupon.pointsRequired} points to redeem
                </div>
                <div className="text-xs text-gray-700">
                  {coupon.couponDescription}
                </div>
              </div>
              <button
                disabled={!canRedeem}
                onClick={() => handleRedeem(coupon)}
                className={`px-4 py-1 rounded-full font-medium ${
                  canRedeem
                    ? "bg-blue-600 hover:bg-blue-700 text-white"
                    : "bg-gray-300 text-gray-500 cursor-not-allowed"
                }`}
              >
                {isProcessing ? "Processing..." : "Redeem"}
              </button>
            </div>
          );
        })
      )}
    </div>
  );
};

export default Reward;
