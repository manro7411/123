package model;

import jakarta.persistence.*;

import java.time.LocalDateTime;
import java.util.UUID;

@Entity
@Table(name = "user_feedback")
public class UserFeedbackEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(columnDefinition = "uuid", updatable = false, nullable = false)
    private UUID id;


    @Column(nullable = false)
    private String feedback;

    @Column(name = "user_email")
    private String userEmail;

    @Column(name = "author_avatar_url")
    private String authorAvatarUrl;

    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "learning_content_id", nullable = false)
    private LearningContent learningContent;

    public String getFeedback() {
        return feedback;
    }

    public void setFeedback(String feedback) {
        this.feedback = feedback;
    }

    public UUID getId() {
        return id;
    }

    public void setId(UUID id) {
        this.id = id;
    }

    public String getUserEmail() {
        return userEmail;
    }

    public void setUserEmail(String userEmail) {
        this.userEmail = userEmail;
    }

    public String getAuthorAvatarUrl() {
        return authorAvatarUrl;
    }

    public void setAuthorAvatarUrl(String authorAvatarUrl) {
        this.authorAvatarUrl = authorAvatarUrl;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public LearningContent getLearningContent() {
        return learningContent;
    }

    public void setLearningContent(LearningContent learningContent) {
        this.learningContent = learningContent;
    }
}
---
package Testing;

import jakarta.inject.Inject;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import model.LearningContent;
import model.UserFeedbackEntity;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

@Path("/feedback")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class UserFeedbackResource {

    @Inject
    EntityManager em;

    @GET
    public List<UserFeedbackEntity> getAllFeedback() {
        return em.createQuery("SELECT f FROM UserFeedbackEntity f", UserFeedbackEntity.class)
                .getResultList();
    }

    @POST
    @Transactional
    public Response createFeedback(UserFeedbackEntity feedback) {
        if (feedback.getLearningContent() == null || feedback.getLearningContent().getId() == null) {
            return Response.status(Response.Status.BAD_REQUEST).entity("Learning content ID is required").build();
        }

        LearningContent learningContent = em.find(LearningContent.class, feedback.getLearningContent().getId());
        if (learningContent == null) {
            return Response.status(Response.Status.BAD_REQUEST).entity("Invalid learning content ID").build();
        }

        feedback.setLearningContent(learningContent);
        feedback.setCreatedAt(LocalDateTime.now());
        em.persist(feedback);

        return Response.status(Response.Status.CREATED).entity(feedback).build();
    }
    @GET
    @Path("/{id}")
    public UserFeedbackEntity getFeedbackById(@PathParam("id") UUID id) {
        return em.find(UserFeedbackEntity.class, id);
    }

    @DELETE
    @Path("/{id}")
    @Transactional
    public Response deleteFeedback(@PathParam("id") UUID id) {
        UserFeedbackEntity feedback = em.find(UserFeedbackEntity.class, id);
        if (feedback != null) {
            em.remove(feedback);
            return Response.noContent().build();
        }
        return Response.status(Response.Status.NOT_FOUND).build();
    }
}
---
import { useEffect, useState } from "react";
import axios from "axios";
import { useUserProfile } from "../pages/Lesson/hooks/useUserProfile";

interface Feedback {
  id: string;
  lessonId: string;
  userEmail: string;
  feedback: string;
  authorAvatarUrl: string;
  createdAt: string;
}

const LessonFeedbackWidget = ({
  token,
  lessonId,
}: {
  token: string;
  lessonId: string;
}) => {
  const [feedbacks, setFeedbacks] = useState<Feedback[]>([]);
  const [newFeedback, setNewFeedback] = useState<string>("");
  const [loading, setLoading] = useState<boolean>(false);

  const { email , avatarUrl} = useUserProfile(token);

  console.log("Lesson ID: ",lessonId)

  useEffect(() => {
    if (!lessonId || !token) return;

    const fetchFeedbacks = async () => {
      setLoading(true);
      try {
        const res = await axios.get(`/api/feedback/${lessonId}`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        const filteredFeedbacks = res.data.filter(
          (fb: Feedback) => fb.lessonId === lessonId
        );
        setFeedbacks(filteredFeedbacks);
      } catch (err) {
        console.error("❌ Failed to fetch feedbacks:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchFeedbacks();
  }, [lessonId, token]);

  console.log("Information",email)
  const handleSubmitFeedback = async () => {
    if (!newFeedback.trim()) {
      alert("❌ Feedback cannot be empty.");
      return;
    }

    try {
      const payload = {
        userEmail: email,
        feedback: newFeedback,
        authorAvatarUrl: avatarUrl,
        learningContent: lessonId
      };
      console.log(payload)
      const res = await axios.post(`/api/feedback`, payload, {
        headers: { Authorization: `Bearer ${token}` },
      });
      alert("✅ Feedback submitted successfully!");
      setFeedbacks((prev) => [...prev, res.data]); // Add new feedback to the list
      setNewFeedback(""); // Clear the input field
    } catch (err) {
      console.error("❌ Failed to submit feedback:", err);
      alert("Failed to submit feedback.");
    }
  };

  return (
    <div className="bg-white p-4 rounded-xl shadow">
      <h3 className="text-sm font-semibold mb-4 text-gray-700">Feedback</h3>
      {loading ? (
        <p className="text-gray-500">Loading feedback...</p>
      ) : feedbacks.length === 0 ? (
        <p className="text-gray-500">No feedback available for this lesson.</p>
      ) : (
        feedbacks.map((feedback) => (
          <div key={feedback.id} className="mb-4">
            <p className="text-sm text-gray-800">{feedback.feedback}</p>
            <p className="text-xs text-gray-500">By: {feedback.userEmail}</p>
          </div>
        ))
      )}
      <textarea
        value={newFeedback}
        onChange={(e) => setNewFeedback(e.target.value)}
        className="h-32 w-full border rounded-lg px-3 py-2 mt-4"
        placeholder="Write your feedback here..."
      />
      <button
        onClick={handleSubmitFeedback}
        className="mt-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
      >
        Submit Feedback
      </button>
    </div>
  );
};

export default LessonFeedbackWidget;
