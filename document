package PointSystem.Resources;

import PointSystem.DTOs.CouponUsageTrackingDTO;
import PointSystem.DTOs.CreatedCouponDTO;
import PointSystem.Entity.CouponEntity;
import PointSystem.Entity.CouponUsageEntity;

import jakarta.annotation.security.RolesAllowed;
import jakarta.inject.Inject;
import jakarta.persistence.EntityManager;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.Context;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.core.SecurityContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.UUID;

@Path("/coupon-usage-tracking")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class CouponUsageTrackingResources {
    public static final String ROLE_USER = "user",
            ROLE_ADMIN = "admin",
            ROLE_EMPLOYEE = "employee",
            ROLE_SUPERVISOR = "supervisor",
            ROLE_ADMINISTRATOR = "administrator";

    public static final Logger log = LoggerFactory.getLogger(CouponUsageTrackingResources.class);

    @Inject
    EntityManager entityManager;

    // 1) ดึงประวัติการใช้คูปองของ user (ใส่ couponId ให้ DTO ด้วย)
    @GET
    @Transactional
    @RolesAllowed(ROLE_USER)
    @Path("coupon-redemptions/{userEmail}")
    public Response getCouponRedemptionsByUser(@PathParam("userEmail") String userEmail,
                                               @Context SecurityContext securityContext) {
        String currentUser = securityContext.getUserPrincipal().getName();
        log.info("User {} is retrieving coupon redemptions for userEmail: {}", currentUser, userEmail);

        try {
            var query = entityManager.createQuery(
                    "SELECT u FROM CouponUsageEntity u WHERE u.userEmail = :userEmail ORDER BY u.redeemTime DESC",
                    CouponUsageEntity.class);
            query.setParameter("userEmail", userEmail);
            var redemptions = query.getResultList();

            var responseList = redemptions.stream().map(u -> {
                var dto = new CouponUsageTrackingDTO();
                dto.setId(u.getId());
                dto.setUserEmail(u.getUserEmail());
                dto.setCouponCode(u.getCouponCode());
                dto.setCouponTitle(u.getCouponTitle());
                dto.setCouponDescription(u.getCouponDescription());
                dto.setUserEarnPoints(u.getUserEarnPoints());
                dto.setCurrentUserPoints(u.getCurrentUserPoints());
                dto.setRedeemTime(u.getRedeemTime());
                dto.setRedeemed(Boolean.TRUE.equals(u.getRedeemed()));
                // ✅ สำคัญ: ส่ง couponId กลับไปให้ UI
                if (u.getCoupon() != null) {
                    dto.setCouponId(u.getCoupon().getId());
                }
                return dto;
            }).toList();

            return Response.ok(responseList).build();
        } catch (Exception e) {
            log.error("Error retrieving coupon redemptions for userEmail: {}", userEmail, e);
            return Response.status(Response.Status.INTERNAL_SERVER_ERROR)
                    .entity("An error occurred while retrieving coupon redemptions.")
                    .build();
        }
    }

    // 2) คืนเฉพาะคูปองที่ user ยังไม่เคย redeem
    @GET
    @Transactional
    @Path("Get-All-Coupons-For-User")
    @RolesAllowed(ROLE_USER)
    public Response getAllCouponsForUser(@Context SecurityContext securityContext) {
        String currentUserEmail = securityContext.getUserPrincipal().getName();
        log.info("User -> {} is retrieving all available coupons (excluding redeemed)", currentUserEmail);

        try {
            var query = entityManager.createQuery(
                    "SELECT c FROM CouponEntity c " +
                    "WHERE c.id NOT IN (SELECT u.coupon.id FROM CouponUsageEntity u WHERE u.userEmail = :userEmail)",
                    CouponEntity.class);
            query.setParameter("userEmail", currentUserEmail);

            var coupons = query.getResultList();

            var responseList = coupons.stream().map(c -> {
                var dto = new CreatedCouponDTO();
                dto.setId(c.getId());
                dto.setCouponCode(c.getCouponCode());
                dto.setCouponTitle(c.getCouponTitle());
                dto.setCouponDescription(c.getCouponDescription());
                dto.setActive(c.getActive());
                dto.setStartDate(c.getStartDate());
                dto.setEndDate(c.getEndDate());
                dto.setPointsRequired(c.getPointRequirement());
                return dto;
            }).toList();

            return Response.ok(responseList).build();
        } catch (Exception e) {
            log.error("Error retrieving coupons for user", e);
            return Response.status(Response.Status.INTERNAL_SERVER_ERROR)
                    .entity("An error occurred while retrieving coupons.")
                    .build();
        }
    }

    // 3) Redeem: กันซ้ำระดับเซิร์ฟเวอร์ (idempotent)
    @POST
    @Transactional
    @Path("coupon-redemptions")
    @RolesAllowed(ROLE_USER)
    public Response createCouponRedemption(CouponUsageTrackingDTO request,
                                           @Context SecurityContext securityContext) {
        String currentUser = securityContext.getUserPrincipal().getName();
        UUID couponID = request.getCouponId();
        log.info("User {} is creating a CouponRedemption for couponId={}", currentUser, couponID);

        if (couponID == null) {
            return Response.status(Response.Status.BAD_REQUEST).entity("Coupon ID is required").build();
        }

        var coupon = entityManager.find(CouponEntity.class, couponID);
        if (coupon == null) {
            log.warn("No CouponEntity found with ID: {}", couponID);
            return Response.status(Response.Status.BAD_REQUEST).entity("Invalid Coupon ID").build();
        }

        // ✅ กัน Redeem ซ้ำ (user + coupon) ถ้ามีแล้วให้ Conflict
        long dupCount = entityManager.createQuery(
                "SELECT COUNT(u) FROM CouponUsageEntity u WHERE u.userEmail = :email AND u.coupon.id = :cid",
                Long.class)
                .setParameter("email", request.getUserEmail())
                .setParameter("cid", couponID)
                .getSingleResult();

        if (dupCount > 0) {
            log.info("User {} already redeemed coupon {}", request.getUserEmail(), couponID);
            return Response.status(Response.Status.CONFLICT).entity("Already redeemed").build();
        }

        // สร้าง usage ใหม่
        var usage = new CouponUsageEntity();
        usage.setUserEmail(request.getUserEmail());
        usage.setCoupon(coupon);
        usage.setCouponCode(request.getCouponCode());
        usage.setCouponTitle(request.getCouponTitle());
        usage.setCouponDescription(request.getCouponDescription());
        usage.setUserEarnPoints(request.getUserEarnPoints());
        usage.setCurrentUserPoints(request.getCurrentUserPoints());
        usage.setRedeemTime(request.getRedeemTime());
        usage.setRedeemed(true);

        entityManager.persist(usage);
        log.info("Successfully created CouponRedemption for user {} coupon {}", request.getUserEmail(), couponID);

        return Response.ok().entity("Coupon redeemed successfully").build();
    }
}
