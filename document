import { useEffect, useMemo, useState } from "react";
import axios from "axios";

// ถ้าคุณมีไฟล์/คอมโพเนนต์ของตัวเองอยู่แล้ว สามารถลบคอมโพเนนต์ที่เป็นตัวอย่างด้านล่างได้
// และคงการใช้งาน <UserListWidget/> เดิมของคุณไว้ได้เหมือนเดิม
import UserListWidget from "../Supervisor/Widgets/UserListWidget";
import AdministratorBar from "./Widgets/AdministratorBar"; // คงชื่อไฟล์ให้สะกดตรงกัน

// ----------------------
// Types
// ----------------------
export type User = {
  id: string;
  name: string;
  email: string;
  role: string; // 'ADMIN' | 'SUPERVISOR' | 'TRAINER' | 'LEARNER' ...
};

export type Team = {
  id: string;
  name: string;
  supervisorId: string;
  memberIds: string[]; // รวมลูกทีมทั้งหมด (ไม่ต้องรวม supervisor)
};

// ----------------------
// Helpers
// ----------------------
const getToken = () =>
  localStorage.getItem("token") || sessionStorage.getItem("token") || "";

// ----------------------
// Team Builder (แบบฟอร์มสร้างทีม)
// ----------------------
function TeamBuilderWidget({
  users,
  onCreated,
}: {
  users: User[];
  onCreated: (team: Team) => void;
}) {
  const [teamName, setTeamName] = useState("");
  const [supervisorId, setSupervisorId] = useState("");
  const [memberIds, setMemberIds] = useState<string[]>([]);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const supervisors = useMemo(
    () => users.filter((u) => u.role?.toUpperCase() === "SUPERVISOR"),
    [users]
  );

  const selectableMembers = useMemo(() => {
    // สมาชิกที่เลือกเข้าทีมได้ อาจ exclude ADMIN ก็ได้ ตาม policy ของคุณ
    return users.filter((u) => u.role?.toUpperCase() !== "ADMIN");
  }, [users]);

  const toggleMember = (id: string) => {
    setMemberIds((prev) =>
      prev.includes(id) ? prev.filter((x) => x !== id) : [...prev, id]
    );
  };

  const canSubmit = teamName.trim() && supervisorId && memberIds.length > 0;

  const createTeam = async () => {
    if (!canSubmit || submitting) return;
    setSubmitting(true);
    setError(null);

    try {
      const token = getToken();
      // NOTE: ปรับ endpoint ให้ตรงกับ backend ของคุณ
      // ตัวอย่าง endpoint: POST /api/teams  body: { name, supervisorId, memberIds }
      const { data } = await axios.post<Team>(
        "/api/teams",
        { name: teamName.trim(), supervisorId, memberIds },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      onCreated(data);
      setTeamName("");
      setSupervisorId("");
      setMemberIds([]);
    } catch (e: any) {
      console.error(e);
      setError(e?.response?.data?.message || "สร้างทีมไม่สำเร็จ");
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="rounded-2xl border p-4 md:p-6 space-y-4 bg-white/60">
      <div className="flex items-center justify-between">
        <h2 className="text-xl font-bold">สร้างทีมใหม่</h2>
      </div>

      <div className="grid gap-4 md:grid-cols-3">
        <div className="space-y-2">
          <label className="text-sm font-medium">ชื่อทีม</label>
          <input
            className="w-full rounded-xl border px-3 py-2"
            placeholder="เช่น Team A"
            value={teamName}
            onChange={(e) => setTeamName(e.target.value)}
          />
        </div>

        <div className="space-y-2">
          <label className="text-sm font-medium">หัวหน้าทีม (Supervisor)</label>
          <select
            className="w-full rounded-xl border px-3 py-2"
            value={supervisorId}
            onChange={(e) => setSupervisorId(e.target.value)}
          >
            <option value="">— เลือก Supervisor —</option>
            {supervisors.map((s) => (
              <option key={s.id} value={s.id}>
                {s.name} ({s.email})
              </option>
            ))}
          </select>
        </div>

        <div className="space-y-2 md:col-span-1">
          <label className="text-sm font-medium">จำนวนสมาชิกที่เลือก</label>
          <div className="rounded-xl border px-3 py-2 text-sm">
            {memberIds.length} คน
          </div>
        </div>
      </div>

      <div className="space-y-2">
        <label className="text-sm font-medium">เลือกสมาชิกเข้าทีม</label>
        <div className="max-h-64 overflow-auto rounded-xl border divide-y">
          {selectableMembers.map((u) => (
            <label
              key={u.id}
              className="flex items-center gap-3 p-3 hover:bg-gray-50 cursor-pointer"
            >
              <input
                type="checkbox"
                checked={memberIds.includes(u.id)}
                onChange={() => toggleMember(u.id)}
              />
              <div className="flex-1">
                <div className="font-medium">{u.name}</div>
                <div className="text-xs opacity-70">{u.email} • {u.role}</div>
              </div>
            </label>
          ))}
        </div>
      </div>

      {error && (
        <div className="text-sm text-red-600">{error}</div>
      )}

      <div className="flex gap-2">
        <button
          disabled={!canSubmit || submitting}
          onClick={createTeam}
          className="rounded-xl px-4 py-2 border bg-black text-white disabled:opacity-50"
        >
          {submitting ? "กำลังบันทึก..." : "สร้างทีม"}
        </button>
        <button
          onClick={() => {
            setTeamName("");
            setSupervisorId("");
            setMemberIds([]);
            setError(null);
          }}
          className="rounded-xl px-4 py-2 border"
        >
          ล้างค่า
        </button>
      </div>
    </div>
  );
}

// ----------------------
// รายการทีม (ตัวอย่างวิธีแสดงโดย group ตาม Supervisor)
// ----------------------
function TeamsBySupervisor({ users, teams }: { users: User[]; teams: Team[] }) {
  const userById = useMemo(() =>
    new Map(users.map((u) => [u.id, u])),
  [users]);

  const grouped = useMemo(() => {
    const bySup: Record<string, Team[]> = {};
    for (const t of teams) {
      if (!bySup[t.supervisorId]) bySup[t.supervisorId] = [];
      bySup[t.supervisorId].push(t);
    }
    return bySup;
  }, [teams]);

  const supIds = Object.keys(grouped);
  if (!supIds.length) return null;

  return (
    <div className="space-y-6">
      {supIds.map((sid) => {
        const sup = userById.get(sid);
        return (
          <div key={sid} className="rounded-2xl border p-4 md:p-6 bg-white/60">
            <div className="mb-3">
              <h3 className="text-lg font-semibold">
                Supervisor: {sup?.name || sid} {sup?.email ? `(${sup.email})` : ""}
              </h3>
              <p className="text-sm opacity-70">
                ทีมทั้งหมดของหัวหน้าคนนี้
              </p>
            </div>
            <div className="grid gap-3 md:grid-cols-2">
              {grouped[sid].map((t) => (
                <div key={t.id} className="rounded-xl border p-3">
                  <div className="font-medium">{t.name}</div>
                  <div className="text-xs opacity-70">
                    สมาชิก {t.memberIds.length} คน
                  </div>
                </div>
              ))}
            </div>
          </div>
        );
      })}
    </div>
  );
}

// ----------------------
// หน้าหลัก: Administrator User Management
// ----------------------
export default function AdministratorUserManagement() {
  const [users, setUsers] = useState<User[]>([]);
  const [teams, setTeams] = useState<Team[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchUsers = async () => {
    try {
      const token = getToken();
      // NOTE: สำหรับ admin ควรดึงผู้ใช้ทั้งหมด
      // แก้ endpoint ให้เหมาะกับ backend จริงของคุณ
      // ตัวอย่าง: GET /api/users
      const { data } = await axios.get<User[]>("/api/users", {
        headers: { Authorization: `Bearer ${token}` },
      });
      setUsers(data);
    } catch (err: any) {
      console.error(err);
      setError(err?.response?.data?.message || "ดึงรายชื่อผู้ใช้ไม่สำเร็จ");
    }
  };

  const fetchTeams = async () => {
    try {
      const token = getToken();
      // ตัวอย่าง: GET /api/teams  -> Team[]
      const { data } = await axios.get<Team[]>("/api/teams", {
        headers: { Authorization: `Bearer ${token}` },
      });
      setTeams(data);
    } catch (err) {
      // ไม่มีทีมครั้งแรกก็ไม่เป็นไร
      console.warn("ทีมอาจยังไม่มี");
    }
  };

  useEffect(() => {
    (async () => {
      setLoading(true);
      await Promise.all([fetchUsers(), fetchTeams()]);
      setLoading(false);
    })();
  }, []);

  const assignRole = async (userId: string, role: string) => {
    const confirmAssign = window.confirm(
      `ยืนยันอัปเดตรายบทบาทเป็น \"${role}\" ?`
    );
    if (!confirmAssign) return;

    try {
      const token = getToken();
      await axios.put(
        `/api/profile/users/${userId}/role`,
        { role },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      await fetchUsers();
      alert(`อัปเดตบทบาทเป็น ${role} แล้ว`);
    } catch (err: any) {
      console.error(err);
      alert(err?.response?.data?.message || "อัปเดตบทบาทไม่สำเร็จ");
    }
  };

  const handleTeamCreated = (team: Team) => {
    setTeams((prev) => [team, ...prev]);
  };

  if (loading) {
    return (
      <div className="flex h-screen">
        <AdministratorBar />
        <div className="flex-1 p-8">กำลังโหลด...</div>
      </div>
    );
  }

  return (
    <div className="flex h-screen">
      <AdministratorBar />

      <div className="flex-1 p-8 overflow-y-auto space-y-8">
        <div className="flex justify-between items-center">
          <h1 className="text-3xl font-bold">Administrator User Management</h1>
        </div>

        {error && (
          <div className="rounded-xl border border-red-200 bg-red-50 p-3 text-red-700">
            {error}
          </div>
        )}

        {/* จัดการบทบาทผู้ใช้เดิม */}
        <div className="space-y-3">
          <p className="opacity-80">จัดการบทบาทผู้ใช้ และระบุ Supervisor/Trainer</p>
          <UserListWidget users={users} assignRole={assignRole} error={error} />
        </div>

        {/* แบบฟอร์มสร้างทีมใหม่ (ต้องระบุ supervisor เป็นหัวหน้า) */}
        <TeamBuilderWidget users={users} onCreated={handleTeamCreated} />

        {/* แสดงทีม grouped by Supervisor */}
        <TeamsBySupervisor users={users} teams={teams} />
      </div>
    </div>
  );
}
