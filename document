// Reward.tsx
import { useState, useEffect, useMemo } from "react";
import axios from "axios";
import { useUserProfile } from "../Lesson/hooks/useUserProfile";
import { usePointHistory } from "./hooks/userPointHistory";

interface Coupon {
  id: string;
  couponCode: string;
  couponTitle: string;
  couponDescription: string;
  pointsRequired: number;
  active: boolean;
  currentUserPoints?: number;
}

type RewardProps = {
  userPoints: number;
  token: string;
};

// ใช้คีย์ต่อการ์ด เพื่อกัน edge case id ซ้ำ
const keyOf = (c: Coupon) => `${c.id}::${c.couponCode}`;

const Reward = ({ userPoints, token }: RewardProps) => {
  const [coupons, setCoupons] = useState<Coupon[]>([]);
  const [loadingKeys, setLoadingKeys] = useState<Set<string>>(new Set()); // per-coupon loading
  const [remainingPoints, setRemainingPoints] = useState(userPoints);

  useEffect(() => setRemainingPoints(userPoints), [userPoints]);

  const { email } = useUserProfile(token);
  const { HistoryDetails, refetch: refetchHistory } = usePointHistory(token);

  // ใช้ประวัติแค่ "ตอนเตรียมลิสต์ครั้งแรก/รีเฟรช" ไม่เอามาใส่ใน disabled
  const redeemedIdSet = useMemo(() => {
    const s = new Set<string>();
    for (const h of HistoryDetails) {
      if (h.isRedeemed && h.couponId) s.add(String(h.couponId));
    }
    return s;
  }, [HistoryDetails]);

  const fetchCoupons = async () => {
    try {
      const res = await axios.get(
        "http://localhost:8080/coupon-usage-tracking/Get-All-Coupons-For-User",
        { headers: { Authorization: `Bearer ${token}` } }
      );
      if (Array.isArray(res.data)) {
        // กรองใบที่เคย redeem ไปแล้ว (เพื่อไม่ให้กลับมาโผล่)
        const filtered = res.data.filter((c: Coupon) => !redeemedIdSet.has(c.id));
        setCoupons(filtered);
      }
    } catch (err) {
      console.error("Failed to fetch coupons:", err);
    }
  };

  useEffect(() => {
    fetchCoupons();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [token, redeemedIdSet]); // อัปเดตลิสต์เมื่อประวัติมีการเปลี่ยน

  const handleRedeem = async (coupon: Coupon) => {
    const k = keyOf(coupon);
    if (loadingKeys.has(k)) return;

    if (!coupon.active) return;
    if (remainingPoints < coupon.pointsRequired) {
      alert("คะแนนไม่พอสำหรับคูปองนี้");
      return;
    }

    // 1) mark loading "เฉพาะใบนี้"
    setLoadingKeys((s) => new Set(s).add(k));

    // 2) OPTIMISTIC: ลบใบนี้ออกจากลิสต์ทันที + หักแต้มทันที
    setCoupons((prev) => prev.filter((c) => c.id !== coupon.id));
    const nextPoints = remainingPoints - coupon.pointsRequired;
    setRemainingPoints(nextPoints);

    // 3) ยิง POST ไปหลังบ้าน
    const payload = {
      id: crypto.randomUUID(),
      userEmail: email,
      couponCode: coupon.couponCode,
      couponTitle: coupon.couponTitle,
      couponDescription: coupon.couponDescription,
      userEarnPoints: coupon.pointsRequired,
      couponId: coupon.id,
      redeemTime: new Date().toISOString(),
      currentUserPoints: nextPoints,
    };

    try {
      await axios.post(
        "http://localhost:8080/coupon-usage-tracking/coupon-redemptions",
        payload,
        { headers: { Authorization: `Bearer ${token}` } }
      );

      // 4) สำเร็จ: ปล่อยให้กดใบถัดไปได้ทันที (เราไม่รอ refetch)
      //    ซิงก์ข้อมูลพื้นหลังแบบ fire-and-forget (ไม่ await เพื่อไม่บล็อก UI)
      refetchHistory?.();
      fetchCoupons(); // ไม่ต้อง await
    } catch (err: any) {
      // 5) FAIL ⇒ ROLLBACK: ใส่คูปองกลับ + คืนแต้ม
      setCoupons((prev) => [coupon, ...prev]); // แทรกกลับไว้บนสุดพอ
      setRemainingPoints((p) => p + coupon.pointsRequired);

      const status = err?.response?.status;
      alert(status === 409 ? "คุณได้ Redeem คูปองนี้ไปแล้ว" : "Redeem failed.");
      console.error(err);
    } finally {
      // 6) ปลดโหลดเฉพาะใบนี้ ⇒ ปุ่มใบอื่นไม่ถูกล็อก
      setLoadingKeys((s) => {
        const n = new Set(s);
        n.delete(k);
        return n;
      });
    }
  };

  return (
    <div className="space-y-4">
      <div className="flex items-baseline justify-between">
        <h2 className="text-xl font-bold text-gray-800">Reward Coupons</h2>
        <div className="text-sm text-gray-700">
          Remaining points: <span className="font-semibold">{remainingPoints}</span>
        </div>
      </div>

      {coupons.length === 0 ? (
        <div className="text-gray-500">No coupons available.</div>
      ) : (
        coupons.map((coupon) => {
          const k = keyOf(coupon);
          const isProcessing = loadingKeys.has(k);

          // ✅ ปุ่มของ "ใบอื่น" จะยังไม่เทา เพราะเงื่อนไขแคบเฉพาะใบนี้
          const canRedeem =
            coupon.active &&
            remainingPoints >= coupon.pointsRequired &&
            !isProcessing;

          return (
            <div
              key={k}
              className="flex items-center justify-between bg-blue-100 px-6 py-4 rounded-full shadow text-sm"
            >
              <div>
                <div className="text-base font-semibold text-blue-800">
                  {coupon.couponTitle}
                </div>
                <div className="text-xs text-blue-600">
                  {coupon.pointsRequired} points to redeem
                </div>
                <div className="text-xs text-gray-700">
                  {coupon.couponDescription}
                </div>
              </div>
              <button
                disabled={!canRedeem}
                onClick={() => handleRedeem(coupon)}
                className={`px-4 py-1 rounded-full font-medium ${
                  canRedeem
                    ? "bg-blue-600 hover:bg-blue-700 text-white"
                    : "bg-gray-300 text-gray-500 cursor-not-allowed"
                }`}
              >
                {isProcessing ? "Processing..." : "Redeem"}
              </button>
            </div>
          );
        })
      )}
    </div>
  );
};

export default Reward;
