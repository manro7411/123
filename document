ได้เลยครับ — ผมเตรียม “แพตช์ปรับจากโค้ดเดิม” ให้ใช้งานหมวดหลัก/หมวดย่อย ตามที่กำหนดไว้ โดยเปลี่ยนน้อยที่สุดจากไฟล์เก่า และแยกเฉพาะส่วน config/utility ออกเป็นไฟล์เล็ก ๆ (อ่านง่าย ดูแลง่าย)

ด้านล่างมี 3 ส่วน:

ไฟล์ใหม่ constants/categories.ts

ไฟล์ใหม่ utils/resolveCategory.ts

แพตช์แก้ LessonPage.tsx จากของเดิมให้รองรับตัวกรองแบบกลุ่ม/ย่อย (ไม่ต้องรื้อใหญ่)

1) src/pages/Lesson/constants/categories.ts

แทน CATEGORY_GROUP เดิม แนะนำใช้ชื่อ CATEGORY_GROUPS + สะกด/ตัวพิมพ์ให้สอดคล้อง (Others, Project Management)

// src/pages/Lesson/constants/categories.ts
export const CATEGORY_GROUPS: Record<string, string[]> = {
  "Technical Skills": [
    "Programming & Development",
    "Cloud & Infrastructure",
    "Cybersecurity",
    "Data & AI",
    "DevOps & Automation",
  ],
  "Business & Project Skills": [
    "IT Governance & Compliance",
    "Project Management (Agile, Scrum, PMP)",
    "Digital Transformation",
  ],
  "IT Process": [],
  Others: [],
};

2) src/pages/Lesson/utils/resolveCategory.ts

ยูทิลจัดหมวดให้เป็น {group, sub, path} และฟังก์ชันนับจำนวน path (ใช้โชว์ตัวเลขในเมนู)

// src/pages/Lesson/utils/resolveCategory.ts
import { CATEGORY_GROUPS } from "../constants/categories";

export type CategoryPath = { group: string; sub: string | null; path: string };

export function resolveCategoryPath(raw?: string): CategoryPath {
  const value = (raw ?? "").trim();
  if (!value) return { group: "Others", sub: null, path: "Others" };

  // รองรับรูปแบบ "Group > Sub" ถ้า data เดิมเคยส่งมาแบบนี้
  if (value.includes(">")) {
    const [g, s] = value.split(">").map((v) => v.trim());
    const group = CATEGORY_GROUPS[g] ? g : "Others";
    const sub = s || null;
    return { group, sub, path: sub ? `${group}/${sub}` : group };
  }

  // จับคู่เป็นหมวดย่อยที่อยู่ในกลุ่มใด
  for (const [group, subs] of Object.entries(CATEGORY_GROUPS)) {
    if (subs.includes(value)) return { group, sub: value, path: `${group}/${value}` };
  }

  // ถ้าตรงชื่อหมวดหลักพอดี
  if (CATEGORY_GROUPS[value]) return { group: value, sub: null, path: value };

  // ไม่เข้ากลุ่มใด -> Others
  return { group: "Others", sub: value || null, path: value ? `Others/${value}` : "Others" };
}

export function countByPath(paths: string[]): Record<string, number> {
  return paths.reduce((acc, p) => {
    acc[p] = (acc[p] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);
}

3) แพตช์ LessonPage.tsx (จากของเก่า)

เปลี่ยนเฉพาะ: import ใหม่, state เป็น selectedPaths, คำนวณ category path, ปรับ filter และ UI เมนูหมวดเป็นแบบกลุ่ม/ย่อย

-import { useContext, useEffect, useRef, useState } from "react";
+import { useContext, useEffect, useMemo, useRef, useState } from "react";
 import { useNavigate, useLocation } from "react-router-dom";
 import axios from "axios";
 import { AuthContext } from "../../Authentication/AuthContext";
 import Sidebar from "../../widgets/SidebarWidget";
 import defaultUserAvatar from "../../assets/user.png";
 import ChatBubbleWidget from "../../widgets/ChatBubbleWidget";
 import NotificationWidget from "../../widgets/NotificationWidget";
 import { useLesson } from "./hooks/useLessons";
 import { useUserProfile } from "./hooks/useUserProfile";
 import { useTeam } from "./hooks/useTeam";
+import { CATEGORY_GROUPS } from "./constants/categories";
+import { resolveCategoryPath, countByPath } from "./utils/resolveCategory";

 const LessonPage = () => {
   const { token: ctxToken } = useContext(AuthContext);
   const token = ctxToken || localStorage.getItem("token") || sessionStorage.getItem("token");
   const navigate = useNavigate();
   const location = useLocation();
   const menuRef = useRef<HTMLDivElement>(null);
   const [searchQuery, setSearchQuery] = useState("");
-  const [categoryMenuOpen, setCategoryMenuOpen] = useState(false);
-  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);
+  const [categoryMenuOpen, setCategoryMenuOpen] = useState(false);
+  // เก็บ selection เป็น "path" เช่น "Technical Skills/Programming & Development" หรือ "Technical Skills"
+  const [selectedPaths, setSelectedPaths] = useState<string[]>([]);
   const [selectedAssignType, setSelectedAssignType] = useState<string>("all");
   const {lessons, progressMap, loading} = useLesson(token, location.pathname);
   const {userId} = useUserProfile(token);
   const myTeamIds = useTeam(token);

   useEffect(() => {
     const handleClickOutside = (event: MouseEvent) => {
       if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
         setCategoryMenuOpen(false);
       }
     };
     document.addEventListener("mousedown", handleClickOutside);
     return () => document.removeEventListener("mousedown", handleClickOutside);
   }, []);

-  const categories = Array.from(new Set(lessons.map((l) => l.category).filter(Boolean)));
+  // สร้างเส้นทางหมวดสำหรับแต่ละ lesson
+  const lessonsWithPath = useMemo(() => {
+    return lessons.map((l) => ({ ...l, __cat: resolveCategoryPath(l.category) }));
+  }, [lessons]);
+  const allPaths = useMemo(() => lessonsWithPath.map((l) => l.__cat.path), [lessonsWithPath]);
+  const pathCounts = useMemo(() => countByPath(allPaths), [allPaths]);

-  const filteredLessons = lessons.filter((lesson) => {
+  const filteredLessons = lessonsWithPath.filter((lesson) => {
   const key = lesson.id.toLowerCase();
   const progress = progressMap[key]?.percent ?? 0;
   const isIncomplete = progress < 100;

   const matchesAssignType =
     selectedAssignType === "all"
       ? lesson.assignType === "all"
       : selectedAssignType === "specific"
       ? lesson.assignType === "specific" && userId && lesson.assignedUserIds?.includes(userId)
       : selectedAssignType === "team"
       ? lesson.assignType === "team" && lesson.assignedTeamIds?.some((id) => myTeamIds.includes(id))
       : false;

   const matchesSearch = [lesson.title, lesson.category, lesson.description ?? ""].some((v) =>
     v.toLowerCase().includes(searchQuery.toLowerCase())
   );
-  const matchesCategory =
-    selectedCategories.length === 0 || selectedCategories.includes(lesson.category);
+  // ถ้าเลือกทั้ง "Group" ให้ผ่านทุก sub ใน group นั้น
+  const { group, path } = lesson.__cat;
+  const hasSelection = selectedPaths.length > 0;
+  const matchesCategory =
+    !hasSelection || selectedPaths.some((p) => p === group || p === path);
   return isIncomplete && matchesAssignType && matchesSearch && matchesCategory;
 });
 
+  // helpers ของเมนูเลือกหมวด
+  const togglePath = (path: string) => {
+    setSelectedPaths((prev) =>
+      prev.includes(path) ? prev.filter((p) => p !== path) : [...prev, path]
+    );
+  };
+  const clearAllSelections = () => setSelectedPaths([]);
+  const selectEntireGroup = (group: string) => {
+    // โหมดนี้บันทึกแค่ชื่อ group เดียว (แทนการติ๊กทุก sub) เพื่อให้อ่าน/ลบออกง่าย
+    setSelectedPaths((prev) => {
+      const withoutGroup = prev.filter((p) => !p.startsWith(`${group}/`) && p !== group);
+      return [...withoutGroup, group];
+    });
+  };

   return (
     <div className="min-h-screen bg-gray-50 flex">
       <Sidebar />
       <main className="flex-1 p-6">
         <div className="flex items-center justify-between mb-4">
           <input
             type="text"
             placeholder="Search lessons…"
             value={searchQuery}
             onChange={(e) => setSearchQuery(e.target.value)}
             className="w-full xl:w-1/3 p-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-purple-500"
           />
           <div className="flex items-center space-x-4">
             {/* Category Filter */}
             <div className="relative" ref={menuRef}>
               <button
                 onClick={() => setCategoryMenuOpen(!categoryMenuOpen)}
                 className="px-3 py-2 border border-gray-300 rounded-md shadow-sm bg-white hover:bg-gray-100 text-sm"
               >
-                {selectedCategories.length > 0
-                  ? `Category (${selectedCategories.length})`
+                {selectedPaths.length > 0
+                  ? `Category (${selectedPaths.length})`
                   : "Filter by Category"}
               </button>
               {categoryMenuOpen && (
-                <div className="absolute z-10 mt-2 w-48 bg-white border border-gray-200 rounded-md shadow-lg">
-                  <div className="p-2 space-y-1">
-                    {categories.map((category) => (
-                      <label key={category} className="flex items-center space-x-2 text-sm cursor-pointer">
-                        <input
-                          type="checkbox"
-                          checked={selectedCategories.includes(category)}
-                          onChange={() =>
-                            setSelectedCategories((prev) =>
-                              prev.includes(category)
-                                ? prev.filter((c) => c !== category)
-                                : [...prev, category]
-                            )
-                          }
-                          className="accent-purple-500"
-                        />
-                        <span>{category}</span>
-                      </label>
-                    ))}
-                    <button
-                      className="mt-2 text-xs text-blue-500 hover:underline"
-                      onClick={() => setSelectedCategories([])}
-                    >
-                      Clear All
-                    </button>
-                  </div>
-                </div>
+                <div className="absolute right-0 z-10 mt-2 w-80 max-h-96 overflow-auto bg-white border border-gray-200 rounded-md shadow-lg p-3 space-y-3">
+                  <div className="flex items-center justify-between">
+                    <span className="text-xs text-gray-500">Select one or more groups/subcategories</span>
+                    <button className="text-xs text-blue-600 hover:underline" onClick={clearAllSelections}>
+                      Clear All
+                    </button>
+                  </div>
+                  {Object.entries(CATEGORY_GROUPS).map(([group, subs]) => (
+                    <div key={group} className="border-t pt-2 first:border-0 first:pt-0">
+                      <div className="flex items-center justify-between">
+                        <label className="flex items-center space-x-2 font-medium text-sm">
+                          <input
+                            type="checkbox"
+                            className="accent-purple-500"
+                            checked={selectedPaths.includes(group)}
+                            onChange={() => togglePath(group)}
+                          />
+                          <span>
+                            {group}
+                            {pathCounts[group] ? (
+                              <span className="ml-1 text-[10px] text-gray-500">({pathCounts[group]})</span>
+                            ) : null}
+                          </span>
+                        </label>
+                        {subs.length > 0 && (
+                          <button
+                            className="text-[10px] text-blue-600 hover:underline"
+                            onClick={() => selectEntireGroup(group)}
+                          >
+                            Select all
+                          </button>
+                        )}
+                      </div>
+                      {subs.length > 0 && (
+                        <div className="mt-2 grid grid-cols-1 gap-1">
+                          {subs.map((sub) => {
+                            const path = `${group}/${sub}`;
+                            return (
+                              <label key={path} className="flex items-center space-x-2 text-sm cursor-pointer">
+                                <input
+                                  type="checkbox"
+                                  className="accent-purple-500"
+                                  checked={selectedPaths.includes(path)}
+                                  onChange={() => togglePath(path)}
+                                />
+                                <span>
+                                  {sub}
+                                  {pathCounts[path] ? (
+                                    <span className="ml-1 text-[10px] text-gray-500">({pathCounts[path]})</span>
+                                  ) : null}
+                                </span>
+                              </label>
+                            );
+                          })}
+                        </div>
+                      )}
+                    </div>
+                  ))}
+                </div>
               )}
             </div>


ส่วนที่เหลือ (Assign Type, รายการการ์ด, handleLessonClick) ใช้ของเดิมได้เลยไม่ต้องแก้ครับ

หมายเหตุที่แก้ให้เรียบร้อย

เปลี่ยน CATEGORY_GROUP ➜ CATEGORY_GROUPS เพื่อความสอดคล้องทั้งโปรเจกต์

ใช้ Others (พหูพจน์) ให้ตรงกันทั้งที่แสดงผลและในโค้ด

Project Management (Agile, Scrum, PMP) ปรับตัวพิมพ์ใหญ่สม่ำเสมอ

เพิ่ม counter (pathCounts) หลังชื่อกลุ่ม/ย่อยในเมนู เพื่อดูจำนวนบทเรียนแต่ละส่วน

ถ้าต้องการให้ผม “ไม่แยกไฟล์” ก็ทำได้ โดยเอาเนื้อหา CATEGORY_GROUPS และ resolveCategoryPath / countByPath วางไว้บนสุดของ LessonPage.tsx แทนการ import — บอกผมได้เลยครับ เดี๋ยวผมสรุปร่างรวมไฟล์เดียวให้ทันที ✨

ChatGPT can make mistakes. Check important info.
