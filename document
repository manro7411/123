import { type FC, useState } from "react";
import { Clipboard, Check } from "lucide-react";

interface TeamCardProps {
  name: string;
  description: string;
  createBy: string;
  joinCode: string;
  onClick: () => void;
}

const TeamCardWidget: FC<TeamCardProps> = ({
  name,
  description,
  createBy,
  joinCode,
  onClick,
}) => {
  const [copied, setCopied] = useState(false);

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(joinCode);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000); // Reset copied after 2s
    } catch (err) {
      console.error("Failed to copy join code:", err);
    }
  };

  return (
    <div
      className="bg-white rounded-xl shadow p-4 space-y-2 hover:shadow-lg transition cursor-pointer"
      onClick={onClick}
    >
      <h2 className="text-xl font-semibold">{name}</h2>
      <p className="text-gray-600 text-sm">
        {description || "No description"}
      </p>
      <div className="text-xs text-gray-400">Created by: {createBy}</div>

      <div className="flex items-center justify-between text-xs text-gray-400">
        <span>Join Code: {joinCode}</span>
        <button
          onClick={(e) => {
            e.stopPropagation(); // Prevent triggering onClick for the card
            handleCopy();
          }}
          className="text-blue-600 hover:text-blue-800 flex items-center space-x-1"
        >
          {copied ? <Check size={16} /> : <Clipboard size={16} />}
          <span>{copied ? "Copied" : "Copy"}</span>
        </button>
      </div>
    </div>
  );
};

export default TeamCardWidget;
---
import { useEffect, useState } from "react";
import AdminSidebarWidget from "../Widgets/AdminSideBar";
import { Plus } from "lucide-react";
import CreateTeamModal from "./CreateTeamModal";
import TeamCardWidget from "./TeamCardWidget";
import TeamMembersModal from "./TeamMembersModal";

import axios from "axios";

interface Team {
  id: string;
  name: string;
  description: string;
  createBy: string;
  joinCode: string;
}

interface UserProfile {
  email: string;
  name: string;
}

const TeamManagement = () => {
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [teams, setTeams] = useState<Team[]>([]);
  const [error, setError] = useState("");
  const [userEmail, setUserEmail] = useState<string>("");
  const [selectedTeamId, setSelectedTeamId] = useState<string | null>(null); 

  const token = localStorage.getItem("token") || sessionStorage.getItem("token");

  const fetchUserProfile = async () => {
    try {
      const res = await axios.get<UserProfile>("/api/profile", {
        headers: { Authorization: `Bearer ${token}` },
      });
      setUserEmail(res.data.email);
    } catch (error) {
      console.error("❌ Failed to load user profile:", error);
    }
  };

  const fetchTeams = async () => {
    try {
      const res = await axios.get<Team[]>("/api/teams", {
        headers: { Authorization: `Bearer ${token}` },
      });
      setTeams(res.data);
    } catch (error) {
      console.error("❌ Failed to load teams:", error);
      setError("Failed to load team list.");
    }
  };

  useEffect(() => {
    if (!token) return;
    fetchUserProfile();
    fetchTeams();
  }, [token]);

  const myTeams = teams.filter((team) => team.createBy === userEmail);

  return (
    <div className="min-h-screen bg-gray-50 flex">
      <AdminSidebarWidget />
      <main className="flex-1 p-6 relative space-y-8">
        <div className="border-b pb-4">
          <h1 className="text-3xl font-bold">Team Management</h1>
          <p className="text-gray-600">Manage teams and members efficiently.</p>
        </div>

        {error && <p className="text-red-500">{error}</p>}

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {myTeams.map((team) => (
            <TeamCardWidget
            key={team.id}
            name={team.name}
            description={team.description}
            createBy={team.createBy}
            joinCode={team.joinCode}
             onClick={() => {
              console.log("Clicked team ID:", team.id); 
              setSelectedTeamId(team.id); 
          }}
            
          />
          ))}
          {myTeams.length === 0 && (
            <p className="text-gray-400 col-span-full">No teams found.</p>
          )}
        </div>

        <button
          onClick={() => setShowCreateModal(true)}
          className="fixed bottom-6 right-6 bg-blue-600 text-white p-4 rounded-full shadow-lg hover:bg-blue-700"
        >
          <Plus size={24} />
        </button>

        <CreateTeamModal open={showCreateModal} onClose={() => setShowCreateModal(false)} />

        {selectedTeamId && (
          <TeamMembersModal
            teamId={selectedTeamId}
            open={true}
            onClose={() => setSelectedTeamId(null)}
          />
        )}
      </main>
    </div>
  );
};

export default TeamManagement;
---
import { useEffect, useState } from "react";
import axios from "axios";

interface TeamMember {
  id: string;
  name: string;
  email: string;
}

interface TeamMembersModalProps {
  teamId: string;
  open: boolean;
  onClose: () => void;
}

const TeamMembersModal = ({ teamId, open, onClose }: TeamMembersModalProps) => {
  const [members, setMembers] = useState<TeamMember[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const token = localStorage.getItem("token") || sessionStorage.getItem("token");

  useEffect(() => {
    if (!open || !teamId) return;

    const fetchMembers = async () => {
      setLoading(true);
      try {
        const res = await axios.get(`/api/teams/${teamId}/members`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        setMembers(res.data);
      } catch (err) {
        console.error("❌ Failed to fetch team members:", err);
        setError("Failed to load team members.");
      } finally {
        setLoading(false);
      }
    };

    fetchMembers();
  }, [teamId, open,token]);

  const handleRemoveMember = async (memberId: string) => {
    try {
      await axios.delete(`/api/teams/${teamId}/members/${memberId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setMembers((prev) => prev.filter((m) => m.id !== memberId));
    } catch (err) {
      console.error("❌ Failed to remove member:", err);
      alert("Failed to remove member.");
    }
  };

  if (!open) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
      <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
        <h2 className="text-xl font-bold mb-4">Team Members</h2>

        {loading ? (
          <p className="text-gray-500">Loading...</p>
        ) : error ? (
          <p className="text-red-500">{error}</p>
        ) : members.length === 0 ? (
          <p className="text-gray-400">No members found.</p>
        ) : (
          <ul className="space-y-3">
            {members.map((member) => (
              <li key={member.id} className="flex justify-between items-center">
                <div>
                  <p className="font-medium">{member.name}</p>
                  <p className="text-sm text-gray-500">{member.email}</p>
                </div>
                <button
                  onClick={() => handleRemoveMember(member.id)}
                  className="text-red-600 hover:underline text-sm"
                >
                  Remove
                </button>
              </li>
            ))}
          </ul>
        )}

        <button
          onClick={onClose}
          className="mt-6 text-blue-600 hover:underline text-sm"
        >
          Close
        </button>
      </div>
    </div>
  );
};

export default TeamMembersModal;
