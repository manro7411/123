import { useContext, useEffect, useState } from "react";
import axios from "axios";
import { AuthContext } from "../../../Authentication/AuthContext";
import AdminSidebarWidget from "../Widgets/AdminSideBar";
import { useNavigate } from "react-router-dom";
import { Pencil } from "lucide-react";
import EditLessonModal, { type Lesson } from "./EditLessonModal";
import { sendLessonNotification } from "../Widgets/notificationServices";
import { useUserProfile } from "../../Lesson/hooks/useUserProfile";

interface UserProgress {
  userEmail: string;
  percent: number;
  lessonId: number;
  score: number;
  authorAvatarUrl?: string;
  quizAvailable: boolean;
  feedback?: string;
}

interface AnswerReply {
  id: string;
  trainerReply: string;
  trainerEmail: string;
  trainerName: string;
  avatarUrl?: string;
  createdAt: string;
}

interface QuestionAnswer {
  id: string;
  userEmail: string;
  authorAvatarUrl?: string;
  createAt?: string;      // backend ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ createAt
  createdAt?: string;     // ‡∏Å‡∏±‡∏ô‡∏ö‡∏≤‡∏á‡∏Å‡∏£‡∏ì‡∏µ
  question: string;
  answerReplies?: AnswerReply[];
}

const AdminTaskManagementPage = () => {
  const { token } = useContext(AuthContext);
  const { email } = useUserProfile(token);
  const navigate = useNavigate();

  const [lessons, setLessons] = useState<Lesson[]>([]);
  const [selectedLesson, setSelectedLesson] = useState<Lesson | null>(null);
  const [progressList, setProgressList] = useState<UserProgress[]>([]);
  const [selectedUser, setSelectedUser] = useState<UserProgress | null>(null);
  const [loading, setLoading] = useState(false);

  const [feedback, setFeedback] = useState<string>("");

  const [trainerReply, setTrainerReply] = useState<string>("");
  const [replyLoading, setReplyLoading] = useState(false);

  const [showEditModal, setShowEditModal] = useState(false);
  const [userLessonQuestion, setUserLessonQuestion] = useState<QuestionAnswer[] | undefined>();

  const authHeader = token ? { Authorization: `Bearer ${token}` } : undefined;

  // ---------- helpers ----------
  const fmtDate = (iso?: string) => {
    if (!iso) return "";
    try {
      return new Date(iso).toLocaleString();
    } catch {
      return iso;
    }
  };

  // ---------- fetchers ----------
  const fetchLessons = async () => {
    setLoading(true);
    try {
      const res = await axios.get<Lesson[]>("/api/learning?mine=true", { headers: authHeader });
      setLessons(res.data);
    } catch (err) {
      console.error("‚ùå Failed to load lessons:", err);
      alert("Failed to fetch lessons.");
    } finally {
      setLoading(false);
    }
  };

  const fetchUserIdByEmail = async (userEmail: string) => {
    try {
      const res = await axios.get("/api/profile/users", {
        params: { email: userEmail },
        headers: authHeader,
      });

      const users = res.data;
      if (Array.isArray(users) && users.length > 0) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const user = users.find((u: any) => u.email === userEmail);
        return user?.id || null;
      }
      console.error("‚ùå No matching user found for email:", userEmail);
      return null;
    } catch (err) {
      if (axios.isAxiosError(err)) {
        console.error("‚ùå Failed to fetch userId:", err.response?.data || err.message);
      } else {
        console.error("‚ùå Failed to fetch userId:", err);
      }
      return null;
    }
  };

  const fetchUserLessonQuestion = async (userEmail: string, lessonId: string | number) => {
    try {
      // ‚úÖ encode email ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô + ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©
      const emailPath = encodeURIComponent(userEmail);

      // ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á object ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡πÅ‡∏•‡∏∞ array
      const res = await axios.get<QuestionAnswer | QuestionAnswer[]>(
        `/api/trainer-question-answer/get-answer-reply-by-question-id/${emailPath}/${lessonId}`,
        { headers: authHeader }
      );

      const data = res.data;
      console.log("Q&A API response:", data);

      if (!data) {
        setUserLessonQuestion([]);
      } else if (Array.isArray(data)) {
        setUserLessonQuestion(data);
      } else {
        setUserLessonQuestion([data]);
      }
    } catch (err) {
      console.error("‚ùå Failed to fetch user lesson question:", err);
      setUserLessonQuestion([]);
    }
  };

  // ---------- effects ----------
  useEffect(() => {
    if (!token) {
      navigate("/");
      return;
    }
    fetchLessons();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [token, navigate]);

  useEffect(() => {
    if (selectedUser && selectedLesson) {
      fetchUserLessonQuestion(selectedUser.userEmail, selectedLesson.id);
    } else {
      setUserLessonQuestion(undefined);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectedUser, selectedLesson]);

  // ---------- handlers ----------
  const handleSelectLesson = async (lesson: Lesson) => {
    setSelectedLesson(lesson);
    setSelectedUser(null);
    setUserLessonQuestion(undefined);
    setTrainerReply("");

    try {
      const res = await axios.get<UserProgress[]>("/api/user/progress/all", { headers: authHeader });
      const lessonProgress = res.data.filter((p) => p.lessonId === lesson.id);

      // keep last entry per user (‡∏ñ‡πâ‡∏≤ api ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£/‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô)
      const latestByUser = new Map<string, UserProgress>();
      lessonProgress.forEach((entry) => {
        latestByUser.set(entry.userEmail, entry);
      });

      setProgressList(Array.from(latestByUser.values()));
    } catch (err) {
      console.error("‚ùå Failed to fetch progress:", err);
      alert("Failed to load progress data.");
    }
  };

  const handleDeleteLesson = async (id: number) => {
    if (!window.confirm("Delete this lesson? This cannot be undone!")) return;

    try {
      await axios.delete(`/api/learning/${id}`, { headers: authHeader });
      setLessons((prev) => prev.filter((l) => l.id !== id));
      if (selectedLesson?.id === id) {
        setSelectedLesson(null);
        setProgressList([]);
        setSelectedUser(null);
        setUserLessonQuestion(undefined);
      }
      alert("‚úÖ Lesson deleted");
    } catch (err) {
      console.error("‚ùå Delete failed:", err);
      alert("Failed to delete lesson.");
    }
  };

  const handleOpenEdit = (lesson: Lesson) => {
    setSelectedLesson(lesson);
    setShowEditModal(true);
  };

  const handleSaveLesson = async (data: { title: string; category: string; thumbnailUrl?: string }) => {
    if (!selectedLesson) return;
    try {
      const payload: Lesson = { ...selectedLesson, ...data };
      await axios.put(`/api/learning/${selectedLesson.id}`, payload, { headers: authHeader });

      setLessons((prev) => prev.map((l) => (l.id === selectedLesson.id ? { ...l, ...payload } : l)));
      setSelectedLesson((prev) => (prev ? { ...prev, ...payload } : prev));

      setShowEditModal(false);
      alert("‚úÖ Lesson updated");
    } catch (err) {
      console.error("‚ùå Update failed:", err);
      alert("Failed to update lesson information.");
    }
  };

  if (!token) return null;

  return (
    <div className="min-h-screen bg-gray-50 flex">
      <AdminSidebarWidget />

      <main className="flex-1 p-10 space-y-6">
        <h1 className="text-2xl font-bold text-blue-800 border-b pb-2">üßô Task Management</h1>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Lesson List */}
          <section className="col-span-1 space-y-4">
            {loading ? (
              <p className="text-gray-500">Loading lessons...</p>
            ) : (
              lessons.map((lesson) => (
                <div
                  key={lesson.id}
                  className={`relative cursor-pointer p-4 rounded-xl shadow border transition-all ${
                    selectedLesson?.id === lesson.id ? "bg-blue-50 border-blue-500" : "bg-white hover:border-blue-500"
                  }`}
                >
                  <div onClick={() => handleSelectLesson(lesson)}>
                    <h3 className="font-semibold text-lg text-gray-800">{lesson.title}</h3>
                    <p className="text-sm text-gray-500">ID: {lesson.id}</p>
                    <p className="text-xs text-purple-600 font-semibold uppercase">{lesson.category}</p>
                  </div>

                  {/* Edit button */}
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      handleOpenEdit(lesson);
                    }}
                    className="absolute top-2 right-10 text-gray-500 hover:text-gray-700"
                    title="Edit lesson"
                    type="button"
                    aria-label="Edit lesson"
                  >
                    <Pencil size={18} />
                  </button>

                  {/* Delete button */}
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      handleDeleteLesson(lesson.id);
                    }}
                    className="absolute top-2 right-2 text-red-500 hover:text-red-700"
                    title="Delete lesson"
                    type="button"
                    aria-label="Delete lesson"
                  >
                    üóë
                  </button>
                </div>
              ))
            )}
          </section>

          {/* User Progress List */}
          <section className="col-span-1 space-y-4">
            {progressList.length === 0 && selectedLesson && <p className="text-gray-400">No progress yet‚Ä¶</p>}
            {progressList.map((user) => (
              <div
                key={`${user.lessonId}-${user.userEmail}`}
                className="p-4 bg-white rounded-xl shadow flex justify-between items-center"
              >
                <div>
                  <p className="font-medium text-gray-800">{user.userEmail}</p>
                  <p className="text-sm text-gray-400">Lesson ID: {user.lessonId}</p>
                </div>
                <button
                  className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-1 rounded shadow"
                  onClick={() => setSelectedUser(user)}
                >
                  View
                </button>
              </div>
            ))}
          </section>

          {/* Right pane: selected user overview */}
          <section className="col-span-1 bg-white p-6 rounded-xl shadow">
            <h2 className="text-lg font-semibold mb-4 text-gray-700">Quick overview of employee progress</h2>

            {selectedUser ? (
              <div className="space-y-6">
                <div className="flex items-center gap-3">
                  {selectedUser.authorAvatarUrl ? (
                    <img
                      src={selectedUser.authorAvatarUrl}
                      alt={`${selectedUser.userEmail}'s avatar`}
                      className="w-10 h-10 rounded-full"
                    />
                  ) : (
                    <div className="w-10 h-10 bg-gray-200 rounded-full" />
                  )}
                  <div>
                    <p className="font-medium text-gray-800">{selectedUser.userEmail}</p>
                    <p className="text-sm text-gray-500">Lesson ID: {selectedUser.lessonId}</p>
                  </div>
                </div>

                <div>
                  <p className="text-sm text-gray-500">Progress</p>
                  <progress value={selectedUser.percent} max={100} className="w-full h-2 mt-1" />
                  <p className="text-right text-xs text-gray-500">{selectedUser.percent}%</p>
                </div>

                <p className="text-sm text-gray-500">
                  Quiz:{" "}
                  {selectedUser.quizAvailable ? (
                    selectedUser?.score > 0 ? (
                      <span className="text-green-600 font-semibold">Finished ({selectedUser.score} pts)</span>
                    ) : (
                      <span className="text-red-500">Not yet</span>
                    )
                  ) : (
                    <span className="text-gray-400">Quiz not available for this learning content</span>
                  )}
                </p>

                {/* Q&A thread for this user+lesson */}
                <div className="border-t pt-4">
                  <h3 className="font-semibold text-gray-800 mb-2">User Question for this Learning Content</h3>
                  {userLessonQuestion === undefined ? (
                    <p className="text-sm text-gray-400">Loading‚Ä¶</p>
                  ) : userLessonQuestion.length === 0 ? (
                    <p className="text-sm text-gray-400">No questions from this user for this lesson.</p>
                  ) : (
                    userLessonQuestion.map((qa) => {
                      const askedAt = qa.createdAt || qa.createAt || "";
                      return (
                        <div key={qa.id} className="space-y-3">
                          <div className="p-3 rounded-lg bg-gray-50 border">
                            <p className="text-sm text-gray-700 whitespace-pre-wrap">
                              {qa.question || <span className="text-gray-400">No question text</span>}
                            </p>
                            <p className="mt-1 text-xs text-gray-400">Asked: {askedAt ? fmtDate(askedAt) : "-"}</p>
                          </div>

                          {qa.answerReplies && qa.answerReplies.length > 0 && (
                            <div className="space-y-2">
                              <p className="text-sm font-medium text-gray-700">Trainer Replies</p>
                              {qa.answerReplies.map((r) => (
                                <div key={r.id} className="p-3 rounded-lg bg-blue-50 border">
                                  <p className="text-sm text-gray-800 whitespace-pre-wrap">{r.trainerReply}</p>
                                  <p className="mt-1 text-xs text-gray-500">
                                    by {r.trainerName} ‚Ä¢ {r.trainerEmail} ‚Ä¢ {fmtDate(r.createdAt)}
                                  </p>
                                </div>
                              ))}
                            </div>
                          )}
                        </div>
                      );
                    })
                  )}
                </div>

                {/* Feedback Section (visible only when finished) */}
                {selectedUser?.percent === 100 && (
                  <div className="border-t pt-4 space-y-2">
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Feedback for {selectedUser.userEmail}
                    </label>

                    {selectedUser.feedback ? (
                      <div className="p-4 bg-gray-100 border rounded-lg">
                        <p className="text-sm text-gray-700 whitespace-pre-wrap">{selectedUser.feedback}</p>
                      </div>
                    ) : (
                      <>
                        <textarea
                          value={feedback}
                          onChange={(e) => setFeedback(e.target.value)}
                          className="h-32 w-full border rounded-lg px-3 py-2"
                          placeholder="Write your feedback here..."
                        />
                        <button
                          onClick={async () => {
                            if (!feedback.trim()) {
                              alert("‚ùå Feedback cannot be empty.");
                              return;
                            }
                            try {
                              await axios.post(
                                `/api/user/feedback`,
                                {
                                  userEmail: selectedUser.userEmail,
                                  lessonId: selectedUser.lessonId,
                                  feedback,
                                  email,
                                },
                                { headers: authHeader }
                              );

                              const uid = await fetchUserIdByEmail(selectedUser.userEmail);
                              if (uid) {
                                await sendLessonNotification({
                                  token,
                                  message: `You have received feedback for lesson ${selectedLesson?.title}.`,
                                  userIds: [uid],
                                  target: "USER",
                                });
                              }

                              alert("‚úÖ Feedback sent successfully!");
                              setFeedback("");
                              setSelectedUser((prev) => (prev ? { ...prev, feedback } : prev));
                            } catch (err) {
                              console.error("‚ùå Failed to send feedback:", err);
                              alert("Failed to send feedback.");
                            }
                          }}
                          className="mt-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                        >
                          Send Feedback
                        </button>
                      </>
                    )}
                  </div>
                )}

                {/* Trainer Reply Section (reply to the specific question) */}
                {selectedUser?.percent === 100 && userLessonQuestion && userLessonQuestion.length > 0 && (
                  <div className="mt-2 border-t pt-4">
                    <label className="block text-sm font-medium text-gray-700 mb-1">Reply to this question</label>
                    <textarea
                      value={trainerReply}
                      onChange={(e) => setTrainerReply(e.target.value)}
                      className="h-24 w-full border rounded-lg px-3 py-2"
                      placeholder="Write your answer here..."
                      disabled={replyLoading}
                    />
                    <button
                      onClick={async () => {
                        if (!trainerReply.trim()) {
                          alert("‚ùå Answer cannot be empty.");
                          return;
                        }
                        const qa = userLessonQuestion?.[0];
                        if (!qa) {
                          alert("‚ùå No question context to reply to.");
                          return;
                        }
                        setReplyLoading(true);
                        try {
                          const payload = {
                            // ‚úÖ ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà selectedLesson)
                            questionAnswerId: qa.id,
                            // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ backend ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
                            lessonId: selectedLesson?.id,
                            trainerReply,
                            trainerEmail: email,
                            trainerName: email || "Trainer",
                            // ‡πÅ‡∏ô‡∏ö avatar ‡πÄ‡∏ó‡∏£‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÉ‡∏™‡πà‡∏Ç‡∏≠‡∏á user ‡πÅ‡∏ó‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏á trainer)
                            avatarUrl: selectedUser?.authorAvatarUrl,
                            createdAt: new Date().toISOString(),
                          };

                          await axios.post(
                            "/api/trainer-question-answer/Update-answer-to-learning-content",
                            payload,
                            { headers: authHeader }
                          );

                          // refresh thread
                          if (selectedUser && selectedLesson) {
                            await fetchUserLessonQuestion(selectedUser.userEmail, selectedLesson.id);
                          }

                          alert("‚úÖ Trainer answer sent successfully!");
                          setTrainerReply("");
                        } catch (err) {
                          console.error("‚ùå Failed to send trainer answer:", err);
                          alert("Failed to send trainer answer.");
                        } finally {
                          setReplyLoading(false);
                        }
                      }}
                      className={`mt-2 px-4 py-2 rounded-lg ${
                        replyLoading || !trainerReply.trim()
                          ? "bg-gray-300 text-gray-500 cursor-not-allowed"
                          : "bg-green-600 text-white hover:bg-green-700"
                      }`}
                      disabled={replyLoading || !trainerReply.trim()}
                    >
                      {replyLoading ? "Sending..." : "Send Trainer Answer"}
                    </button>
                  </div>
                )}
              </div>
            ) : (
              <p className="text-gray-400">‚Üê Select a user to see details</p>
            )}
          </section>
        </div>
      </main>

      {/* Edit Lesson Modal */}
      {showEditModal && selectedLesson && (
        <EditLessonModal
          open={showEditModal}
          initial={selectedLesson}
          onClose={() => setShowEditModal(false)}
          onSave={handleSaveLesson}
        />
      )}
    </div>
  );
};

export default AdminTaskManagementPage;
