// src/components/Reward.tsx
import { useState, useEffect, useMemo } from "react";
import axios from "axios";
import { useUserProfile } from "../Lesson/hooks/useUserProfile";
import { usePointHistory } from "./hooks/userPointHistory";

interface Coupon {
  id: string;
  couponCode: string;
  couponTitle: string;
  couponDescription: string;
  pointsRequired: number;
  active: boolean;
  currentUserPoints?: number;
}

type RewardProps = {
  userPoints: number;
  token: string;
};

const Reward = ({ userPoints, token }: RewardProps) => {
  const [coupons, setCoupons] = useState<Coupon[]>([]);
  const [loadingCouponId, setLoadingCouponId] = useState<string | null>(null);

  // ✅ ใช้แค่ id สำหรับซ่อนแบบ optimistic
  const [hiddenIds, setHiddenIds] = useState<Set<string>>(new Set());

  // แสดงยอดคงเหลือแบบ optimistic
  const [remainingPoints, setRemainingPoints] = useState<number>(userPoints);
  useEffect(() => setRemainingPoints(userPoints), [userPoints]);

  const { email } = useUserProfile(token);
  const { HistoryDetails } = usePointHistory(token);

  // ประวัติที่เคย redeem มาแล้ว
  const redeemedKeys = useMemo(() => {
    const ids = new Set<string>();
    const codes = new Set<string>();
    for (const h of HistoryDetails) {
      if (h.isRedeemed) {
        if (h.couponId) ids.add(h.couponId);
        if (h.couponCode) codes.add(h.couponCode);
      }
    }
    return { ids, codes };
  }, [HistoryDetails]);

  // ปิดปุ่มถ้าใบนี้เคย redeem (จาก id) หรือถ้าไม่มี id ในประวัติให้กันด้วย code
  const isRedeemedForButton = (c: Coupon) =>
    redeemedKeys.ids.has(c.id) || redeemedKeys.codes.has(c.couponCode);

  // ใช้เฉพาะ id ในการซ่อนจากลิสต์ (แก้ปัญหาหายยกชุด)
  const isHiddenOptimistically = (c: Coupon) => hiddenIds.has(c.id);

  useEffect(() => {
    const fetchCoupons = async () => {
      try {
        const res = await axios.get(
          "http://localhost:8080/coupon-usage-tracking/Get-All-Coupons-For-User",
          { headers: { Authorization: `Bearer ${token}` } }
        );
        if (Array.isArray(res.data)) setCoupons(res.data);
      } catch (err) {
        console.error("Failed to fetch coupons:", err);
      }
    };
    fetchCoupons();
  }, [token]);

  const handleRedeem = async (coupon: Coupon) => {
    // บล็อกซ้ำ
    if (isRedeemedForButton(coupon) || isHiddenOptimistically(coupon)) return;

    if (remainingPoints < coupon.pointsRequired) {
      alert("คะแนนไม่พอสำหรับคูปองนี้");
      return;
    }

    // ✅ ซ่อนทันทีด้วย id อย่างเดียว
    setHiddenIds((s) => new Set(s).add(coupon.id));
    setLoadingCouponId(coupon.id);

    const nextPoints = remainingPoints - coupon.pointsRequired;

    const payload = {
      id: crypto.randomUUID(),
      userEmail: email,
      couponCode: coupon.couponCode,
      couponTitle: coupon.couponTitle,
      couponDescription: coupon.couponDescription,
      userEarnPoints: coupon.pointsRequired,
      couponId: coupon.id,
      redeemTime: new Date().toISOString(),
      currentUserPoints: nextPoints,
    };

    try {
      await axios.post(
        "http://localhost:8080/coupon-usage-tracking/coupon-redemptions",
        payload,
        { headers: { Authorization: `Bearer ${token}` } }
      );

      // ✅ ลบออกจากลิสต์ด้วย id เท่านั้น (อย่าใช้ couponCode)
      setCoupons((prev) => prev.filter((c) => c.id !== coupon.id));
      setRemainingPoints(nextPoints);

      alert(`คุณได้ Redeem ${coupon.couponTitle} เรียบร้อยแล้ว!`);
    } catch (err) {
      // rollback หากล้มเหลว
      setHiddenIds((s) => {
        const n = new Set(s);
        n.delete(coupon.id);
        return n;
      });
      alert("Redeem failed.");
      console.error(err);
    } finally {
      setLoadingCouponId(null);
    }
  };

  // แสดงเฉพาะใบที่ไม่ถูกซ่อนแบบ optimistic (ใช้ id เท่านั้น)
  const visibleCoupons = useMemo(
    () => coupons.filter((c) => !isHiddenOptimistically(c)),
    [coupons, hiddenIds]
  );

  return (
    <div className="space-y-4">
      <div className="flex items-baseline justify-between">
        <h2 className="text-xl font-bold text-gray-800">Reward Coupons</h2>
        <div className="text-sm text-gray-700">
          Remaining points: <span className="font-semibold">{remainingPoints}</span>
        </div>
      </div>

      {visibleCoupons.length === 0 ? (
        <div className="text-gray-500">No coupons available.</div>
      ) : (
        visibleCoupons.map((coupon) => {
          const isProcessing = loadingCouponId === coupon.id;
          const canRedeem =
            coupon.active &&
            remainingPoints >= coupon.pointsRequired &&
            !isProcessing &&
            // ปิดปุ่มถ้าเคย redeem (id) หรือ (code) มาก่อน
            !isRedeemedForButton(coupon);

          return (
            <div
              key={coupon.id}
              className="flex items-center justify-between bg-blue-100 px-6 py-4 rounded-full shadow text-sm"
            >
              <div>
                <div className="text-base font-semibold text-blue-800">
                  {coupon.couponTitle}
                </div>
                <div className="text-xs text-blue-600">
                  {coupon.pointsRequired} points to redeem
                </div>
                <div className="text-xs text-gray-700">
                  {coupon.couponDescription}
                </div>
              </div>
              <button
                disabled={!canRedeem}
                onClick={() => handleRedeem(coupon)}
                className={`px-4 py-1 rounded-full font-medium ${
                  canRedeem
                    ? "bg-blue-600 hover:bg-blue-700 text-white"
                    : "bg-gray-300 text-gray-500 cursor-not-allowed"
                }`}
              >
                {isProcessing ? "Processing..." : "Redeem"}
              </button>
            </div>
          );
        })
      )}
    </div>
  );
};

export default Reward;
