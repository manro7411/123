import { useEffect, useState, useContext } from "react";
import { createPortal } from "react-dom";
import { X, Save } from "lucide-react";
import axios from "axios";
import { AuthContext } from "../../../Authentication/AuthContext";

export interface Lesson {
  id: number;
  title: string;
  thumbnailUrl?: string;
  category: string;
  description: string;
  contentType: "video" | "document";
}

interface EditLessonModalProps {
  open: boolean;
  initial: Lesson;
  onClose: () => void;
  // callback หลังอัปเดตสำเร็จ (เอาไว้ sync รายการใน parent)
  onUpdated?: (updated: Lesson) => void;
}

const EditLessonModal = ({ open, initial, onClose, onUpdated }: EditLessonModalProps) => {
  const { token } = useContext(AuthContext);

  const [title, setTitle] = useState(initial.title);
  const [category, setCategory] = useState(initial.category);
  const [description, setDescription] = useState(initial.description);
  const [thumbnailUrl, setThumbnailUrl] = useState(initial.thumbnailUrl ?? "");
  const [contentType, setContentType] = useState<"video" | "document">(initial.contentType || "video");
  const [file, setFile] = useState<File | null>(null);

  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);

  // โหลดรายละเอียดล่าสุดทุกครั้งที่เปิด
  useEffect(() => {
    if (!open) return;

    const load = async () => {
      setLoading(true);
      try {
        const res = await axios.get<Lesson>(`/api/learning/${initial.id}`, {
          headers: token ? { Authorization: `Bearer ${token}` } : undefined,
        });
        const data = res.data;
        setTitle(data.title);
        setCategory(data.category);
        setDescription(data.description);
        setThumbnailUrl(data.thumbnailUrl ?? "");
        setContentType((data.contentType?.toLowerCase() as "video" | "document") || "video");
        setFile(null);
      } catch (err) {
        console.error("Failed to fetch lesson details:", err);
      } finally {
        setLoading(false);
      }
    };

    load();
  }, [open, initial.id, token]);

  if (!open) return null;

  const stop = (e: React.MouseEvent) => e.stopPropagation();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setSaving(true);

    const headersBase = token ? { Authorization: `Bearer ${token}` } : undefined;
    const url = `/api/learning/${initial.id}`;

    try {
      if (file) {
        // มีไฟล์ → ส่ง multipart/form-data
        const form = new FormData();
        const fileField = contentType === "video" ? "video" : "document"; // ปรับชื่อฟิลด์ให้ตรง backend
        form.append(fileField, file);
        form.append("contentType", contentType);
        form.append("title", title.trim());
        form.append("category", category.trim());
        form.append("description", description.trim());
        if (thumbnailUrl.trim()) form.append("thumbnailUrl", thumbnailUrl.trim());

        await axios.put(url, form, { headers: headersBase });
      } else {
        // ไม่มีไฟล์ → ส่ง JSON
        const payload = {
          contentType,
          title: title.trim(),
          category: category.trim(),
          description: description.trim(),
          thumbnailUrl: thumbnailUrl.trim() || undefined,
        };
        await axios.put(url, payload, {
          headers: { ...headersBase, "Content-Type": "application/json" },
        });
      }

      // ดึงเวอร์ชันล่าสุดกลับมา
      const refreshed = await axios.get<Lesson>(url, { headers: headersBase });
      onUpdated?.(refreshed.data);
      onClose();
    } catch (err) {
      console.error("❌ Update failed:", err);
      alert("Failed to update lesson.");
    } finally {
      setSaving(false);
    }
  };

  const accept = contentType === "video"
    ? "video/*"
    : ".pdf,.doc,.docx,.ppt,.pptx,.png,.jpeg";

  const modal = (
    <div
      className="fixed inset-0 bg-black/50 z-[9999] flex items-center justify-center p-4"
      onClick={onClose}
      aria-modal="true"
      role="dialog"
    >
      <div className="bg-white rounded-xl shadow-xl w-full max-w-lg p-6" onClick={stop}>
        <div className="flex items-center justify-between mb-4">
          <div className="w-full">
            <h2 className="text-lg font-semibold text-center">Edit Learning Content</h2>
          </div>
          <button onClick={onClose} className="text-gray-500 hover:text-gray-700" aria-label="Close" type="button">
            <X size={18} />
          </button>
        </div>

        {loading ? (
          <p className="text-gray-500">Loading…</p>
        ) : (
          <form className="space-y-4" onSubmit={handleSubmit}>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Thumbnail URL</label>
              <input
                value={thumbnailUrl}
                onChange={(e) => setThumbnailUrl(e.target.value)}
                className="w-full border rounded-lg px-3 py-2"
                placeholder="https://..."
                type="url"
                disabled={saving}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Title</label>
              <input
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                className="w-full border rounded-lg px-3 py-2"
                placeholder="Lesson title"
                required
                disabled={saving}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Category</label>
              <input
                value={category}
                onChange={(e) => setCategory(e.target.value)}
                className="w-full border rounded-lg px-3 py-2"
                placeholder="Category"
                required
                disabled={saving}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
              <textarea
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                className="w-full h-40 border rounded-lg px-3 py-2"
                placeholder="Description"
                required
                disabled={saving}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Content Type</label>
              <div className="px-3 py-2 border rounded-lg bg-gray-100 text-gray-700 select-none">
                {contentType === "video" ? "Video" : "Document"}
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                {contentType === "video" ? "Upload Video" : "Upload Document"}
              </label>
              <input
                type="file"
                accept={accept}
                onChange={(e) => setFile(e.target.files?.[0] ?? null)}
                disabled={saving}
                className="w-full border rounded-lg px-3 py-2"
              />
              {file && <p className="text-xs text-gray-500 mt-1">Selected: {file.name}</p>}
            </div>

            <div className="flex justify-end gap-3 pt-2">
              <button type="button" onClick={onClose} className="px-4 py-2 rounded-lg border" disabled={saving}>
                Cancel
              </button>
              <button
                type="submit"
                className="px-4 py-2 rounded-lg bg-blue-600 text-white hover:bg-blue-700 flex items-center gap-2 disabled:opacity-60"
                disabled={saving}
              >
                <Save size={16} />
                {saving ? "Saving..." : "Save"}
              </button>
            </div>
          </form>
        )}
      </div>
    </div>
  );

  return createPortal(modal, document.body);
};

export default EditLessonModal;
