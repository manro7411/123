import { useEffect, useState, useContext } from "react";
import { createPortal } from "react-dom";
import { X, Save } from "lucide-react";
import axios from "axios";
import { AuthContext } from "../../../Authentication/AuthContext";

/** รูปแบบบทเรียนเต็ม */
export interface Lesson {
  id: number;
  title: string;
  thumbnailUrl?: string;
  category: string;
  description: string;
  contentType: "video" | "document";
}

/** รูปแบบบทเรียนที่ใช้แสดงลิสต์ (อาจไม่ครบทุกฟิลด์) */
export type LessonPreview = {
  id: number;
  title: string;
  category: string;
  thumbnailUrl?: string;
  description?: string;
  contentType?: "video" | "document";
};

interface EditLessonModalProps {
  open: boolean;
  /** initial ใช้ได้ทั้งของจริงหรือข้อมูลคร่าว ๆ จากลิสต์ */
  initial: LessonPreview;
  onClose: () => void;
  /** คืนค่า Lesson ล่าสุดให้ parent อัปเดตรายการ */
  onUpdated?: (updated: Lesson) => void;
}

const EditLessonModal = ({ open, initial, onClose, onUpdated }: EditLessonModalProps) => {
  const { token } = useContext(AuthContext);

  // ฟอร์ม
  const [title, setTitle] = useState(initial.title);
  const [category, setCategory] = useState(initial.category);
  const [description, setDescription] = useState(initial.description ?? "");
  const [thumbnailUrl, setThumbnailUrl] = useState(initial.thumbnailUrl ?? "");
  const [contentType, setContentType] = useState<"video" | "document">(
    (initial.contentType as "video" | "document") || "video"
  );
  const [file, setFile] = useState<File | null>(null);

  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);

  // โหลดรายละเอียดล่าสุดเสมอเมื่อเปิด
  useEffect(() => {
    if (!open) return;

    const load = async () => {
      setLoading(true);
      try {
        const res = await axios.get<Lesson>(`/api/learning/${initial.id}`, {
          headers: token ? { Authorization: `Bearer ${token}` } : undefined,
        });
        const data = res.data;
        setTitle(data.title);
        setCategory(data.category);
        setDescription(data.description ?? "");
        setThumbnailUrl(data.thumbnailUrl ?? "");
        setContentType((data.contentType?.toLowerCase() as "video" | "document") || "video");
        setFile(null);
      } catch (err) {
        console.error("Failed to fetch lesson details:", err);
        // ถ้าดึงไม่ได้ให้ใช้ค่า initial ต่อไป
      } finally {
        setLoading(false);
      }
    };

    load();
  }, [open, initial.id, token]);

  if (!open) return null;

  const stop = (e: React.MouseEvent) => e.stopPropagation();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setSaving(true);

    const headersBase = token ? { Authorization: `Bearer ${token}` } : undefined;
    const url = `/api/learning/${initial.id}`;

    try {
      if (file) {
        // มีไฟล์ → ส่ง multipart/form-data
        const form = new FormData();
        const fileField = contentType === "video" ? "video" : "document"; // ปรับตาม backend
        form.append(fileField, file);
        form.append("contentType", contentType);
        form.append("title", title.trim());
        form.append("category", category.trim());
        form.append("description", description.trim());
        if (thumbnailUrl.trim()) form.append("thumbnailUrl", thumbnailUrl.trim());

        await axios.put(url, form, { headers: headersBase });
      } else {
        // ไม่มีไฟล์ → ส่ง JSON
        const payload = {
          contentType,
          title: title.trim(),
          category: category.trim(),
          description: description.trim(),
          thumbnailUrl: thumbnailUrl.trim() || undefined,
        };
        await axios.put(url, payload, {
          headers: { ...headersBase, "Content-Type": "application/json" },
        });
      }

      // ดึงข้อมูลล่าสุดหลังอัปเดต
      const refreshed = await axios.get<Lesson>(url, { headers: headersBase });
      onUpdated?.(refreshed.data);
      onClose();
    } catch (err) {
      console.error("❌ Update failed:", err);
      alert("Failed to update lesson.");
    } finally {
      setSaving(false);
    }
  };

  const accept =
    contentType === "video"
      ? "video/*"
      : ".pdf,.doc,.docx,.ppt,.pptx,.png,.jpeg";

  const modal = (
    <div
      className="fixed inset-0 bg-black/50 z-[9999] flex items-center justify-center p-4"
      onClick={onClose}
      aria-modal="true"
      role="dialog"
    >
      <div className="bg-white rounded-xl shadow-xl w-full max-w-lg p-6" onClick={stop}>
        <div className="flex items-center justify-between mb-4">
          <div className="w-full">
            <h2 className="text-lg font-semibold text-center">Edit Learning Content</h2>
          </div>
          <button
            onClick={onClose}
            className="text-gray-500 hover:text-gray-700"
            aria-label="Close"
            type="button"
          >
            <X size={18} />
          </button>
        </div>

        {loading ? (
          <p className="text-gray-500">Loading…</p>
        ) : (
          <form className="space-y-4" onSubmit={handleSubmit}>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Thumbnail URL</label>
              <input
                value={thumbnailUrl}
                onChange={(e) => setThumbnailUrl(e.target.value)}
                className="w-full border rounded-lg px-3 py-2"
                placeholder="https://..."
                type="url"
                disabled={saving}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Title</label>
              <input
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                className="w-full border rounded-lg px-3 py-2"
                placeholder="Lesson title"
                required
                disabled={saving}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Category</label>
              <input
                value={category}
                onChange={(e) => setCategory(e.target.value)}
                className="w-full border rounded-lg px-3 py-2"
                placeholder="Category"
                required
                disabled={saving}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
              <textarea
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                className="w-full h-40 border rounded-lg px-3 py-2"
                placeholder="Description"
                required
                disabled={saving}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Content Type</label>
              <div className="px-3 py-2 border rounded-lg bg-gray-100 text-gray-700 select-none">
                {contentType === "video" ? "Video" : "Document"}
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                {contentType === "video" ? "Upload Video" : "Upload Document"}
              </label>
              <input
                type="file"
                accept={accept}
                onChange={(e) => setFile(e.target.files?.[0] ?? null)}
                disabled={saving}
                className="w-full border rounded-lg px-3 py-2"
              />
              {file && <p className="text-xs text-gray-500 mt-1">Selected: {file.name}</p>}
            </div>

            <div className="flex justify-end gap-3 pt-2">
              <button type="button" onClick={onClose} className="px-4 py-2 rounded-lg border" disabled={saving}>
                Cancel
              </button>
              <button
                type="submit"
                className="px-4 py-2 rounded-lg bg-blue-600 text-white hover:bg-blue-700 flex items-center gap-2 disabled:opacity-60"
                disabled={saving}
              >
                <Save size={16} />
                {saving ? "Saving..." : "Save"}
              </button>
            </div>
          </form>
        )}
      </div>
    </div>
  );

  return createPortal(modal, document.body);
};

export default EditLessonModal;

---------------------------------

import { useContext, useEffect, useState } from "react";
import axios from "axios";
import { AuthContext } from "../../../Authentication/AuthContext";
import AdminSidebarWidget from "../Widgets/AdminSideBar";
import { useNavigate } from "react-router-dom";
import { Pencil } from "lucide-react";
import EditLessonModal, { type Lesson, type LessonPreview } from "./EditLessonModal";

interface UserProgress {
  userEmail: string;
  percent: number;
  lessonId: number;
  score: number;
}

const AdminTaskManagementPage = () => {
  const { token } = useContext(AuthContext);
  const navigate = useNavigate();

  const [lessons, setLessons] = useState<LessonPreview[]>([]);
  const [selectedLesson, setSelectedLesson] = useState<LessonPreview | null>(null);
  const [progressList, setProgressList] = useState<UserProgress[]>([]);
  const [selectedUser, setSelectedUser] = useState<UserProgress | null>(null);
  const [loading, setLoading] = useState(false);

  // Edit modal
  const [showEditModal, setShowEditModal] = useState(false);

  const authHeader = token ? { Authorization: `Bearer ${token}` } : undefined;

  const fetchLessons = async () => {
    setLoading(true);
    try {
      // อาจได้ฟิลด์ไม่ครบ (description/contentType) แต่โอเคเพราะ modal จะโหลดเพิ่ม
      const res = await axios.get<LessonPreview[]>("/api/learning?mine=true", {
        headers: authHeader,
      });
      setLessons(res.data);
    } catch (err) {
      console.error("❌ Failed to load lessons:", err);
      alert("Failed to fetch lessons.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (!token) {
      navigate("/");
      return;
    }
    fetchLessons();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [token, navigate]);

  const handleSelectLesson = async (lesson: LessonPreview) => {
    setSelectedLesson(lesson);
    setSelectedUser(null);

    try {
      const res = await axios.get<UserProgress[]>("/api/user/progress/all", {
        headers: authHeader,
      });
      const lessonProgress = res.data.filter((p) => p.lessonId === lesson.id);
      const latestByUser = new Map<string, UserProgress>();
      lessonProgress.forEach((entry) => {
        latestByUser.set(entry.userEmail, entry);
      });
      setProgressList(Array.from(latestByUser.values()));
    } catch (err) {
      console.error("❌ Failed to fetch progress:", err);
      alert("Failed to load progress data.");
    }
  };

  const handleDeleteLesson = async (id: number) => {
    if (!window.confirm("Delete this lesson? This cannot be undone!")) return;

    try {
      await axios.delete(`/api/learning/${id}`, {
        headers: authHeader,
      });
      setLessons((prev) => prev.filter((l) => l.id !== id));
      if (selectedLesson?.id === id) {
        setSelectedLesson(null);
        setProgressList([]);
        setSelectedUser(null);
      }
      alert("✅ Lesson deleted");
    } catch (err) {
      console.error("❌ Delete failed:", err);
      alert("Failed to delete lesson.");
    }
  };

  const handleOpenEdit = (lesson: LessonPreview) => {
    setSelectedLesson(lesson);
    setShowEditModal(true);
  };

  if (!token) return null;

  return (
    <div className="min-h-screen bg-gray-50 flex">
      <AdminSidebarWidget />

      <main className="flex-1 p-10 space-y-6">
        <h1 className="text-2xl font-bold text-blue-800 border-b pb-2">
          🧙 Task Management
        </h1>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Lesson List */}
          <section className="col-span-1 space-y-4">
            {loading ? (
              <p className="text-gray-500">Loading lessons...</p>
            ) : (
              lessons.map((lesson) => (
                <div
                  key={lesson.id}
                  className={`relative cursor-pointer p-4 rounded-xl shadow border transition-all
                  ${
                    selectedLesson?.id === lesson.id
                      ? "bg-blue-50 border-blue-500"
                      : "bg-white hover:border-blue-500"
                  }`}
                >
                  <div onClick={() => handleSelectLesson(lesson)}>
                    <h3 className="font-semibold text-lg text-gray-800">{lesson.title}</h3>
                    <p className="text-sm text-gray-500">ID: {lesson.id}</p>
                    <p className="text-xs text-purple-600 font-semibold uppercase">
                      {lesson.category}
                    </p>
                  </div>

                  {/* Edit button */}
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      handleOpenEdit(lesson);
                    }}
                    className="absolute top-2 right-10 text-gray-500 hover:text-gray-700"
                    title="Edit lesson"
                    type="button"
                    aria-label="Edit lesson"
                  >
                    <Pencil size={18} />
                  </button>

                  {/* Delete button */}
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      handleDeleteLesson(lesson.id);
                    }}
                    className="absolute top-2 right-2 text-red-500 hover:text-red-700"
                    title="Delete lesson"
                    type="button"
                    aria-label="Delete lesson"
                  >
                    🗑
                  </button>
                </div>
              ))
            )}
          </section>

          {/* User Progress List */}
          <section className="col-span-1 space-y-4">
            {progressList.length === 0 && selectedLesson && (
              <p className="text-gray-400">No progress yet…</p>
            )}
            {progressList.map((user) => (
              <div
                key={`${user.lessonId}-${user.userEmail}`}
                className="p-4 bg-white rounded-xl shadow flex justify-between items-center"
              >
                <div>
                  <p className="font-medium text-gray-800">{user.userEmail}</p>
                  <p className="text-sm text-gray-400">Lesson ID: {user.lessonId}</p>
                </div>
                <button
                  className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-1 rounded shadow"
                  onClick={() => setSelectedUser(user)}
                >
                  View
                </button>
              </div>
            ))}
          </section>

          {/* Right pane */}
          <section className="col-span-1 bg-white p-6 rounded-xl shadow">
            <h2 className="text-lg font-semibold mb-4 text-gray-700">
              Quick overview of employee progress
            </h2>

            {selectedUser ? (
              <div className="space-y-4">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-gray-200 rounded-full" />
                  <div>
                    <p className="font-medium text-gray-800">{selectedUser.userEmail}</p>
                    <p className="text-sm text-gray-500">Lesson ID: {selectedUser.lessonId}</p>
                  </div>
                </div>

                <div>
                  <p className="text-sm text-gray-500">Progress</p>
                  <progress value={selectedUser.percent} max={100} className="w-full h-2 mt-1" />
                  <p className="text-right text-xs text-gray-500">{selectedUser.percent}%</p>
                </div>

                <p className="text-sm text-gray-500">
                  Quiz:{" "}
                  {selectedUser.score > 0 ? (
                    <span className="text-green-600 font-semibold">
                      Finished ({selectedUser.score} pts)
                    </span>
                  ) : (
                    <span className="text-red-500">Not yet</span>
                  )}
                </p>
              </div>
            ) : (
              <p className="text-gray-400">← Select a user to see details</p>
            )}
          </section>
        </div>
      </main>

      {/* Edit Lesson Modal */}
      {showEditModal && selectedLesson && (
        <EditLessonModal
          open={showEditModal}
          initial={selectedLesson}
          onClose={() => setShowEditModal(false)}
          onUpdated={(updated: Lesson) => {
            setLessons((prev) => prev.map((l) => (l.id === updated.id ? { ...l, ...updated } : l)));
            setSelectedLesson((prev) => (prev && prev.id === updated.id ? { ...prev, ...updated } : prev));
          }}
        />
      )}
    </div>
  );
};

export default AdminTaskManagementPage;

