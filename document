package model;

import jakarta.persistence.*;

import java.time.LocalDateTime;
import java.util.UUID;

@Entity
@Table(name = "user_feedback")
public class UserFeedbackEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(columnDefinition = "uuid", updatable = false, nullable = false)
    private UUID id;


    @Column(nullable = false)
    private String feedback;

    @Column(name = "user_email")
    private String userEmail;

    @Column(name = "author_avatar_url")
    private String authorAvatarUrl;

    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "learning_content_id", nullable = false)
    private LearningContent learningContent;

    public String getFeedback() {
        return feedback;
    }

    public void setFeedback(String feedback) {
        this.feedback = feedback;
    }

    public UUID getId() {
        return id;
    }

    public void setId(UUID id) {
        this.id = id;
    }

    public String getUserEmail() {
        return userEmail;
    }

    public void setUserEmail(String userEmail) {
        this.userEmail = userEmail;
    }

    public String getAuthorAvatarUrl() {
        return authorAvatarUrl;
    }

    public void setAuthorAvatarUrl(String authorAvatarUrl) {
        this.authorAvatarUrl = authorAvatarUrl;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public LearningContent getLearningContent() {
        return learningContent;
    }

    public void setLearningContent(LearningContent learningContent) {
        this.learningContent = learningContent;
    }
}
---
package Testing;

import jakarta.inject.Inject;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import model.LearningContent;
import model.UserFeedbackEntity;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

@Path("/feedback")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class UserFeedbackResource {

    @Inject
    EntityManager em;

    @GET
    public List<UserFeedbackEntity> getAllFeedback() {
        return em.createQuery("SELECT f FROM UserFeedbackEntity f", UserFeedbackEntity.class)
                .getResultList();
    }

    @POST
    @Transactional
    public Response createFeedback(UserFeedbackEntity feedback) {
        if (feedback.getLearningContent() == null || feedback.getLearningContent().getId() == null) {
            return Response.status(Response.Status.BAD_REQUEST).entity("Learning content ID is required").build();
        }

        LearningContent learningContent = em.find(LearningContent.class, feedback.getLearningContent().getId());
        if (learningContent == null) {
            return Response.status(Response.Status.BAD_REQUEST).entity("Invalid learning content ID").build();
        }

        feedback.setLearningContent(learningContent);
        feedback.setCreatedAt(LocalDateTime.now());
        em.persist(feedback);

        return Response.status(Response.Status.CREATED).entity(feedback).build();
    }
    @GET
    @Path("/{id}")
    public UserFeedbackEntity getFeedbackById(@PathParam("id") UUID id) {
        return em.find(UserFeedbackEntity.class, id);
    }

    @DELETE
    @Path("/{id}")
    @Transactional
    public Response deleteFeedback(@PathParam("id") UUID id) {
        UserFeedbackEntity feedback = em.find(UserFeedbackEntity.class, id);
        if (feedback != null) {
            em.remove(feedback);
            return Response.noContent().build();
        }
        return Response.status(Response.Status.NOT_FOUND).build();
    }
}
