package PointSystem.Resources;
import PointSystem.DTOs.CouponUsageTrackingDTO;
import PointSystem.DTOs.CreatedCouponDTO;
import PointSystem.Entity.CouponEntity;
import PointSystem.Entity.CouponUsageEntity;
import jakarta.annotation.security.RolesAllowed;
import jakarta.inject.Inject;
import jakarta.persistence.EntityManager;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.*;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.core.Context;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.core.SecurityContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.UUID;

@Path("/coupon-usage-tracking")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class CouponUsageTrackingResources {
    public static final String ROLE_USER = "user"
            , ROLE_ADMIN = "admin"
            , ROLE_EMPLOYEE = "employee"
            , ROLE_SUPERVISOR = "supervisor"
            , ROLE_ADMINISTRATOR = "administrator";

    public static final Logger log = LoggerFactory.getLogger(CreateCouponForUserResources.class);

    @Inject
    EntityManager entityManager;

    @GET
    @Transactional
    @RolesAllowed(ROLE_USER)
    @Path("coupon-redemptions/{userEmail}")
    public Response getCouponRedemptionsByUser(@PathParam("userEmail") String userEmail, @Context SecurityContext securityContext) {
        String currentUser = securityContext.getUserPrincipal().getName();
        log.info("User {} is retrieving coupon redemptions for userEmail: {}", currentUser, userEmail);

        try {
            var query = entityManager.createQuery(
                    "SELECT u FROM CouponUsageEntity u WHERE u.userEmail = :userEmail", CouponUsageEntity.class);
            query.setParameter("userEmail", userEmail);
            var redemptions = query.getResultList();

            var responseList = redemptions.stream().map(u -> {
                var dto = new CouponUsageTrackingDTO();
                dto.setId(u.getId());
                dto.setUserEmail(u.getUserEmail());
                dto.setCouponCode(u.getCouponCode());
                dto.setCouponTitle(u.getCouponTitle());
                dto.setCouponDescription(u.getCouponDescription());
                dto.setUserEarnPoints(u.getUserEarnPoints());
                dto.setCurrentUserPoints(u.getCurrentUserPoints());
                dto.setRedeemTime(u.getRedeemTime());
                dto.setRedeemed(u.getRedeemed());
                return dto;
            }).toList();

            return Response.ok(responseList).build();
        } catch (Exception e) {
            log.error("Error retrieving coupon redemptions for userEmail: {}", userEmail, e);
            return Response.status(Response.Status.INTERNAL_SERVER_ERROR)
                    .entity("An error occurred while retrieving coupon redemptions.")
                    .build();
        }
    }

    @GET
    @Transactional
    @Path("Get-All-Coupons-For-User")
    @RolesAllowed(ROLE_USER)
    public Response getAllCouponsForUser(@Context SecurityContext securityContext) {
        String currentUser = securityContext.getUserPrincipal().getName();
        log.info("User -> {} is retrieving all available coupons", currentUser);

        try {
            var query = entityManager.createQuery(
                    "SELECT c FROM CouponEntity c", CouponEntity.class);
            var coupons = query.getResultList();

            var responseList = coupons.stream().map(c -> {
                var dto = new CreatedCouponDTO();
                dto.setId(c.getId());
                dto.setCouponCode(c.getCouponCode());
                dto.setCouponTitle(c.getCouponTitle());
                dto.setCouponDescription(c.getCouponDescription());
                dto.setActive(c.getActive());
                dto.setStartDate(c.getStartDate());
                dto.setEndDate(c.getEndDate());
                dto.setPointsRequired(c.getPointRequirement());
                return dto;
            }).toList();

            return Response.ok(responseList).build();
        } catch (Exception e) {
            log.error("Error retrieving coupons for user", e);
            return Response.status(Response.Status.INTERNAL_SERVER_ERROR)
                    .entity("An error occurred while retrieving coupons.")
                    .build();
        }
    }

    @POST
    @Transactional
    @Path("coupon-redemptions")
    @RolesAllowed(ROLE_USER)
    public Response createCouponRedemption(CouponUsageTrackingDTO request , @Context SecurityContext securityContext) {
        String currentUser = securityContext.getUserPrincipal().getName();
        UUID couponID = request.getCouponId();
        log.info("User {} is creating a CouponRedemption", currentUser);
        CouponEntity coupon = entityManager.find(CouponEntity.class, couponID);
        if (coupon == null) {
            log.warn("No CouponEntity found with ID: {}", couponID);
            return Response.status(Response.Status.BAD_REQUEST)
                    .entity("Invalid Coupon ID")
                    .build();
        }
        CouponUsageEntity usage = new CouponUsageEntity();
        usage.setUserEmail(request.getUserEmail());
        usage.setCouponCode(request.getCouponCode());
        usage.setCouponTitle(request.getCouponTitle());
        usage.setCoupon(coupon);
        usage.setCouponDescription(request.getCouponDescription());
        usage.setUserEarnPoints(request.getUserEarnPoints());
        usage.setCurrentUserPoints(request.getCurrentUserPoints());
        usage.setRedeemTime(request.getRedeemTime());
        usage.setRedeemed(true);

        entityManager.persist(usage);

        log.info("Successfully created CouponRedemption with ID: {}", request.getId());
        return Response.ok().entity("Coupon redeemed successfully").build();
    }
}

-----

import { useState, useEffect, useMemo } from "react";
import axios from "axios";
import { useUserProfile } from "../Lesson/hooks/useUserProfile";
import { usePointHistory } from "./hooks/userPointHistory";

interface Coupon {
  id: string;
  couponCode: string;
  couponTitle: string;
  couponDescription: string;
  pointsRequired: number;
  active: boolean;
  currentUserPoints?: number;
}

type RewardProps = {
  userPoints: number;
  token: string;
};

const Reward = ({ userPoints, token }: RewardProps) => {
  const [coupons, setCoupons] = useState<Coupon[]>([]);
  const [loadingCouponId, setLoadingCouponId] = useState<string | null>(null);

  const { email } = useUserProfile(token);
  const { HistoryDetails } = usePointHistory(token);

  // Build a set of redeemed coupon IDs from history
  const redeemedSet = useMemo(() => {
    const s = new Set<string>();
    for (const h of HistoryDetails) {
      if (h.isRedeemed && h.couponId) {
        s.add(h.couponId);
      }
    }
    return s;
  }, [HistoryDetails]);

  const isCouponRedeemed = (c: Coupon) => redeemedSet.has(c.id);

  useEffect(() => {
    const fetchCoupons = async () => {
      try {
        const res = await axios.get(
          "http://localhost:8080/coupon-usage-tracking/Get-All-Coupons-For-User",
          { headers: { Authorization: `Bearer ${token}` } }
        );
        if (Array.isArray(res.data)) {
          // Filter out redeemed coupons
          const filtered = res.data.filter((c: Coupon) => !redeemedSet.has(c.id));
          setCoupons(filtered);
        }
      } catch (err) {
        console.error("Failed to fetch coupons:", err);
      }
    };
    fetchCoupons();
  }, [token, redeemedSet]);

  const handleRedeem = async (coupon: Coupon) => {
    if (isCouponRedeemed(coupon)) return;
    if (userPoints < coupon.pointsRequired) return;
    setLoadingCouponId(coupon.id);

    const payload = {
      id: crypto.randomUUID(),
      userEmail: email,
      couponCode: coupon.couponCode,
      couponTitle: coupon.couponTitle,
      couponDescription: coupon.couponDescription,
      userEarnPoints: coupon.pointsRequired,
      couponId: coupon.id,
      redeemTime: new Date().toISOString(),
      currentUserPoints: userPoints - coupon.pointsRequired,
    };

    try {
      await axios.post(
        "http://localhost:8080/coupon-usage-tracking/coupon-redemptions",
        payload,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      alert(`คุณได้ Redeem ${coupon.couponTitle} เรียบร้อยแล้ว!`);
      // Remove redeemed coupon from the list
      setCoupons((prev) => prev.filter((c) => c.id !== coupon.id));
    } catch (err) {
      alert("Redeem failed.");
      console.error(err);
    } finally {
      setLoadingCouponId(null);
    }
  };

  return (
    <div className="space-y-4">
      <h2 className="text-xl font-bold text-gray-800">Reward Coupons</h2>
      {coupons.length === 0 ? (
        <div className="text-gray-500">No coupons available.</div>
      ) : (
        coupons.map((coupon) => {
          const canRedeem = coupon.active && userPoints >= coupon.pointsRequired;
          const isProcessing = loadingCouponId === coupon.id;
          const isRedeemed = isCouponRedeemed(coupon);

          return (
            <div
              key={coupon.id}
              className="flex items-center justify-between bg-blue-100 px-6 py-4 rounded-full shadow text-sm"
            >
              <div>
                <div className="text-base font-semibold text-blue-800">
                  {coupon.couponTitle}
                </div>
                <div className="text-xs text-blue-600">
                  {coupon.pointsRequired} points to redeem
                </div>
                <div className="text-xs text-gray-700">
                  {coupon.couponDescription}
                </div>
              </div>
              <button
                disabled={!canRedeem || isRedeemed || isProcessing}
                onClick={() => handleRedeem(coupon)}
                className={`px-4 py-1 rounded-full font-medium ${
                  isRedeemed
                    ? "bg-gray-300 text-gray-500 cursor-not-allowed"
                    : canRedeem && !isProcessing
                    ? "bg-blue-600 hover:bg-blue-700 text-white"
                    : "bg-gray-300 text-gray-500 cursor-not-allowed"
                }`}
              >
                {isRedeemed
                  ? "Redeemed"
                  : isProcessing
                  ? "Processing..."
                  : "Redeem"}
              </button>
            </div>
          );
        })
      )}
    </div>
  );
};

export default Reward;
