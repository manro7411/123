import { useEffect, useMemo, useState } from "react";
import axios from "axios";
import SupervisorSidebarWidget from "../Widgets/SupervisorSideBar";
import { Download, Filter, RefreshCw } from "lucide-react";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  BarChart,
  Bar,
  Legend,
} from "recharts";

// ----------------------
// Axios instance
// ----------------------
const axiosClient = axios.create({
  baseURL: import.meta.env.VITE_API_BASE_URL || "/",
});
axiosClient.interceptors.request.use((config) => {
  const token = localStorage.getItem("token") || sessionStorage.getItem("token");
  if (token) {
    config.headers = { ...(config.headers || {}), Authorization: `Bearer ${token}` };
  }
  return config;
});

// ----------------------
// Types (สอดคล้อง DTO ของ /report/learning)
// ----------------------
export type Team = { id: string; name: string; supervisorId?: string | null; memberIds?: string[] };
export type TeamMember = { userId: string; name?: string; role: string };

export type UserLearningSummary = {
  userId: string;            // backend คืนเป็น “อีเมล (lowercase)”
  name?: string | null;
  totalModules: number;
  completedModules: number;
  avgScore: number | null;   // 0..100
  timeSpentMinutes: number;  // minutes
  lastActiveAt?: string | null; // ISO
};

export type UserDailyProgress = {
  date: string;              // YYYY-MM-DD
  completed: number;
  minutes: number;
  scoreAvg: number | null;
};

export type UserModuleDetail = {
  moduleId: string;
  moduleTitle: string;
  status: "not_started" | "in-progress" | "completed";
  score: number | null;
  totalQuestions?: number | null;
  timeSpentMinutes: number;
  lastActiveAt?: string | null;
};

export type LearningReportPayload = {
  teamSummary: {
    teamId: string;
    teamName: string;
    totalLearners: number;
    avgCompletionRate: number;  // 0..1
    avgScore: number | null;    // 0..100
    totalTimeSpentMinutes: number;
  };
  users: Array<{
    summary: UserLearningSummary;
    daily: UserDailyProgress[];
    modules: UserModuleDetail[];
  }>;
};

// ----------------------
// Helpers
// ----------------------
function formatMinutes(min: number) {
  const h = Math.floor(min / 60);
  const m = min % 60;
  if (h <= 0) return `${m}m`;
  if (m <= 0) return `${h}h`;
  return `${h}h ${m}m`;
}

// JWT helper เพื่อหาผู้ใช้ปัจจุบัน (email/userId) จาก token หรือ /api/profile
function parseJwt(token: string | null): any | null {
  if (!token) return null;
  const parts = token.split(".");
  if (parts.length !== 3) return null;
  try {
    const payload = JSON.parse(atob(parts[1].replace(/-/g, "+").replace(/_/g, "/")));
    return payload;
  } catch {
    return null;
  }
}

async function resolveCurrentUserId(): Promise<string | null> {
  const cached = localStorage.getItem("userId") || sessionStorage.getItem("userId");
  if (cached) return cached;
  const token = localStorage.getItem("token") || sessionStorage.getItem("token");
  const payload = parseJwt(token);
  const jwtId = payload?.sub || payload?.userId || payload?.email || null;
  if (jwtId) return String(jwtId);
  try {
    const { data } = await axiosClient.get<any>("/api/profile");
    return data?.id || data?.userId || data?.email || null;
  } catch {
    return null;
  }
}

// ----------------------
// Main Component (เชื่อมต่อ Backend จริง)
// ----------------------
export default function Svplearningreport() {
  // filters
  const [teams, setTeams] = useState<Team[]>([]);
  const [selectedTeamId, setSelectedTeamId] = useState<string>("");
  const [members, setMembers] = useState<TeamMember[]>([]);
  const [selectedUserId, setSelectedUserId] = useState<string | null>(null);

  // date range: default 7 วันล่าสุด
  const today = useMemo(() => new Date(), []);
  const weekAgo = useMemo(() => new Date(Date.now() - 6 * 24 * 3600 * 1000), []);
  const toDateInput = (d: Date) => d.toISOString().slice(0, 10);
  const [startDate, setStartDate] = useState(toDateInput(weekAgo));
  const [endDate, setEndDate] = useState(toDateInput(today));

  // data
  const [report, setReport] = useState<LearningReportPayload | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [booting, setBooting] = useState(true);

  // โหลดทีมของฉัน
  useEffect(() => {
    (async () => {
      setBooting(true);
      setError(null);
      try {
        const uid = await resolveCurrentUserId();
        if (!uid) {
          setError("ไม่พบผู้ใช้ปัจจุบัน (userId) — ตรวจสอบโทเคน/การเข้าสู่ระบบ");
          setBooting(false);
          return;
        }
        // แก้ path ให้ตรง backend ของคุณ (มีทั้ง /api/teams/my-teams?userId=...)
        const { data } = await axiosClient.get<Team[]>("/api/teams/my-teams", { params: { userId: uid } });
        setTeams(data || []);
        if (data?.length) {
          setSelectedTeamId(data[0].id);
        } else {
          setSelectedTeamId("");
        }
      } catch (e: any) {
        setError(e?.response?.data?.message || "โหลดทีมไม่สำเร็จ");
      } finally {
        setBooting(false);
      }
    })();
  }, []);

  // เมื่อเปลี่ยนทีม -> โหลดสมาชิก
  useEffect(() => {
    (async () => {
      if (!selectedTeamId) {
        setMembers([]);
        setSelectedUserId(null);
        setReport(null);
        return;
      }
      setError(null);
      try {
        const { data } = await axiosClient.get<TeamMember[]>(`/api/teams/${selectedTeamId}/members`, {
          params: { order: "roleThenJoined" },
        });
        // backend คืน TeamMemberDTO = { userId, name, role }
        setMembers(data || []);
        // reset ถ้า user เดิมไม่อยู่
        setSelectedUserId((prev) => (prev && (data || []).some((m: TeamMember) => m.userId === prev)) ? prev : null);
      } catch (e: any) {
        setMembers([]);
        setSelectedUserId(null);
        setError(e?.response?.data?.message || "โหลดสมาชิกทีมไม่สำเร็จ");
      }
    })();
  }, [selectedTeamId]);

  // โหลดรายงานครั้งแรก (หลังมีทีม)
  useEffect(() => {
    if (!selectedTeamId) return;
    fetchReport();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectedTeamId]);

  // เรียก backend report
  const fetchReport = async () => {
    if (!selectedTeamId) return;
    setLoading(true);
    setError(null);
    try {
      const params: any = {
        teamId: selectedTeamId,
        start: startDate,
        end: endDate,
      };
      if (selectedUserId) params.userId = selectedUserId; // *** หมายเหตุ: backend คาดหวัง userId (ค่าที่เก็บใน memberId) ***

      // แก้ path ให้ตรงกับ resource ของคุณ (ตัวอย่างนี้ใช้ /report/learning ตามที่เราสร้าง)
      const { data } = await axiosClient.get<LearningReportPayload>("/report/learning", { params });
      setReport(data || null);
    } catch (e: any) {
      setReport(null);
      setError(e?.response?.data || e?.message || "โหลดรายงานไม่สำเร็จ");
    } finally {
      setLoading(false);
    }
  };

  const teamSummary = report?.teamSummary || null;
  const users = report?.users || [];
  const selectedUser = useMemo(
    () => users.find((u) => u.summary.userId === (selectedUserId ?? "")) || null,
    [users, selectedUserId]
  );

  // export helpers
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  function downloadCsv(filename: string, rows: Array<Record<string, any>>) {
    if (!rows?.length) return;
    const head = Object.keys(rows[0]);
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const escape = (val: any) => typeof val === "string" ? `"${val.replace(/"/g, '""')}"` : (val ?? "");
    const csv = [head.join(",")].concat(rows.map(r => head.map(k => escape(r[k])).join(","))).join("\n");
    const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url; a.download = filename; a.click();
    URL.revokeObjectURL(url);
  }

  const exportTeamCsv = () => {
    const rows = users.map(u => ({
      userId: u.summary.userId,
      name: u.summary.name || "",
      totalModules: u.summary.totalModules,
      completedModules: u.summary.completedModules,
      completionRate: u.summary.totalModules ? (u.summary.completedModules / u.summary.totalModules) : 0,
      avgScore: u.summary.avgScore ?? "",
      timeSpentMinutes: u.summary.timeSpentMinutes,
      lastActiveAt: u.summary.lastActiveAt || "",
    }));
    downloadCsv(`team-learning-${selectedTeamId}.csv`, rows);
  };

  const exportUserModulesCsv = () => {
    if (!selectedUser) return;
    const rows = selectedUser.modules.map(m => ({
      moduleId: m.moduleId,
      moduleTitle: m.moduleTitle,
      status: m.status,
      score: m.score ?? "",
      totalQuestions: m.totalQuestions ?? "",
      timeSpentMinutes: m.timeSpentMinutes,
      lastActiveAt: m.lastActiveAt || "",
    }));
    downloadCsv(`user-modules-${selectedUser.summary.userId}.csv`, rows);
  };

  return (
    <div className="flex h-screen bg-gray-50">
      <SupervisorSidebarWidget />

      <div className="flex-1 p-6 md:p-8 overflow-y-auto space-y-6">
        {/* Header */}
        <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-3">
          <h1 className="text-2xl md:text-3xl font-bold">Learning Report</h1>
          <div className="flex gap-2">
            <button
              className="inline-flex items-center gap-2 rounded-xl border px-3 py-2 bg-white hover:bg-gray-50"
              onClick={fetchReport}
              disabled={loading || !selectedTeamId}
              title="Refresh"
            >
              <RefreshCw className="w-4 h-4" /> รีเฟรช
            </button>
            <button
              className="inline-flex items-center gap-2 rounded-xl border px-3 py-2 bg-white hover:bg-gray-50"
              onClick={exportTeamCsv}
              disabled={!users.length}
              title="Export team CSV"
            >
              <Download className="w-4 h-4" /> ส่งออกทีม (CSV)
            </button>
            {selectedUser && (
              <button
                className="inline-flex items-center gap-2 rounded-xl border px-3 py-2 bg-white hover:bg-gray-50"
                onClick={exportUserModulesCsv}
                title="Export user CSV"
              >
                <Download className="w-4 h-4" /> ส่งออกบุคคล (CSV)
              </button>
            )}
          </div>
        </div>

        {/* Filters */}
        <div className="rounded-2xl border bg-white p-4">
          <div className="flex items-center gap-2 mb-4">
            <Filter className="w-4 h-4" />
            <div className="font-semibold">ตัวกรองรายงาน</div>
          </div>

          {/* เลือกทีม/สมาชิก/ช่วงวัน */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            {/* Team */}
            <div className="space-y-1">
              <div className="text-xs uppercase opacity-60">ทีม</div>
              <select
                className="w-full rounded-xl border px-3 py-2 bg-white"
                value={selectedTeamId}
                onChange={(e) => setSelectedTeamId(e.target.value)}
                disabled={booting}
              >
                {!teams.length && <option value="">— ไม่มีทีม —</option>}
                {teams.map(t => <option key={t.id} value={t.id}>{t.name}</option>)}
              </select>
            </div>

            {/* User */}
            <div className="space-y-1">
              <div className="text-xs uppercase opacity-60">สมาชิก</div>
              <select
                className="w-full rounded-xl border px-3 py-2 bg-white"
                value={selectedUserId || ""}
                onChange={(e) => setSelectedUserId(e.target.value || null)}
                disabled={!members.length}
              >
                <option value="">— ทั้งทีม —</option>
                {members.map(m => (
                  <option key={m.userId} value={m.userId}>{m.name || m.userId}</option>
                ))}
              </select>
            </div>

            {/* Date range */}
            <div className="space-y-1">
              <div className="text-xs uppercase opacity-60">เริ่ม</div>
              <input
                type="date"
                className="w-full rounded-xl border px-3 py-2 bg-white"
                value={startDate}
                onChange={(e) => setStartDate(e.target.value)}
              />
            </div>
            <div className="space-y-1">
              <div className="text-xs uppercase opacity-60">สิ้นสุด</div>
              <input
                type="date"
                className="w-full rounded-xl border px-3 py-2 bg-white"
                value={endDate}
                onChange={(e) => setEndDate(e.target.value)}
              />
            </div>
          </div>

          <div className="mt-4">
            <button
              className="rounded-xl px-4 py-2 border bg-blue-600 text-white hover:opacity-90"
              onClick={fetchReport}
              disabled={loading || !selectedTeamId}
            >
              {loading ? "กำลังโหลด..." : "ดูรายงาน"}
            </button>
          </div>
        </div>

        {/* Errors */}
        {error && (
          <div className="rounded-2xl border border-red-200 bg-red-50 p-3 text-red-700">{String(error)}</div>
        )}

        {/* Team Summary */}
        {teamSummary && (
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="rounded-2xl border bg-white p-4">
              <div className="text-xs uppercase opacity-60">ผู้เรียน</div>
              <div className="text-2xl font-bold">{teamSummary.totalLearners}</div>
            </div>
            <div className="rounded-2xl border bg-white p-4">
              <div className="text-xs uppercase opacity-60">อัตราเรียนจบเฉลี่ย</div>
              <div className="text-2xl font-bold">{Math.round(teamSummary.avgCompletionRate * 100)}%</div>
            </div>
            <div className="rounded-2xl border bg-white p-4">
              <div className="text-xs uppercase opacity-60">คะแนนเฉลี่ย</div>
              <div className="text-2xl font-bold">{teamSummary.avgScore ?? "-"}</div>
            </div>
            <div className="rounded-2xl border bg-white p-4">
              <div className="text-xs uppercase opacity-60">เวลาที่ใช้รวม</div>
              <div className="text-2xl font-bold">{formatMinutes(teamSummary.totalTimeSpentMinutes)}</div>
            </div>
          </div>
        )}

        {/* Team table */}
        {!!users.length && (
          <div className="rounded-2xl border bg-white p-4">
            <div className="mb-3 flex items-center justify-between">
              <div className="font-semibold">สรุปรายบุคคล</div>
              <div className="text-sm opacity-60">ช่วง {startDate} → {endDate}</div>
            </div>
            <div className="overflow-auto">
              <table className="min-w-full text-sm">
                <thead>
                  <tr className="text-left border-b">
                    <th className="px-3 py-2">ผู้เรียน</th>
                    <th className="px-3 py-2">เรียนจบ / ทั้งหมด</th>
                    <th className="px-3 py-2">อัตราเรียนจบ</th>
                    <th className="px-3 py-2">คะแนนเฉลี่ย</th>
                    <th className="px-3 py-2">เวลาเรียนรวม</th>
                    <th className="px-3 py-2">Active ล่าสุด</th>
                    <th className="px-3 py-2">ดู</th>
                  </tr>
                </thead>
                <tbody>
                  {users.map((u) => {
                    const rate = u.summary.totalModules ? (u.summary.completedModules / u.summary.totalModules) : 0;
                    return (
                      <tr key={u.summary.userId} className="border-b hover:bg-gray-50">
                        <td className="px-3 py-2 whitespace-nowrap">{u.summary.name || u.summary.userId}</td>
                        <td className="px-3 py-2">{u.summary.completedModules} / {u.summary.totalModules}</td>
                        <td className="px-3 py-2">{Math.round(rate * 100)}%</td>
                        <td className="px-3 py-2">{u.summary.avgScore ?? "-"}</td>
                        <td className="px-3 py-2">{formatMinutes(u.summary.timeSpentMinutes)}</td>
                        <td className="px-3 py-2">{u.summary.lastActiveAt ? new Date(u.summary.lastActiveAt).toLocaleString() : "-"}</td>
                        <td className="px-3 py-2">
                          <button
                            className={`rounded-lg border px-2 py-1 ${selectedUserId === u.summary.userId ? 'bg-black text-white' : 'bg-white'}`}
                            onClick={() => setSelectedUserId(u.summary.userId)}
                          >
                            ดูรายคน
                          </button>
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            </div>
          </div>
        )}

        {/* Individual detail */}
        {selectedUser && (
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
            {/* Left: Metrics + Modules */}
            <div className="lg:col-span-1 space-y-4">
              <div className="rounded-2xl border bg-white p-4">
                <div className="font-semibold mb-2">สรุปบุคคล</div>
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between"><span>ผู้เรียน</span><span>{selectedUser.summary.name || selectedUser.summary.userId}</span></div>
                  <div className="flex justify-between"><span>เรียนจบ/ทั้งหมด</span><span>{selectedUser.summary.completedModules}/{selectedUser.summary.totalModules}</span></div>
                  <div className="flex justify-between"><span>อัตราเรียนจบ</span><span>{selectedUser.summary.totalModules ? Math.round(selectedUser.summary.completedModules/selectedUser.summary.totalModules*100) : 0}%</span></div>
                  <div className="flex justify-between"><span>คะแนนเฉลี่ย</span><span>{selectedUser.summary.avgScore ?? '-'}</span></div>
                  <div className="flex justify-between"><span>เวลาเรียนรวม</span><span>{formatMinutes(selectedUser.summary.timeSpentMinutes)}</span></div>
                  <div className="flex justify-between"><span>Active ล่าสุด</span><span>{selectedUser.summary.lastActiveAt ? new Date(selectedUser.summary.lastActiveAt).toLocaleString() : '-'}</span></div>
                </div>
              </div>

              <div className="rounded-2xl border bg-white p-4">
                <div className="flex items-center justify-between mb-2">
                  <div className="font-semibold">โมดูลของบุคคล</div>
                  <button className="rounded-lg border px-2 py-1" onClick={exportUserModulesCsv}><Download className="w-4 h-4" /></button>
                </div>
                <div className="max-h-[28rem] overflow-auto text-sm">
                  <table className="min-w-full">
                    <thead>
                      <tr className="text-left border-b">
                        <th className="px-2 py-2">โมดูล</th>
                        <th className="px-2 py-2">สถานะ</th>
                        <th className="px-2 py-2">คะแนน</th>
                        <th className="px-2 py-2">เวลา</th>
                      </tr>
                    </thead>
                    <tbody>
                      {selectedUser.modules.map(m => (
                        <tr key={m.moduleId} className="border-b">
                          <td className="px-2 py-2">{m.moduleTitle}</td>
                          <td className="px-2 py-2 capitalize">{m.status.replace('_',' ')}</td>
                          <td className="px-2 py-2">{m.score ?? '-'}</td>
                          <td className="px-2 py-2">{formatMinutes(m.timeSpentMinutes)}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>

            {/* Right: Charts */}
            <div className="lg:col-span-2 space-y-4">
              <div className="rounded-2xl border bg-white p-4">
                <div className="font-semibold mb-2">ความคืบหน้ารายวัน (Completed)</div>
                <div className="h-64">
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart data={selectedUser.daily}>
                      <XAxis dataKey="date" />
                      <YAxis allowDecimals={false} />
                      <Tooltip />
                      <Legend />
                      <Bar dataKey="completed" name="Completed" />
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              </div>

              <div className="rounded-2xl border bg-white p-4">
                <div className="font-semibold mb-2">เวลาเรียนรายวัน (นาที) & คะแนนเฉลี่ย</div>
                <div className="h-64">
                  <ResponsiveContainer width="100%" height="100%">
                    <LineChart data={selectedUser.daily}>
                      <XAxis dataKey="date" />
                      <YAxis yAxisId="left" />
                      <YAxis yAxisId="right" orientation="right" />
                      <Tooltip />
                      <Legend />
                      <Line type="monotone" dataKey="minutes" name="Minutes" yAxisId="left" />
                      <Line type="monotone" dataKey="scoreAvg" name="Avg Score" yAxisId="right" />
                    </LineChart>
                  </ResponsiveContainer>
                </div>
              </div>
            </div>
          </div>
        )}

        {!loading && !teamSummary && !error && (
          <div className="text-sm opacity-70">เลือกทีม, ช่วงเวลา แล้วกด "ดูรายงาน"</div>
        )}
      </div>
    </div>
  );
}
