import React, { useContext, useEffect, useMemo, useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import SupervisorSidebarWidget from "../Widgets/SupervisorSideBar";
import { AuthContext } from "../../../Authentication/AuthContext";
import { X, Check, Sparkles, Users, User, Megaphone, Loader2 } from "lucide-react";

// ----------------------
// Toggle: ‡πÉ‡∏ä‡πâ Mock (‡πÑ‡∏°‡πà‡∏¢‡∏¥‡∏á API ‡∏à‡∏£‡∏¥‡∏á)
// ----------------------
const USE_MOCK = false; // ‡∏ï‡∏±‡πâ‡∏á true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö UI ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å backend

// ----------------------
// Types
// ----------------------
type UserT = { id: string; name: string };
type TeamT = { id: string; name: string };

type Target = "ALL" | "TEAM" | "USER";

type FormState = {
  message: string;
  target: Target;
  selectedUsers: string[];
  selectedTeamIds: string[];
};

const INITIAL_STATE: FormState = {
  message: "",
  target: "ALL",
  selectedUsers: [],
  selectedTeamIds: [],
};

// ----------------------
// Mock data (‡πÄ‡∏°‡∏∑‡πà‡∏≠ USE_MOCK = true)
// ----------------------
const MOCK_USERS: UserT[] = [
  { id: "alice@example.com", name: "Alice" },
  { id: "bob@example.com", name: "Bob" },
  { id: "charlie@example.com", name: "Charlie" },
  { id: "daisy@example.com", name: "Daisy" },
  { id: "ethan@example.com", name: "Ethan" },
];

const MOCK_TEAMS: TeamT[] = [
  { id: "T-001", name: "Onboarding Squad" },
  { id: "T-002", name: "Sales Enablement" },
  { id: "T-003", name: "Tech Academy" },
];

// ----------------------
// Templates (‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß)
// ----------------------
const TEMPLATES = [
  "üì¢ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®: ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏≠‡∏ö‡∏£‡∏°‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ",
  "üéØ Feedback: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏î‡∏µ‡∏°‡∏≤‡∏Å! ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏∞",
  "‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤",
];

// ----------------------
// Component
// ----------------------
const Svpsendfeedback: React.FC = () => {
  const navigate = useNavigate();
  const { token: ctxToken } = useContext(AuthContext);
  const token =
    ctxToken || localStorage.getItem("token") || sessionStorage.getItem("token");

  const [form, setForm] = useState<FormState>(INITIAL_STATE);
  const [users, setUsers] = useState<UserT[]>([]);
  const [teams, setTeams] = useState<TeamT[]>([]);
  const [loading, setLoading] = useState(false);
  const [busyLoad, setBusyLoad] = useState(true);
  const [toast, setToast] = useState<string | null>(null);

  // Char limit
  const MAX_LEN = 500;
  const charsLeft = MAX_LEN - form.message.length;
  const overLimit = charsLeft < 0;

  // Load data (‡∏à‡∏≤‡∏Å API ‡∏´‡∏£‡∏∑‡∏≠ Mock)
  useEffect(() => {
    (async () => {
      if (!token && !USE_MOCK) {
        navigate("/");
        return;
      }
      setBusyLoad(true);

      if (USE_MOCK) {
        // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
        setUsers(MOCK_USERS);
        setTeams(MOCK_TEAMS);
        setBusyLoad(false);
        return;
      }

      try {
        const [uRes, tRes] = await Promise.all([
          axios.get<UserT[]>("/api/profile/users", {
            headers: { Authorization: `Bearer ${token}` },
          }),
          axios.get<TeamT[]>("/api/teams", {
            headers: { Authorization: `Bearer ${token}` },
          }),
        ]);
        setUsers(uRes.data ?? []);
        setTeams(tRes.data ?? []);
      } catch (err) {
        console.error("‚ùå Load data failed:", err);
        // fallback ‡∏ß‡πà‡∏≤‡∏á ‡πÜ ‡πÅ‡∏ï‡πà‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
        setUsers([]);
        setTeams([]);
      } finally {
        setBusyLoad(false);
      }
    })();
  }, [token, navigate]);

  // handlers
  const handleChange: React.ChangeEventHandler<
    HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
  > = (e) => {
    const { name, value } = e.target;
    setForm((prev) => ({
      ...prev,
      [name]: value as FormState[keyof FormState],
      ...(name === "target" ? { selectedUsers: [], selectedTeamIds: [] } : {}),
    }));
  };

  const handleUserSelect: React.ChangeEventHandler<HTMLSelectElement> = (e) => {
    const selected = Array.from(e.currentTarget.selectedOptions, (o) => o.value);
    setForm((prev) => ({ ...prev, selectedUsers: selected }));
  };

  const handleTeamSelect: React.ChangeEventHandler<HTMLSelectElement> = (e) => {
    const selected = Array.from(e.currentTarget.selectedOptions, (o) => o.value);
    setForm((prev) => ({ ...prev, selectedTeamIds: selected }));
  };

  const removeSelectedUser = (id: string) =>
    setForm((prev) => ({
      ...prev,
      selectedUsers: prev.selectedUsers.filter((x) => x !== id),
    }));

  const removeSelectedTeam = (id: string) =>
    setForm((prev) => ({
      ...prev,
      selectedTeamIds: prev.selectedTeamIds.filter((x) => x !== id),
    }));

  const applyTemplate = (text: string) =>
    setForm((prev) => ({ ...prev, message: prev.message ? `${prev.message}\n\n${text}` : text }));

  const canSubmit = useMemo(() => {
    if (!form.message.trim() || overLimit) return false;
    if (form.target === "USER" && form.selectedUsers.length === 0) return false;
    if (form.target === "TEAM" && form.selectedTeamIds.length === 0) return false;
    return true;
  }, [form, overLimit]);

  const handleSubmit: React.FormEventHandler = async (e) => {
    e.preventDefault();
    if (!canSubmit) return;

    const payload = {
      message: form.message.trim(),
      target: form.target,
      userIds: form.target === "USER" ? form.selectedUsers : [],
      teamIds: form.target === "TEAM" ? form.selectedTeamIds : [],
      type: form.target, // ‡∏Ñ‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
    };

    try {
      setLoading(true);

      if (USE_MOCK) {
        // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
        await new Promise((r) => setTimeout(r, 700));
        setToast(`‚úÖ Mock: ‡∏™‡πà‡∏á Feedback ‡πÅ‡∏ö‡∏ö ${form.target} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
      } else {
        await axios.post("/api/notifications", payload, {
          headers: { Authorization: `Bearer ${token}` },
        });
        setToast("‚úÖ Notification sent!");
      }

      setForm(INITIAL_STATE);
      // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô ‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
      // navigate("/admin");
    } catch (err: unknown) {
      if (axios.isAxiosError(err)) {
        console.error("‚ùå Axios Error:", err.response?.data || err.message);
        alert(`‚ùå ${err.response?.data || "Failed to send notification."}`);
      } else {
        console.error("‚ùå Unknown Error:", err);
        alert("‚ùå Unknown error occurred.");
      }
    } finally {
      setLoading(false);
      setTimeout(() => setToast(null), 3000);
    }
  };

  if (!token && !USE_MOCK) return null;

  // helper: render chips
  const Chip = ({
    children,
    onRemove,
  }: {
    children: React.ReactNode;
    onRemove?: () => void;
  }) => (
    <span className="inline-flex items-center gap-2 rounded-full border px-3 py-1 text-xs bg-white">
      {children}
      {onRemove && (
        <button className="opacity-60 hover:opacity-100" onClick={onRemove}>
          <X className="w-3.5 h-3.5" />
        </button>
      )}
    </span>
  );

  return (
    <div className="min-h-screen bg-gray-50 flex">
      <SupervisorSidebarWidget />

      <main className="flex-1 p-6 overflow-y-auto">
        <div className="max-w-3xl mx-auto space-y-6">
          {/* Header */}
          <div className="flex items-center justify-between">
            <h1 className="text-2xl font-bold text-blue-800 flex items-center gap-2">
              <Megaphone className="w-6 h-6" /> Send Feedback
            </h1>
            <div className="text-xs opacity-60">
              Mode: <b>{USE_MOCK ? "Mock" : "Live"}</b>
            </div>
          </div>

          {/* Card */}
          <div className="bg-white shadow p-6 rounded-xl space-y-6 border">
            <form onSubmit={handleSubmit} className="space-y-5">
              {/* Templates */}
              <div>
                <div className="mb-2 text-sm font-medium text-gray-700 flex items-center gap-2">
                  <Sparkles className="w-4 h-4" />
                  Quick Templates
                </div>
                <div className="flex flex-wrap gap-2">
                  {TEMPLATES.map((t) => (
                    <button
                      key={t}
                      type="button"
                      onClick={() => applyTemplate(t)}
                      className="px-3 py-1 rounded-full border bg-white hover:bg-gray-50 text-sm"
                    >
                      {t.slice(0, 36)}{t.length > 36 ? "‚Ä¶" : ""}
                    </button>
                  ))}
                </div>
              </div>

              {/* Message */}
              <div>
                <label className="font-medium text-sm text-gray-700">Message</label>
                <textarea
                  name="message"
                  rows={5}
                  maxLength={MAX_LEN + 200} // ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡πÅ‡∏ï‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                  value={form.message}
                  onChange={handleChange}
                  required
                  className={`w-full mt-1 p-3 border rounded-lg bg-gray-50 focus:bg-white ${
                    overLimit ? "border-red-400" : ""
                  }`}
                  placeholder="Type your announcement or message..."
                />
                <div
                  className={`mt-1 text-xs ${
                    overLimit ? "text-red-600" : "text-gray-500"
                  }`}
                >
                  {overLimit ? `‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤ ${Math.abs(charsLeft)} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£` : `${charsLeft} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠`}
                </div>
              </div>

              {/* Target */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="md:col-span-1">
                  <label className="font-medium text-sm text-gray-700">Send To</label>
                  <select
                    name="target"
                    value={form.target}
                    onChange={handleChange}
                    className="w-full mt-1 p-2 border rounded-lg bg-gray-50"
                  >
                    <option value="ALL">All users</option>
                    <option value="TEAM">Teams</option>
                    <option value="USER">Users</option>
                  </select>
                </div>

                {/* Teams multi-select */}
                {form.target === "TEAM" && (
                  <div className="md:col-span-2">
                    <label className="font-medium text-sm text-gray-700">Select Teams</label>
                    <select
                      multiple
                      value={form.selectedTeamIds}
                      onChange={handleTeamSelect}
                      className="w-full mt-1 p-2 border rounded-lg bg-gray-50 h-40"
                    >
                      {teams.map((t) => (
                        <option key={t.id} value={t.id}>
                          {t.name}
                        </option>
                      ))}
                    </select>

                    {/* Selected chips */}
                    <div className="mt-2 flex flex-wrap gap-2">
                      {form.selectedTeamIds.map((tid) => {
                        const t = teams.find((x) => x.id === tid);
                        return (
                          <Chip key={tid} onRemove={() => removeSelectedTeam(tid)}>
                            <Users className="w-3.5 h-3.5" />
                            {t?.name || tid}
                          </Chip>
                        );
                      })}
                    </div>
                  </div>
                )}

                {/* Users multi-select */}
                {form.target === "USER" && (
                  <div className="md:col-span-2">
                    <label className="font-medium text-sm text-gray-700">Select Users</label>
                    <select
                      multiple
                      value={form.selectedUsers}
                      onChange={handleUserSelect}
                      className="w-full mt-1 p-2 border rounded-lg bg-gray-50 h-40"
                    >
                      {users.map((u) => (
                        <option key={u.id} value={u.id}>
                          {u.name} ‚Äî {u.id}
                        </option>
                      ))}
                    </select>

                    {/* Selected chips */}
                    <div className="mt-2 flex flex-wrap gap-2">
                      {form.selectedUsers.map((uid) => {
                        const u = users.find((x) => x.id === uid);
                        return (
                          <Chip key={uid} onRemove={() => removeSelectedUser(uid)}>
                            <User className="w-3.5 h-3.5" />
                            {u?.name || uid}
                          </Chip>
                        );
                      })}
                    </div>
                  </div>
                )}
              </div>

              {/* Preview */}
              <div className="rounded-xl border bg-gray-50 p-4">
                <div className="text-sm font-semibold mb-2">Preview</div>
                <div className="text-sm whitespace-pre-wrap">
                  {form.message || <span className="opacity-60">‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‚Ä¶</span>}
                </div>
                <div className="mt-3 text-xs text-gray-500 flex items-center gap-2">
                  <Check className="w-4 h-4" />
                  Target:{" "}
                  {form.target === "ALL"
                    ? "All users"
                    : form.target === "TEAM"
                    ? `${form.selectedTeamIds.length} team(s)`
                    : `${form.selectedUsers.length} user(s)`}
                </div>
              </div>

              {/* Submit */}
              <button
                type="submit"
                disabled={loading || !canSubmit}
                className="inline-flex items-center gap-2 bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50"
              >
                {loading ? (
                  <>
                    <Loader2 className="w-4 h-4 animate-spin" /> Sending‚Ä¶
                  </>
                ) : (
                  <>
                    <Megaphone className="w-4 h-4" /> Send Feedback
                  </>
                )}
              </button>
            </form>
          </div>

          {/* Toast */}
          {toast && (
            <div className="fixed bottom-4 right-4 rounded-xl border bg-white shadow p-3 flex items-center gap-2 text-sm">
              <Check className="w-4 h-4 text-green-700" />
              <span>{toast}</span>
              <button
                className="ml-2 opacity-60 hover:opacity-100"
                onClick={() => setToast(null)}
              >
                <X className="w-4 h-4" />
              </button>
            </div>
          )}
        </div>

        {/* Loading overlay ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏≠‡∏ô initial load */}
        {busyLoad && (
          <div className="fixed inset-0 bg-black/5 backdrop-blur-sm flex items-center justify-center z-20">
            <div className="bg-white rounded-xl border px-4 py-3 shadow inline-flex items-center gap-2">
              <Loader2 className="w-4 h-4 animate-spin" />
              <span className="text-sm">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‚Ä¶</span>
            </div>
          </div>
        )}
      </main>
    </div>
  );
};

export default Svpsendfeedback;
