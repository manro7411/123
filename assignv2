import { useEffect, useMemo, useState } from "react";
import SupervisorSidebarWidget from "../Widgets/SupervisorSideBar";
import {
  CalendarDays,
  Check,
  ChevronDown,
  ChevronRight,
  Filter,
  Search,
  Send,
  Users,
  BookOpen,
  X,
  Info,
} from "lucide-react";
import { ENDPOINTS } from "../routes/Utilities";

/**
 * New version (V2) — Assign Courses via Bulk Endpoint
 *
 * ใช้ PUT /assignments/updateAssignTypeToSpecific
 * Body (server-side DTO):
 * {
 *   courseIds?: string[],
 *   teamId?: string,
 *   assignees?: string[],
 *   dueDate?: "YYYY-MM-DD",
 *   createIfMissing?: boolean,
 *   defaultTitle?: string,
 *   defaultCategory?: string
 * }
 *
 * Notes:
 * - แนบ Authorization: Bearer <token> กับทุกคำขอผ่าน fetchJson()
 * - มี fallback mock เมื่อ backend ล้มเหลว
 * - มี option ให้ "สร้างคอร์สให้ใหม่" ถ้าไม่ได้เลือกคอร์ส
 */

// ----------------------
// Types (UI)
// ----------------------
export type Team = { id: string; name: string; supervisorId?: string };
export type Member = { userId: string; name: string; role?: string };
export type Course = {
  id: string;
  title: string;
  category?: string;
  level?: "Beginner" | "Intermediate" | "Advanced";
  durationMin?: number;
  tags?: string[];
};

export type AssignmentDraft = {
  assignees: string[]; // userIds (email/userId)
  courseIds: string[];
  dueDate?: string; // YYYY-MM-DD
  defaultTitle: string;
  defaultCategory: string;
  createIfMissing: boolean;
};

// ----------------------
// Mock (fallback)
// ----------------------
const MOCK_TEAMS: Team[] = [
  { id: "T-001", name: "Onboarding Squad", supervisorId: "svp@gmail.com" },
  { id: "T-002", name: "Sales Enablement", supervisorId: "svp@gmail.com" },
];

function mkMember(userId: string): Member {
  const base = userId.split("@")[0];
  const name = base.charAt(0).toUpperCase() + base.slice(1);
  return { userId, name, role: "member" };
}

const MOCK_MEMBERS: Record<string, Member[]> = {
  "T-001": [
    "alice@example.com",
    "bob@example.com",
    "charlie@example.com",
    "daisy@example.com",
    "ethan@example.com",
  ].map(mkMember),
  "T-002": [
    "fiona@example.com",
    "george@example.com",
    "hana@example.com",
    "ivan@example.com",
  ].map(mkMember),
};

const MOCK_CATALOG: Course[] = [
  {
    id: "C-101",
    title: "Company Onboarding 101",
    category: "Onboarding",
    level: "Beginner",
    durationMin: 45,
    tags: ["policy", "intro"],
  },
  {
    id: "C-201",
    title: "Security Basics",
    category: "Compliance",
    level: "Beginner",
    durationMin: 30,
    tags: ["security", "policy"],
  },
  {
    id: "C-310",
    title: "Effective Sales Pitch",
    category: "Sales",
    level: "Intermediate",
    durationMin: 60,
    tags: ["sales", "presentation"],
  },
  {
    id: "C-330",
    title: "CRM for Sales",
    category: "Sales",
    level: "Beginner",
    durationMin: 50,
    tags: ["crm"],
  },
  {
    id: "C-405",
    title: "Advanced Data Privacy",
    category: "Compliance",
    level: "Advanced",
    durationMin: 70,
    tags: ["privacy"],
  },
  {
    id: "C-420",
    title: "Coaching Skills for Trainers",
    category: "Leadership",
    level: "Intermediate",
    durationMin: 55,
    tags: ["trainer", "leadership"],
  },
];

// ----------------------
// Helpers
// ----------------------
function getToken(): string | null {
  return localStorage.getItem("token") || sessionStorage.getItem("token") || null;
}

async function fetchJson<T>(url: string, init?: RequestInit): Promise<T> {
  const token = getToken();
  const res = await fetch(url, {
    credentials: "include",
    headers: {
      "Content-Type": "application/json",
      ...(token ? { Authorization: `Bearer ${token}` } : {}),
      ...(init?.headers || {}),
    },
    ...init,
  });

  if (!res.ok) {
    if (res.status === 401) {
      const text = await res.text().catch(() => "");
      throw new Error(text || "401 Unauthorized — กรุณาเข้าสู่ระบบใหม่");
    }
    const text = await res.text().catch(() => "");
    throw new Error(text || `HTTP ${res.status} - ${res.statusText}`);
  }
  // บาง response PUT อาจไม่มี body ให้ try/catch
  try {
    return (await res.json()) as T;
  } catch {
    return {} as T;
  }
}

// สำหรับคนที่ยังไม่มีการกำหนด ENDPOINTS ที่ฝั่ง front
// จะใช้ key ด้านล่างนี้เป็น fallback อัตโนมัติ
const FallbackEndpoints = {
  teamsMine: "/teams/mine",
  teamsAll: "/teams",
  teamMembers: (id: string) => `/teams/${id}/members`,
  catalog: "/learning/all",
  bulkAssign: "/assignments/updateAssignTypeToSpecific", // PUT
};

// ดึง ENDPOINTS ถ้าโปรเจ็กต์คุณมี config อยู่แล้ว
const API = {
  teamsMine: (ENDPOINTS as any)?.teamsMine || FallbackEndpoints.teamsMine,
  teamsAll: (ENDPOINTS as any)?.teamsAll || FallbackEndpoints.teamsAll,
  teamMembers:
    (ENDPOINTS as any)?.teamMembers || ((id: string) => FallbackEndpoints.teamMembers(id)),
  catalog: (ENDPOINTS as any)?.catalog || FallbackEndpoints.catalog,
  bulkAssign: (ENDPOINTS as any)?.bulkAssign || FallbackEndpoints.bulkAssign,
};

// ----------------------
// Component
// ----------------------
export default function SvpAssignCoursesV2() {
  // data states
  const [teams, setTeams] = useState<Team[]>([]);
  const [members, setMembers] = useState<Member[]>([]);
  const [catalog, setCatalog] = useState<Course[]>([]);

  // selections & form
  const [selectedTeamId, setSelectedTeamId] = useState<string>("");
  const [draft, setDraft] = useState<AssignmentDraft>({
    assignees: [],
    courseIds: [],
    dueDate: "",
    defaultTitle: "Mock Course - Safety 101",
    defaultCategory: "General",
    createIfMissing: true,
  });
  const [note, setNote] = useState<string>(""); // (ไม่ได้ส่งไป backend ในเวอร์ชันนี้ แต่เก็บเผื่อ)
  const [priority, setPriority] = useState<"Low" | "Normal" | "High">("Normal");

  // UI & filters
  const [query, setQuery] = useState("");
  const [category, setCategory] = useState<string>("All");
  const [level, setLevel] = useState<string>("All");
  const [loading, setLoading] = useState<boolean>(false);
  const [toast, setToast] = useState<string | null>(null);

  // ---------- load teams ----------
  useEffect(() => {
    (async () => {
      try {
        let list = await fetchJson<any[]>(API.teamsMine).catch(async () => {
          return fetchJson<any[]>(API.teamsAll);
        });

        const mapped: Team[] = list
          .map((t) => ({
            id: t.id || t.teamId || t.uuid,
            name: t.name || t.teamName || "Untitled Team",
            supervisorId: t.supervisorId || t.owner || undefined,
          }))
          .filter((t) => !!t.id);

        if (!mapped.length) throw new Error("No team found");
        setTeams(mapped);
        setSelectedTeamId(mapped[0].id);
      } catch (e) {
        console.error(e);
        setTeams(MOCK_TEAMS);
        setSelectedTeamId(MOCK_TEAMS[0].id);
        setToast("⚠️ โหลดรายชื่อทีมไม่สำเร็จ — แสดงข้อมูลจำลองแทน");
      }
    })();
  }, []);

  // ---------- load members when team changes ----------
  useEffect(() => {
    if (!selectedTeamId) return;
    (async () => {
      try {
        const list = await fetchJson<any[]>(API.teamMembers(selectedTeamId));
        const mapped: Member[] = list
          .map((m) => ({
            userId: m.userId || m.email || m.id,
            name: m.name || m.displayName || m.email || "Unnamed",
            role: m.role,
          }))
          .filter((m) => !!m.userId);
        setMembers(mapped);
      } catch (e) {
        console.error(e);
        setMembers(MOCK_MEMBERS[selectedTeamId] || []);
        setToast("⚠️ โหลดสมาชิกทีมไม่สำเร็จ — แสดงข้อมูลจำลองแทน");
      } finally {
        // reset assignees เมื่อสลับทีม
        setDraft((prev) => ({ ...prev, assignees: [] }));
      }
    })();
  }, [selectedTeamId]);

  // ---------- load catalog once ----------
  useEffect(() => {
    (async () => {
      try {
        const list = await fetchJson<any[]>(API.catalog);
        const mapped: Course[] = list
          .map((c) => ({
            id: c.id,
            title: c.title || "Untitled",
            category: c.category || c.contentType || "General",
            level: (c.level as Course["level"]) || "Beginner",
            durationMin: c.durationMin,
            tags: c.tags || [],
          }))
          .filter((c) => !!c.id);
        if (!mapped.length) throw new Error("No courses");
        setCatalog(mapped);
      } catch (e) {
        console.error(e);
        setCatalog(MOCK_CATALOG);
        setToast("⚠️ โหลดคอร์สไม่สำเร็จ — แสดงข้อมูลจำลองแทน");
      }
    })();
  }, []);

  // ---------- computed ----------
  const categories = useMemo(() => {
    const allCats = catalog.map((c) => c.category || "General");
    return Array.from(new Set(["All", ...allCats]));
  }, [catalog]);
  const levels = ["All", "Beginner", "Intermediate", "Advanced"];

  const filteredCatalog = useMemo(() => {
    return catalog.filter(
      (c) =>
        (category === "All" || (c.category || "General") === category) &&
        (level === "All" || (c.level || "Beginner") === level) &&
        (query.trim() === "" ||
          c.title.toLowerCase().includes(query.toLowerCase()) ||
          (c.tags || []).some((t) => t.toLowerCase().includes(query.toLowerCase())))
    );
  }, [catalog, category, level, query]);

  // ---------- actions ----------
  const toggleAssignee = (userId: string) => {
    setDraft((prev) => {
      const has = prev.assignees.includes(userId);
      const next = has ? prev.assignees.filter((id) => id !== userId) : [...prev.assignees, userId];
      return { ...prev, assignees: next };
    });
  };

  const toggleCourse = (courseId: string) => {
    setDraft((prev) => {
      const has = prev.courseIds.includes(courseId);
      const next = has ? prev.courseIds.filter((id) => id !== courseId) : [...prev.courseIds, courseId];
      return { ...prev, courseIds: next };
    });
  };

  const setAllTeam = () =>
    setDraft((prev) => ({ ...prev, assignees: members.map((m) => m.userId) }));
  const clearAssignees = () => setDraft((prev) => ({ ...prev, assignees: [] }));
  const clearCourses = () => setDraft((prev) => ({ ...prev, courseIds: [] }));

  const doBulkAssign = async () => {
    if (!selectedTeamId) {
      setToast("กรุณาเลือกทีม");
      return;
    }
    // ต้องมี assignees อย่างน้อย 1 (อาจมาจากทีม + คลิกเลือกเพิ่ม)
    if (!draft.assignees.length && !selectedTeamId) {
      setToast("กรุณาเลือกผู้รับมอบหมายอย่างน้อย 1 คน");
      return;
    }

    // ถ้าไม่มี courseIds ให้ใช้โหมด "สร้างคอร์สใหม่"
    const usingCreate = draft.courseIds.length === 0;

    if (usingCreate && !draft.createIfMissing) {
      setToast("กรุณาเลือกคอร์สอย่างน้อย 1 รายการ หรือเปิด Create If Missing");
      return;
    }

    if (usingCreate && draft.defaultTitle.trim().length === 0) {
      setToast("กรุณากรอกชื่อคอร์ส (Default Title) เมื่อสร้างคอร์สใหม่");
      return;
    }

    setLoading(true);
    try {
      const payload = {
        courseIds: draft.courseIds, // อาจเป็น [] ได้
        teamId: selectedTeamId, // ให้ backend ไปดึงสมาชิกทีม (ถ้ามี data จริง)
        assignees: draft.assignees, // และรวมรายชื่อที่เลือกเอง
        dueDate: draft.dueDate || undefined, // YYYY-MM-DD
        createIfMissing: draft.createIfMissing,
        defaultTitle: draft.defaultTitle || undefined,
        defaultCategory: draft.defaultCategory || undefined,
      };

      const resp = await fetchJson<{ requestId?: string; updatedCourses?: number; affectedUsers?: number }>(
        API.bulkAssign,
        {
          method: "PUT",
          body: JSON.stringify(payload),
        }
      );

      setToast(
        `✅ สำเร็จ • อัปเดตคอร์ส: ${resp.updatedCourses ?? (usingCreate ? 1 : draft.courseIds.length)} • ผู้ได้รับมอบหมาย: ${
          resp.affectedUsers ?? draft.assignees.length
        }`
      );

      // เคลียร์เฉพาะคอร์สที่เลือก (คง assignees ไว้ตาม UX เดิม)
      setDraft((prev) => ({ ...prev, courseIds: [] }));
    } catch (e: any) {
      console.error(e);
      const msg = typeof e?.message === "string" ? e.message : "Bulk assign failed";
      setToast(`❌ ไม่สำเร็จ: ${msg}`);
    } finally {
      setLoading(false);
    }
  };

  // ---------- UI helpers ----------
  const AssigneeChip = ({ id, name }: { id: string; name: string }) => (
    <div className="inline-flex items-center gap-2 rounded-full border px-3 py-1 text-sm bg-white">
      <Users className="w-3.5 h-3.5" />
      <span className="truncate max-w-[140px]">{name}</span>
      <button
        className="opacity-60 hover:opacity-100"
        onClick={() => toggleAssignee(id)}
        title="Remove"
      >
        <X className="w-3.5 h-3.5" />
      </button>
    </div>
  );

  const CourseChip = ({ id, title }: { id: string; title: string }) => (
    <div className="inline-flex items-center gap-2 rounded-full border px-3 py-1 text-sm bg-white">
      <BookOpen className="w-3.5 h-3.5" />
      <span className="truncate max-w-[160px]">{title}</span>
      <button
        className="opacity-60 hover:opacity-100"
        onClick={() => toggleCourse(id)}
        title="Remove"
      >
        <X className="w-3.5 h-3.5" />
      </button>
    </div>
  );

  const selectedTeam = teams.find((t) => t.id === selectedTeamId);
  const selectedMembers = members.filter((m) => draft.assignees.includes(m.userId));
  const selectedCourses = catalog.filter((c) => draft.courseIds.includes(c.id));

  return (
    <div className="flex h-screen bg-gray-50">
      <SupervisorSidebarWidget />

      <div className="flex-1 p-6 md:p-8 overflow-y-auto space-y-6">
        {/* Header */}
        <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-3">
          <h1 className="text-2xl md:text-3xl font-bold">Assign Courses (Bulk – V2)</h1>
          <div className="text-sm opacity-70">
            ทีมที่เลือก: <span className="font-medium">{selectedTeam?.name || "-"}</span>
          </div>
        </div>

        {/* Info banner */}
        <div className="rounded-xl border bg-white p-3 flex items-start gap-3">
          <Info className="w-5 h-5 mt-0.5" />
          <div className="text-sm">
            ระบบจะใช้ <b>PUT /assignments/updateAssignTypeToSpecific</b> และบังคับ{' '}
            <code>assignType = "specific"</code> พร้อมรวมรายชื่อจากทีมและผู้ที่เลือกเอง
            หากไม่เลือกคอร์สและเปิด <b>Create If Missing</b> ระบบจะสร้างคอร์ส minimal ให้ใหม่อัตโนมัติ
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
          {/* Team & members (left) */}
          <div className="rounded-2xl border bg-white p-4">
            <div className="flex items-center justify-between mb-3">
              <div className="font-semibold">ทีมของฉัน</div>
              <div className="text-xs opacity-60">
                {teams.length ? "เลือกทีม แล้วเลือกสมาชิก" : "กำลังโหลดทีม..."}
              </div>
            </div>

            {/* Team selector */}
            <div className="mb-3">
              <button
                className="inline-flex items-center gap-2 rounded-xl border px-3 py-2 bg-white"
                disabled={!teams.length}
              >
                <ChevronDown className="w-4 h-4" /> {selectedTeam?.name || "—"}
              </button>
              <div className="mt-2 flex gap-2 flex-wrap">
                {teams.map((t) => (
                  <button
                    key={t.id}
                    onClick={() => setSelectedTeamId(t.id)}
                    className={`rounded-full px-3 py-1 border text-sm ${
                      selectedTeamId === t.id ? "bg-blue-600 text-white" : "bg-white"
                    }`}
                  >
                    {t.name}
                  </button>
                ))}
              </div>
            </div>

            {/* Members list */}
            <div className="border rounded-xl overflow-hidden">
              <div className="px-3 py-2 text-xs uppercase bg-gray-50 border-b">สมาชิกในทีม</div>
              <div className="max-h-64 overflow-auto divide-y">
                {members.length ? (
                  members.map((m) => {
                    const active = draft.assignees.includes(m.userId);
                    return (
                      <button
                        key={m.userId}
                        onClick={() => toggleAssignee(m.userId)}
                        className={`w-full flex items-center justify-between px-3 py-2 text-left hover:bg-gray-50 ${
                          active ? "bg-gray-50" : ""
                        }`}
                      >
                        <div className="truncate">
                          <div className="font-medium truncate">{m.name}</div>
                          <div className="text-xs opacity-60 truncate">{m.userId}</div>
                        </div>
                        {active ? (
                          <Check className="w-4 h-4" />
                        ) : (
                          <ChevronRight className="w-4 h-4 opacity-60" />
                        )}
                      </button>
                    );
                  })
                ) : (
                  <div className="px-3 py-6 text-sm opacity-60">ไม่มีสมาชิกหรือกำลังโหลด…</div>
                )}
              </div>
              <div className="px-3 py-2 flex gap-2">
                <button
                  className="rounded-lg border px-2 py-1 text-sm"
                  onClick={setAllTeam}
                  disabled={!members.length}
                >
                  เลือกทั้งทีม
                </button>
                <button className="rounded-lg border px-2 py-1 text-sm" onClick={clearAssignees}>
                  ล้าง
                </button>
              </div>
            </div>
          </div>

          {/* Catalog (middle) */}
          <div className="rounded-2xl border bg-white p-4">
            <div className="flex items-center justify-between mb-3">
              <div className="font-semibold">คอร์สทั้งหมด</div>
              <div className="text-xs opacity-60">
                {catalog.length ? "ค้นหา/กรอง เพื่อเพิ่มเข้าตะกร้า" : "กำลังโหลดคอร์ส..."}
              </div>
            </div>

            <div className="flex items-center gap-2 mb-3">
              <div className="relative flex-1">
                <Search className="w-4 h-4 absolute left-3 top-1/2 -translate-y-1/2 opacity-60" />
                <input
                  className="w-full rounded-xl border pl-9 pr-3 py-2 bg-white"
                  placeholder="ค้นหาชื่อคอร์สหรือแท็ก"
                  value={query}
                  onChange={(e) => setQuery(e.target.value)}
                />
              </div>
              <div className="inline-flex items-center gap-2 rounded-xl border px-3 py-2 bg-white">
                <Filter className="w-4 h-4" />
                <select
                  className="bg-transparent max-w-[140px]"
                  value={category}
                  onChange={(e) => setCategory(e.target.value)}
                >
                  {categories.map((c) => (
                    <option key={c} value={c}>
                      {c}
                    </option>
                  ))}
                </select>
                <span className="opacity-30">|</span>
                <select
                  className="bg-transparent max-w-[140px]"
                  value={level}
                  onChange={(e) => setLevel(e.target.value)}
                >
                  {levels.map((lv) => (
                    <option key={lv} value={lv}>
                      {lv}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <div className="border rounded-xl overflow-hidden">
              <div className="px-3 py-2 text-xs uppercase bg-gray-50 border-b">รายการคอร์ส</div>
              <div className="max-h-64 overflow-auto divide-y">
                {filteredCatalog.map((c) => {
                  const active = draft.courseIds.includes(c.id);
                  return (
                    <button
                      key={c.id}
                      onClick={() => toggleCourse(c.id)}
                      className={`w-full grid grid-cols-12 gap-2 items-center px-3 py-3 text-left hover:bg-gray-50 ${
                        active ? "bg-gray-50" : ""
                      }`}
                    >
                      <div className="col-span-6">
                        <div className="font-medium truncate">{c.title}</div>
                        <div className="text-xs opacity-60 truncate">
                          {(c.category || "General")} • {(c.level || "Beginner")}
                        </div>
                      </div>
                      <div className="col-span-3 text-xs opacity-70">
                        {c.durationMin ? `${c.durationMin} นาที` : "-"}
                      </div>
                      <div className="col-span-3 flex justify-end">
                        {active ? (
                          <span className="inline-flex items-center gap-1 text-green-700 text-xs">
                            <Check className="w-4 h-4" /> เลือกแล้ว
                          </span>
                        ) : (
                          <span className="inline-flex items-center gap-1 text-xs opacity-70">
                            <BookOpen className="w-4 h-4" /> เลือก
                          </span>
                        )}
                      </div>
                    </button>
                  );
                })}
                {!filteredCatalog.length && (
                  <div className="px-3 py-6 text-sm opacity-60">ไม่พบคอร์สที่ตรงเงื่อนไข</div>
                )}
              </div>
              <div className="px-3 py-2 flex gap-2">
                <button className="rounded-lg border px-2 py-1 text-sm" onClick={clearCourses}>
                  ล้างคอร์ส
                </button>
              </div>
            </div>
          </div>

          {/* Basket (right) */}
          <div className="rounded-2xl border bg-white p-4">
            <div className="flex items-center justify-between mb-3">
              <div className="font-semibold">ตะกร้ามอบหมาย (Bulk)</div>
              <div className="text-xs opacity-60">ตรวจสอบก่อนกดยืนยัน</div>
            </div>

            {/* Assignees */}
            <div className="mb-3">
              <div className="text-xs uppercase opacity-60 mb-2">
                ผู้เรียนที่เลือก ({selectedMembers.length})
              </div>
              <div className="flex gap-2 flex-wrap">
                {selectedMembers.length ? (
                  selectedMembers.map((m) => (
                    <AssigneeChip key={m.userId} id={m.userId} name={m.name} />
                  ))
                ) : (
                  <div className="text-sm opacity-60">ยังไม่เลือกผู้เรียน</div>
                )}
              </div>
            </div>

            {/* Courses */}
            <div className="mb-3">
              <div className="text-xs uppercase opacity-60 mb-2">
                คอร์สที่เลือก ({selectedCourses.length})
              </div>
              <div className="flex gap-2 flex-wrap">
                {selectedCourses.length ? (
                  selectedCourses.map((c) => <CourseChip key={c.id} id={c.id} title={c.title} />)
                ) : (
                  <div className="text-sm opacity-60">
                    ยังไม่เลือกคอร์ส — หรือเปิด Create If Missing เพื่อให้ระบบสร้างคอร์ส minimal ให้
                  </div>
                )}
              </div>
            </div>

            {/* Settings */}
            <div className="grid grid-cols-1 gap-3 mb-3">
              <div>
                <div className="text-xs uppercase opacity-60 mb-1">กำหนดส่ง (Due Date)</div>
                <div className="relative">
                  <CalendarDays className="w-4 h-4 absolute left-3 top-1/2 -translate-y-1/2 opacity-60" />
                  <input
                    type="date"
                    className="w-full rounded-xl border pl-9 pr-3 py-2 bg-white"
                    value={draft.dueDate || ""}
                    onChange={(e) =>
                      setDraft((prev) => ({ ...prev, dueDate: e.target.value }))
                    }
                  />
                </div>
              </div>

              <div>
                <div className="text-xs uppercase opacity-60 mb-1">
                  สร้างคอร์สใหม่ถ้าไม่มีการเลือก (Create If Missing)
                </div>
                <label className="flex items-center gap-2 text-sm">
                  <input
                    type="checkbox"
                    checked={draft.createIfMissing}
                    onChange={(e) =>
                      setDraft((prev) => ({ ...prev, createIfMissing: e.target.checked }))
                    }
                  />
                  <span>เปิดใช้งาน</span>
                </label>
              </div>

              <div className={`${draft.createIfMissing ? "opacity-100" : "opacity-50"}`}>
                <div className="text-xs uppercase opacity-60 mb-1">
                  Default Title (เมื่อสร้างคอร์สใหม่)
                </div>
                <input
                  className="w-full rounded-xl border px-3 py-2 bg-white"
                  placeholder="เช่น Mock Course - Safety 101"
                  value={draft.defaultTitle}
                  onChange={(e) =>
                    setDraft((prev) => ({ ...prev, defaultTitle: e.target.value }))
                  }
                  disabled={!draft.createIfMissing}
                />
              </div>

              <div className={`${draft.createIfMissing ? "opacity-100" : "opacity-50"}`}>
                <div className="text-xs uppercase opacity-60 mb-1">
                  Default Category (เมื่อสร้างคอร์สใหม่)
                </div>
                <input
                  className="w-full rounded-xl border px-3 py-2 bg-white"
                  placeholder="เช่น General"
                  value={draft.defaultCategory}
                  onChange={(e) =>
                    setDraft((prev) => ({ ...prev, defaultCategory: e.target.value }))
                  }
                  disabled={!draft.createIfMissing}
                />
              </div>

              <div>
                <div className="text-xs uppercase opacity-60 mb-1">ความสำคัญ (UI only)</div>
                <select
                  className="w-full rounded-xl border px-3 py-2 bg-white"
                  value={priority}
                  onChange={(e) => setPriority(e.target.value as typeof priority)}
                >
                  <option>Low</option>
                  <option>Normal</option>
                  <option>High</option>
                </select>
                <div className="mt-1 text-xs opacity-60">
                  *ฟิลด์นี้เป็น UI อย่างเดียว รุ่นนี้ยังไม่ได้ส่งไป backend
                </div>
              </div>

              <div>
                <div className="text-xs uppercase opacity-60 mb-1">
                  บันทึกข้อความถึงผู้เรียน (UI only)
                </div>
                <textarea
                  className="w-full rounded-xl border px-3 py-2 bg-white min-h-[84px]"
                  placeholder="เช่น โปรดเรียนภายในสัปดาห์นี้"
                  value={note}
                  onChange={(e) => setNote(e.target.value)}
                />
                <div className="mt-1 text-xs opacity-60">
                  *ฟิลด์นี้เป็น UI อย่างเดียว รุ่นนี้ยังไม่ได้ส่งไป backend
                </div>
              </div>
            </div>

            {/* Submit */}
            <button
              className="w-full inline-flex items-center justify-center gap-2 rounded-xl border px-3 py-2 bg-blue-600 text-white hover:opacity-90 disabled:opacity-60"
              onClick={doBulkAssign}
              disabled={loading}
            >
              <Send className="w-4 h-4" /> {loading ? "กำลังมอบหมาย..." : "ยืนยันมอบหมายแบบ Bulk"}
            </button>

            <div className="mt-3 text-xs opacity-60">
              *ใช้ข้อมูลจริงจากระบบ (fallback เป็น mock อัตโนมัติเมื่อ API ล้มเหลว)
            </div>
          </div>
        </div>

        {/* Toast */}
        {toast && (
          <div className="fixed bottom-4 right-4 rounded-xl border bg-white shadow p-3 flex items-center gap-2 text-sm z-50">
            <Check className="w-4 h-4 text-green-700" />
            <span>{toast}</span>
            <button
              className="ml-2 opacity-60 hover:opacity-100"
              onClick={() => setToast(null)}
            >
              <X className="w-4 h-4" />
            </button>
          </div>
        )}
      </div>
    </div>
  );
}
----
import React, { useContext, useEffect, useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import { AuthContext } from "../../../Authentication/AuthContext";
import AdminSidebarWidget from "../Widgets/AdminSideBar";
import { TARGET_OPTION } from "../AdminUtil";

type User = { id: string; name: string };
type Team = { id: string; name: string };

type FormState = {
  message: string;
  target: "ALL" | "TEAM" | "USER";
  selectedUsers: string[];
  selectedTeamIds: string[];
};

const INITIAL_STATE: FormState = {
  message: "",
  target: "ALL",
  selectedUsers: [],
  selectedTeamIds: [],
};

const AdminCreateNotificationPage: React.FC = () => {
  const { token: ctxToken } = useContext(AuthContext);
  const token =
    ctxToken ||
    localStorage.getItem("token") ||
    sessionStorage.getItem("token");

  const navigate = useNavigate();

  const [form, setForm] = useState<FormState>(INITIAL_STATE);
  const [users, setUsers] = useState<User[]>([]);
  const [teams, setTeams] = useState<Team[]>([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (!token) {
      navigate("/");
      return;
    }

    axios
      .get<User[]>("/api/profile/users", {
        headers: { Authorization: `Bearer ${token}` },
      })
      .then((res) => setUsers(res.data))
      .catch((err) => {
        console.error("❌ Failed to load users:", err);
      });

    axios
      .get<Team[]>("/api/teams", {
        headers: { Authorization: `Bearer ${token}` },
      })
      .then((res) => {
        setTeams(res.data);
      })
      .catch((err) => {
        console.error("❌ Failed to load teams:", err);
        alert("Failed to load team list.");
      });
  }, [token, navigate]);

  const handleChange = (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
    >
  ) => {
    const { name, value } = e.target;
    setForm((prev) => ({
      ...prev,
      [name]: value as FormState[keyof FormState],
      ...(name === "target"
        ? { selectedUsers: [], selectedTeamIds: [] }
        : {}),
    }));
  };

  const handleUserSelect = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const selected = Array.from(e.currentTarget.selectedOptions, (o) => o.value);
    setForm((prev) => ({ ...prev, selectedUsers: selected }));
  };

  const handleTeamSelect = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const selected = Array.from(e.currentTarget.selectedOptions, (o) => o.value);
    setForm((prev) => ({ ...prev, selectedTeamIds: selected }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!token) return;

    if (form.target === "USER" && form.selectedUsers.length === 0) {
      alert("❗ Please select at least one user.");
      return;
    }
    if (form.target === "TEAM" && form.selectedTeamIds.length === 0) {
      alert("❗ Please select at least one team.");
      return;
    }

    const payload = {
      message: form.message,
      target: form.target,
      userIds: form.target === "USER" ? form.selectedUsers : [],
      teamIds: form.target === "TEAM" ? form.selectedTeamIds : [],
      type : form.target === "ALL" ? "ALL" : form.target === "TEAM" ? "TEAM" : "USER",
    };

    try {
      setLoading(true);
      await axios.post("/api/notifications", payload, {
        headers: { Authorization: `Bearer ${token}` },
      });
      alert("✅ Notification sent!");
      setForm(INITIAL_STATE);
      navigate("/admin");
    } catch (err: unknown) {
      if (axios.isAxiosError(err)) {
        console.error("❌ Axios Error:", err.response?.data || err.message);
        alert(`❌ ${err.response?.data || "Failed to send notification."}`);
      } else {
        console.error("❌ Unknown Error:", err);
        alert("❌ Unknown error occurred.");
      }
    } finally {
      setLoading(false);
    }
  };

  if (!token) return null;

  return (
    <div className="min-h-screen bg-gray-50 flex">
      <AdminSidebarWidget />
      <main className="flex-1 p-6 overflow-y-auto">
        <div className="max-w-2xl mx-auto bg-white shadow p-8 rounded-xl space-y-6">
          <h1 className="text-2xl font-bold text-blue-800">📢 Send Notification</h1>

          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="font-medium text-sm text-gray-700">Message</label>
              <textarea
                name="message"
                rows={4}
                value={form.message}
                onChange={handleChange}
                required
                className="w-full mt-1 p-2 border rounded-lg bg-gray-50"
                placeholder="Type your announcement or message..."
              />
            </div>

            <div>
              <label className="font-medium text-sm text-gray-700">Send To</label>
              <select
                name="target"
                value={form.target}
                onChange={handleChange}
                className="w-full mt-1 p-2 border rounded-lg bg-gray-50"
              >
                {TARGET_OPTION["Noti-Option"].map((option)=>(
                  <option value={option.index}>{option.option}</option>
                ))}
              </select>
            </div>

            {form.target === "USER" && (
              <div>
                <label className="font-medium text-sm text-gray-700">
                  Select Users
                </label>
                <select
                  multiple
                  value={form.selectedUsers}
                  onChange={handleUserSelect}
                  className="w-full mt-1 p-2 border rounded-lg bg-gray-50 h-40"
                >
                  {users.map((u) => (
                    <option key={u.id} value={u.id}>
                      {u.name}
                    </option>
                  ))}
                </select>
                {users.length === 0 && (
                  <p className="text-xs text-gray-400 mt-1">Loading users...</p>
                )}
              </div>
            )}

            {form.target === "TEAM" && (
              <div>
                <label className="font-medium text-sm text-gray-700">Select Teams</label>
                <select
                  multiple
                  value={form.selectedTeamIds}
                  onChange={handleTeamSelect}
                  className="w-full mt-1 p-2 border rounded-lg bg-gray-50 h-40"
                >
                  {teams.map((team) => (
                    <option key={team.id} value={team.id}>
                      {team.name}
                    </option>
                  ))}
                </select>
                {teams.length === 0 && (
                  <p className="text-xs text-gray-400 mt-1">Loading teams...</p>
                )}
              </div>
            )}

            <button
              type="submit"
              disabled={loading}
              className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50"
            >
              {loading ? "Sending..." : "Send Notification"}
            </button>
          </form>
        </div>
      </main>
    </div>
  );
};

export default AdminCreateNotificationPage;
