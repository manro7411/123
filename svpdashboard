@GET
@Path("/my-teams")
public List<TeamSummary> getTeamsByUserIdQuery(@QueryParam("userId") String userId) {
    if (userId == null || userId.isBlank()) throw new BadRequestException("userId is required");
    List<TeamEntity> teams = em.createQuery(
            "SELECT DISTINCT m.team FROM MemberEntity m " +
            "LEFT JOIN FETCH m.team.memberEntities " +
            "WHERE LOWER(m.memberId) = LOWER(:uid)", TeamEntity.class)
        .setParameter("uid", userId)
        .getResultList();
    return teams.stream().map(TeamResource::toSummary).toList();
}

// ตัวอย่างที่แนะนำ
@Column(name = "member_id", nullable = false)
private String memberId;

@Column(name = "name_members")
private String nameMembers;

public String getMemberId() { return memberId; }
public void setMemberId(String memberId) { this.memberId = memberId; }

public String getNameMembers() { return nameMembers; }
public void setNameMembers(String nameMembers) { this.nameMembers = nameMembers; }

ข----------
@PUT
@Transactional
@Path("/{memberId}/role")
@RolesAllowed({"admin","supervisor","administrator"})
public Response setRole(
        @PathParam("teamId") String teamId,
        @PathParam("memberId") String memberId,
        Map<String,String> body,
        @Context SecurityContext securityContext) {

    String role = body != null ? body.getOrDefault("role", "").toLowerCase() : "";
    if (!role.equals("member") && !role.equals("trainer")) {
        throw new BadRequestException("role must be 'member' or 'trainer'");
    }

    // (แนะนำ) ตรวจสิทธิ์: คนเรียกต้องเป็น supervisor ของทีมนี้ หรือ admin
    String who = securityContext.getUserPrincipal().getName();
    boolean isAdmin = securityContext.isUserInRole("admin") || securityContext.isUserInRole("administrator");
    if (!isAdmin) {
        boolean requesterIsSupervisor = em.createQuery(
                "SELECT COUNT(m) FROM MemberEntity m WHERE m.team.id=:tid AND LOWER(m.memberId)=LOWER(:uid) AND LOWER(m.role)='supervisor'",
                Long.class
            ).setParameter("tid", teamId)
             .setParameter("uid", who)
             .getSingleResult() > 0;
        if (!requesterIsSupervisor) {
            throw new ForbiddenException("Only team supervisor can change roles.");
        }
    }

    MemberEntity m = em.createQuery(
            "SELECT m FROM MemberEntity m WHERE m.team.id = :tid AND LOWER(m.memberId) = LOWER(:uid)",
            MemberEntity.class)
        .setParameter("tid", teamId)
        .setParameter("uid", memberId)
        .getResultStream().findFirst()
        .orElseThrow(() -> new NotFoundException("Member not found"));

    // กันการลดบทบาท supervisor (คนสุดท้าย) — เผื่อปุ่ม FE ผิด
    if ("supervisor".equalsIgnoreCase(m.getRole())) {
        long supervisorCount = em.createQuery(
                "SELECT COUNT(m) FROM MemberEntity m WHERE m.team.id = :tid AND LOWER(m.role) = 'supervisor'",
                Long.class)
            .setParameter("tid", teamId)
            .getSingleResult();
        if (supervisorCount <= 1) {
            throw new BadRequestException("Cannot change role of the last supervisor in the team");
        }
    }

    m.setRole(role);
    em.merge(m);
    return Response.ok(new dto.Team.TeamMemberDTO(m.getMemberId(), m.getNameMembers(), m.getRole())).build();
}
-----------
@DELETE
@Path("/{memberId}")
@Transactional
@RolesAllowed({"admin","supervisor","administrator"})
public void deleteMember(@PathParam("teamId") String teamId,
                         @PathParam("memberId") String memberId,
                         @Context SecurityContext securityContext) {
    MemberEntity m = em.createQuery(
            "SELECT m FROM MemberEntity m WHERE m.team.id=:tid AND LOWER(m.memberId)=LOWER(:uid)",
            MemberEntity.class)
        .setParameter("tid", teamId)
        .setParameter("uid", memberId)
        .getResultStream().findFirst()
        .orElse(null);
    if (m == null) throw new NotFoundException("Member not found");
    if ("supervisor".equalsIgnoreCase(m.getRole())) {
        throw new BadRequestException("Cannot remove a supervisor here (use admin flow)");
    }
    em.remove(m);
}
